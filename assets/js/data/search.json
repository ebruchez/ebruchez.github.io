[ { "title": "Building an Apple-1 Reproduction in 2024/2025 - Part 7: The Audio Cassette Adapter", "url": "/posts/apple-1-reproduction-part-7-audio-cassette-adapter/", "categories": "Technology", "tags": "", "date": "2025-06-24 19:00:00 -0700", "snippet": "This is part of a series of posts about building an Apple-1 reproduction in 2024 (and 2025). See also: Building an Apple-1 Reproduction in 2024 - Part 1: Components Building an Apple-1 Reproducti...", "content": "This is part of a series of posts about building an Apple-1 reproduction in 2024 (and 2025). See also: Building an Apple-1 Reproduction in 2024 - Part 1: Components Building an Apple-1 Reproduction in 2024 - Part 2: Power Supply Building an Apple-1 Reproduction in 2024 - Part 3: The Retro Chip Tester Building an Apple-1 Reproduction in 2024 - Part 4: Assembly Building an Apple-1 Reproduction in 2024 - Part 5: Monitor, Keyboard, Power-Up Building an Apple-1 Reproduction in 2024/2025 - Part 6: C Programming Bird's-eye view of the Apple-1 with its ACI and tape recorderIntroductionThe Apple-1 was very short-lived and made in small quantities (less than 200 units). Unlike other computers of the days, it never got to have many peripherals. However, Steve Wozniak did design an audio cassette adapter (known simply as the “ACI”), which allowed the Apple-1 to save and load programs and data to and from standard audio cassettes. This was the Apple-1’s “storage” in modern parlance — that is, some kind of persistent memory.The idea of using an audio recorder to keep computer data is simple: you encode each bit of data as a short sound. Specifically, in this case, according to the ACI manual: a 1 kHz cycle (representing a ‘one’ data bit) or a 2 kHz cycle (representing a ‘zero’ data bit)It’s a miracle that something this simple worked, especially with an electronic circuit containing only four chips in addition to the PROMs. But it did, with some caveats about reliability.The ACI fits into the single expansion slot of the Apple-1. This still leaves the edge connector available for other extensions, but it is a reminder that the Apple-1 had relatively few extension capabilities by default, in particular compared to the later Apple II, which had eight expansion slots.The PCBI ordered the PCB from Mike Newton (AKA Mike Ng). It wasn’t as cheap as if I had one made directly from a PCB manufacturer, but it looks closer to the original. In fact, it is a beautiful PCB. The ACI reproduction PCBThe PCB came not only with programmed PROMs, but also with a few spare components. The extra componentsI happened to already have most of the components, but I appreciated them anyway.ComponentsI had already acquired most of the components for the ACI while I was planning the acquisition of the components for the main board. There is not that much: Component Comment PROMs I had two sets, one from Mike and one from Germany. IC sockets I used machined sockets, as I did for the Apple-1 main board. 74 series chips Unlike those on the main board, these are “LS”. LM311 op amp   2 transistors The 2N3904 is a proven modern replacement for MPS3704. LED I went with the 3 mm size instead of the 5 mm. I believe that the 3 mm size is more correct. Resistors See further notes below about the 10 kΩ. I tried to get Allen Bradley resistors when possible, for looks. Capacitors One is needed for the original design, and one more for the volume indicator mod. Audio jacks You can still buy the panel-mount audio jacks new, which I had done already, in addition to those I got from Mike. Audio cables I wanted to have some good-looking, flexible, short audio cables. So I ordered 2 feet long braided cables from Amazon, with 3.5 mm male jacks on both ends. The audio cables I used for the ACIACI optionsResourcesYou might think that things are simple: get the PCB, components, solder, and voilà. However, there is more to it. Here are some resources that I consulted before proceeding with the build: Mike Willegal’s Mimeo Cassette Interface Assembly and Operations Guide On AppleFritter: UNCLE BERNIE’S IMPROVED APPLE-1 CASSETTE INTERFACE Which ACI improvements do exist (and work) ? San Bergmans’s page about the Apple-1 Cassette InterfaceInput capacitorEverybody agrees that a specific change needs to be made compared with the original. This recommendation was made by Mike Willegal’s in particular. It consists in increasing the value of the input coupling capacitor from 10 nF to 100 nF. The 10 nF value just seems to have been a bad design choice back in the days: Mike Willegal: “increase the value of the input coupling capacitor” Uncle Bernie: “It is absolutely necessary that you put the 100nF input capacitor mod in, as suggested by Mike Willegal.”Decoupling capacitorsThis might be minor, but I decided to add two decoupling capacitors for the PROMs. This is not strictly necessary, but it won’t hurt, and I am now confident about mounting capacitors into IC sockets. The decoupling capacitors for the PROMs10 kΩ resistorsThe original ACI called for 1% 10 kΩ resistors. But Uncle Bernie commented: The 1% spec probably was an attempt by Woz to make the ACI work better. The attempt failed. No amount of matching in these resistors can undo the catastrophic AC impedance mismatch which suddenly occurs at the comparator inputs when the cassette recorder is plugged in.And: But according to my opinion, it is not necessary to use 1% tolerated resistors for the four 10K ones. You can use 5% and 10% resistors (which I tried out). With 20% resistors (old carbon composition resistors perhaps) I’d recommend you to measure a bunch of them and pick four which come closest to each other. This “closeness” of the values among these four resistors (electronic professionals call this “matching”) most likely is the reason why Woz specified 1% tolerances.So I just used my large batch of Allen Bradley 10 kΩ resistors. I measured a few and picked four that were close, understanding that this was probably not necessary, but there was no real drawback going through this just in case. Partial assemblyGen1 or Gen2?Uncle Bernie worked on an improved version of the ACI, which he calls “Gen2.” I looked into it, but unfortunately PCBs for it are not in the open and not available anymore from Mike Newton. So I decided to go with the “Gen1” version, which is the original version, but with some improvements.Uncle Bernie suggested two types of ACI improvements: A fix for the volume indicator, which uses the unused half of the 74LS74. The use of larger PROMs, with improved software.I decided to implement the first one, but not the second one, as I don’t have the larger PROMs anyway.The audio volume fix requires cutting two traces on the ACI board, and adding some wires as well as a capacitor. Uncle Bernie suggested mounting that capacitor within an IC socket, but since the wire needs to go out, it is a little tricky. I decided to leave the IC socket unmodified, and to place the capacitor on the bottom of the board. I carefully bent the legs of the capacitor, and used heat shrink tubing to protect the legs and wires. This is more visible than Uncle Bernie’s solution, but a little less tricky to implement. However, I am pretty happy with how the small wires to the jacks came up! The volume indicator fix on the ACIIn summary, compared to the original ACI, the list of changes is as follows: use the 100 nF input coupling capacitor mod add two decoupling capacitors for the PROMs for the volume indicator fix cut two traces on the ACI board replace the 100 kΩ resistor with a 5.1 MΩ resistor add the 1 nF capacitor add the necessary wires I didn’t have Allen Bradley resistors except for the 10 kΩ ones, so I used regular resistors, which I soldered a little more lightly so I could replace them later. In fact, I quickly got and soldered Allen Bradley 100 Ω resistors.Here is the fully assembled ACI board without the ICs. The fully assembled ACI boardNote that I mounted the 3 mm LED bent, as I think most ACIs were made. 100 Ω resistor and LEDAnd here is the fully assembled board with the ICs mounted in their sockets. The ACI board with the 100 Ω resistorsInstalling the ACIThe first thing to be careful about here is the orientation, facing outward. The ACI installed in the Apple-1Here is the view from the other side. The mods are definitely visible, and there is surely a way to make them a little less conspicuous, but I don’t think that it’s a big deal. Remember that the Apple-1 was a hobbyist’s computer, designed to be modded and tinkered with. The ACI installed in the Apple-1, from the other sideI had to update my memory map: I had set E000 to map to the EPROM, in order to have contiguous RAM in 0000-1FFF for my C code. So installed individual machined IC socket pins in the memory map section, so I could easily jumper them. It worked, although I am slightly concerned about the reliability of the jumper wires. The memory map with jumper wiresTesting the ACIThe ACI had its own software implemented into two PROMs on the board itself. The ACI PROMsThose are simply mounted in the Apple-1’s address space at address C100. You run the ACI program from that address from Wozmon with:C100RThe ACI program lets you read or write memory ranges from and to tape, using a slightly cryptic syntax similar to the Wozmon syntax for examining memory. Running this worked the first time, showing a * prompt: my soldering and the PROMs were good!The most significant program written for the Apple-1 was probably Woz’s Integer BASIC, so it was natural to load that first. I had already run it from EPROM, so I knew it worked. But now I wanted to load it through the ACI.Since I didn’t have a tape recorder at first, I connected the input audio cable to my laptop’s audio output. I played back the Apple-1 audio from the Internet Archive from my computer. Audio tapes on Archive.orgThe volume indicator didn’t light up at first, so I checked the connections and found that I had forgotten to solder a pin of the 74LS74! I fixed that, and the indicator worked! The ACI volume indicator workingI played back the BASIC source from my computer, from archive.org. I used the following command:C100RE000.EFFFRThis reads 4KB form the audio and writes it at address E000. The trailing R means “read,” and E000.EFFFR means “memory from E000 to EFFF.”At first, it didn’t quite work and running the resulting code at E000R crashed. I reset the computer, started again, but increased the computer’s audio volume a little, and then it worked! This also translated into the indicator LED being brighter and flickering less. I was in BASIC! BASIC loaded from the computer via the ACIThe tape recorderIt’s nice and all to be able to use a computer as an audio recorder, but not quite period-correct. So I decided to use a real tape recorder. Apple recommended a Panasonic recorder. Mike Willegal says it was a Panasonic RQ2102 and, “believe it or not, they are still available from Panasonic.” I am not sure they are actually still made in 2025, but I bought a used one on ShopGoodwill, for just over $20 shipped. The Panasonic RQ-2102 tape recorderIt turned out to be in clean and almost pristine condition. The inside of the Panasonic RQ-2102 tape recorderIt was manufactured in 2012. The Panasonic RQ-2102 tape recorder's manufacturing dateI plugged both the input and the output of the ACI into the tape recorder, as intended. The ACI has a 3.5mm female audio jack for input, and a 3.5mm female audio jack for output, and the tape recorder has corresponding female jacks as well.I wanted to load BASIC from tape, as a user would have done in the 1970s. There are a few ways to get a tape with BASIC on it. You can obtain a tape with the BASIC program already on it. You can make a tape yourself.I chose the second option. But how? I could simply play the audio from my laptop and record it to the tape recorder. Instead, I did it the harder way: I reloaded BASIC from the computer into the Apple-1 as done above, and then saved it to tape from the Apple-1. I used the following command:C100RE000.EFFFWAs simple as that! The trailing W means “write,” and the E000.EFFF means “read from memory from E000 to EFFF.” I now had a tape with BASIC on it! BASIC saved to tapeThe next step was to write a simple BASIC program, save it to tape, and then reload it. I used a separate tape, to avoid mistakenly overwriting my BASIC tape. In the BASIC manual, Apple documented how to do this: write your program in BASIC press RESET to exit BASIC run the ACI program with C100R type 4A.00FFW800.FFFW set the tape recorder to “record” press “RETURN” to start writing to the tape Saving a program to tapeTo read the program back, you run the ACI program again, type 4A.00FFR800.FFFR, set the tape recorder to “play,” and press return on the computer. Then you reenter BASIC not with E000R as usual, but with E2B3R. This enters BASIC without clearing the program memory. From there, it is as if you had just typed in the program read from tape.It would be fun to do the same for my C program. You would need to do something similar to what is done with BASIC: identity the memory regions needed by the program add an entry point which doesn’t re-initializes the program’s working memory, in particular the heapIt’s probably an obvious thing to say, but the ACI does not remote-control the tape recorder, so you need to press the “play” or “record” buttons at appropriate times, as well as rewind the tape yourself. This is unlike big iron tape drives for the mainframes and minicomputers of the time, which were controlled by the computer. IBM 2401 System/360 tape drivesPhoto credit: Erik Pitti, San Diego, CA, USAManualApple made a separate small manual for the ACI. It is available in PDF online, but I had obtained a nice reproduction of the Apple Cassette Interface (ACI) manual alongside the regular Apple-1 manual and the BASIC manual. The ACI manualOther workMini keyboard adapterUncle Bernie designed a tiny Apple II to Apple-1 keyboard adapter. I assembled one without difficulty. You have to solder independent pins, as well as an SMD transistor, but I now have decent experience soldering small components. The mini keyboard adapter's bottomFrom the top: The mini keyboard adapter's topAnd in use: The mini keyboard adapter in useI also implemented Uncle Bernie’s Apple II keyboard mod, to make the rarely used REPT key act as a Clear Screen key. The REPT keyFor this, you have to: cut a couple of traces on the keyboard add a resistor add a couple of wires Part of the modThis still allows the keyboard to work with an Apple II.Failed 74175Incidentally, as I got back to the Apple-1 after few months without turning it on, I found that it didn’t work anymore. The display was not showing what it was supposed to show, as if it didn’t synchronize. I tried a couple of monitors, cables, and eventually zeroed in on the 74175, a quad D-type flip-flop, made in 1973: swapping it for another chip, the issue was resolved. I tested the 74175 in my chip tester, and it showed as failed there too, unsurprisingly. Curiously, the chip must somehow have gone bad between the last time I had the Apple-1 on, a few months ago, and now. The failed 74175ConclusionI now have a fully functional Apple-1 reproduction, with a working ACI and tape recorder. The only thing missing from this setup would be a case. I am not yet sure if I will build one, although I have collected lots of pictures from existing cases, vintage and modern. If I do, I will plan to write a follow-up post." }, { "title": "Building an Apple-1 Reproduction in 2024/2025 - Part 6: C Programming", "url": "/posts/apple-1-reproduction-part-6-c-programming/", "categories": "Technology", "tags": "", "date": "2025-01-25 14:00:00 -0800", "snippet": "This is part of a series of posts about building an Apple-1 reproduction in 2024 (and 2025). See also: Building an Apple-1 Reproduction in 2024 - Part 1: Components Building an Apple-1 Reproducti...", "content": "This is part of a series of posts about building an Apple-1 reproduction in 2024 (and 2025). See also: Building an Apple-1 Reproduction in 2024 - Part 1: Components Building an Apple-1 Reproduction in 2024 - Part 2: Power Supply Building an Apple-1 Reproduction in 2024 - Part 3: The Retro Chip Tester Building an Apple-1 Reproduction in 2024 - Part 4: Assembly Building an Apple-1 Reproduction in 2024 - Part 5: Monitor, Keyboard, Power-Up Building an Apple-1 Reproduction in 2024/2025 - Part 7: The Audio Cassette Adapter Demo application written in CProgramming the Apple-1Back in the days, the obvious choices for programming the Apple-1 were assembly language and BASIC. The former, because it was the most direct way: the Apple-1, thanks to WOZMON, allowed you to enter 6502 instructions in hexadecimal directly into memory, and then to run them. You would probably build your program in assembly on paper (or in your head), then “assemble” by hand into hexadecimal. Over time, you would learn the opcodes by heart. Many programmers got started this way on all sorts of systems.BASIC was much easier to learn, but you needed to get the Apple-1 ACI (Audio Cassette Interface) to load it into memory. Apple-1 BASIC was written by Woz entirely in assembly, and it was a marvel of compactness and efficiency as it fit in 4K of memory.1Here is part of the cover of the Apple BASIC manual reproduction, made with love by Armin in Germany: Apple-1 BASIC manual cover (reproduction)In any case, after building my Apple-1 reproduction, I wanted to write some software for it, however simple.Why the C language?I didn’t think that assembly or BASIC were ideal for me. While 6502 assembly is probably the way to go to optimize performance and code size, it is also a very low-level language, and I thought that it would take me too much effort to get really fluent in the 6502 dialect. I never really learned 6502 assembly in its heyday, although I did peruse the great Commodore 64 manual.2 BASIC is, of course, much higher-level, but it is also very limited, and not challenging enough. C programming language logoInstead, I decided to try to write in C. It is a good compromise: it is a higher-level language compared to assembly, with functions, types, structs, enumerations, loops, and flexible ways to deal with memory, but it is also very close to the hardware. The resulting program can be burned into an EPROM. Further, I knew C reasonably well at some point in the 1990s so it should come back. But could it work on the Apple-1?C and the Apple-1At the time the Apple-1 came out in 1976, C was already a thing, kind of: the Unix kernel was rewritten in the brand new C language around 1973. But C didn’t become really public until 1978, when the first edition of the K&amp;R book was published. So it’s not surprising that C wasn’t available on the Apple-1. In addition, C required a compiler, which could easily run on a larger system like the PDP-11, but wouldn’t have been possible on anything as limited as the Apple-1, certainly not in the default memory configuration and without mass storage.3 It took the general availability of 16-bit systems to make C a practical language for microcomputers.4But nowadays, we have cross-compilers that can generate 6502 code, so the story is completely different. There are at least two possibilities: cc65 LLVM-MOSI had to choose which one to try first, and I went with cc65, as it seemed simpler and more lightweight, although it might not generate highly optimized code. Also, it has been around for decades now.InstallationI first installed cc65 on my Mac using Homebrew:brew install cc65I couldn’t find setup instructions for the Apple-1. Someone mentioned the Apple-1 in a forum around 2013, but that’s all I could find. So I read some of the documentation, and it turns out that the main thing you need is to create a linker configuration file. I created a file called apple1.ld65 (this is just my own naming). But what should be in it? A C program consists of: code, which can be in read-only memory or read-write memory initialized data, which can be read-only or read-write uninitialized dataIn addition, the C runtime needs: some “zero page” configuration a place for the CPU stack a place for the C stackOn the other hand, my hardware Apple-1 has: 8 KB of DRAM at address 0x0000 an EPROM extension board which can hold up to 4 KB of memory (2732 EPROM) at address 0xE000The linker script configures where everything goes. Here is the configuration I came up with, after a few tries:SYMBOLS { __STACKSIZE__: value = $800, type = weak; # 2KB stack}MEMORY { ZP: start = $0020, size = $00C0, define = yes; # needs to be at least $1A long (26 bytes) for cc65 RAM: start = $200, size = $1E00, define = yes; # RAM after \"6502 stack storage\" and fills up to 8KB ROM1: start = $E000, size = $1000, file = \"eprom_e000.bin\";}SEGMENTS { ZEROPAGE: load = ZP, type = zp, define = yes; STARTUP: load = ROM1, type = ro; ONCE: load = ROM1, type = ro, optional = yes; CODE: load = ROM1, type = ro; RODATA: load = ROM1, type = ro; DATA: load = ROM1, type = rw, run = RAM, define = yes; BSS: load = RAM, type = bss, define = yes;}FEATURES { STARTADDRESS: default = $E000; CONDES: segment = STARTUP, type = constructor, label = __CONSTRUCTOR_TABLE__, count = __CONSTRUCTOR_COUNT__; CONDES: segment = STARTUP, type = destructor, label = __DESTRUCTOR_TABLE__, count = __DESTRUCTOR_COUNT__;}The result of a compilation’s linker pass will produce a eprom_e000.bin file that can be loaded into a 4 KB EPROM located at address 0xE000.C libraryYou need to create a crt0.s file, which is the entry point of the program. Here is mine, copied from existing examples.You also need to create a library file if you want to use any C library functions that come with cc65. Note that cc65 doesn’t come with the entire standard C library, but with a subset of it. I called my library apple1.lib. The recommendation from the doc is to copy it from the supervision.lib file that comes with cc65. Here is how you can do it:cp /opt/homebrew/Cellar/cc65/2.19/share/cc65/lib/supervision.lib apple1.libca65 crt0.sar65 a apple1.lib crt0.oYou then compile, assemble, and link your C program like this:cc65 -t none -O main.cca65 main.sld65 -C apple1.ld65 -m main.map main.o apple1.libFinally, here is how I write the EPROM, using my very basic USB EPROM programmer:minipro -s -p 2732A@DIP24 -w eprom_e000.bin EPROM programming and erasing setupNote that you don’t want to type or rerun individual commands all the time, so I wrote a simple Makefile for this.First issueI was able to pretty quickly compile and run a simple “HELLORLD” program. However, when trying to run a simple for loop, it didn’t seem to work. How could something that simple fail?After a lot of debugging, I found that the call to the incax1 intrinsic was not, in fact, incrementing the ax register pair. I used, for debugging, things like this, which call into WOZMON’s FFDC routine to print an hex value:phajsr\t $ffdcplaThe reason for this was that the supervision.lib I used as the base for my C library was not compiled with plain 6502 instructions. In particular, it used the INC A increment instruction, available with the 65C02 which came out in 1983, but not my 1979 6502! My Synertek 6502 CPU made in July 1979So I had to do it the hard way and recompile the library for a plain 6502 target: I cloned the cc65 project from GitHub. I updated libsrc/Makefile: set --cpu 6502 kept only the supervision target I built the library: make lib I used this new supervision.lib as base for apple1.lib: ar65 a apple1.lib crt0.o again And, success! With this change, I was able to compile a C program with for loops on the Apple-1.Memory allocatorSince I was using C, I wanted to use malloc and free. Luckily, these functions are available in the cc65 library. But things didn’t work initially.I had to debug various constants, and finally found that I had to move my BSS after DATA for malloc to work.Here are some values I found: Symbol Value Notes __BSS_RUN__ 0x23C Starting address of the BSS section. __BSS_SIZE__ 0x54 Size of the BSS section. First address after BSS 0x290 First address after the BSS section (sum of previous two values). __heapmaxavail() 5484 Largest available block in the heap (in bytes). __heapmemavail() 5488 Total available heap memory (4 bytes more than previous value). First allocation 0x29D First address allocated by malloc. The memory layout ends up being: Function Value Notes BSS start 0x23C   C heap start 0x290   C heap end 0x17FF   C stack start/RAM end 0x1FFF __STACKSIZE__ is 0x800 and stack addresses are in descending order In conclusion, my malloc setup now appears fine, with various values in the right place, and I can allocate and free memory with some confidence. Note that: each allocation takes 4 bytes of overhead we have 5488 bytes of heap at beginningI could easily reduce the size of my C stack down from 2 KB if I need more usable RAM. I might also be able to recover some RAM in the lower space, after The ZP and CPU stack areas.Simple programBecause I was going to have guests over, and I was going to annoy them with the Apple-1 anyway, I decided to write a simple program that would allow them to check in. So I wrote a simple “Party checkin system” app which would: ask guests for their name and number of guests add them to a linked list display the list display the total number of guests allow to remove entries in the listI wrote simple utility functions in util.c: Function Purpose Description a1_cputc() Write a character to the screen Outputs a single character to the screen at the current cursor position. a1_cputs() Write a string to the screen Outputs a null-terminated string to the screen starting at the cursor. a1_cgetc() Read a character from the keyboard Reads a single character input from the user. a1_read_line() Read a line from the keyboard Reads a full line of input, storing it in a buffer. a1_read_number() Read and check a number from the keyboard Accepts and validates numeric input from the user. print_big() Print a large number on the screen Displays a number with large, stylized digits made up of smaller characters. Note that this is all there is to the Apple-1 in terms of I/O, without hardware extensions: you can write characters to the screen, and read characters from the keyboard. That’s it. There are no graphics capabilities, no sound, no network, no storage, no timers: it’s a very simple system!My main.c handles the linked list functions and the main loop.Coding tipsMy C might be rusty, but here are some things I quickly decided to do: use const whenever possible use type aliases for specific widths, such as uint8_t, uint16_t, etc.Here is an example of the style I am using:uint16_t a1_read_number() { uint16_t number = 0; uint8_t digits = 0; while(1) { const char c = a1_cgetc() &amp; 0x7F; if (c &gt;= '0' &amp;&amp; c &lt;= '9' &amp;&amp; digits &lt; 4) { a1_cputc(c); number = number * 10 + (c - '0'); digits++; } else if (c == CR &amp;&amp; digits &gt; 0) { break; } } return number;}LimitationsIt is clear that 4 KB of EPROM is very limiting. Yes, Woz wrote an entire BASIC interpreter in that space, but I am no Woz, and I am not using assembly. A little bit of data, a cprintf function, malloc, and a small program will quickly fill up that space. In fact, I had to avoid using printf(): it is convenient, but it takes significant EPROM space, so I reverted to use lower-level code.A possible next step will be to make an EPROM board that supports 8 KB or more of memory. This has been done before for the Apple-1, but I am not sure that there is a solution that I truly like (or that is affordable). I might decide to make my own.If the solution is limited to 8 KB, it is possible to use the S and T signals on the extension connector. But for more space, one needs to replicate address decoding on the extension card. This is not too hard, but it goes beyond simply connecting one or more EPROMs to the bus.ConclusionI am really happy that I was able to write a small C program for the Apple-1. It uses functions, malloc, standard string manipulation functions, creates a linked list, and flawlessly reads from the keyboard and writes to the video terminal. Demo application written in CYou can find the source code for the “Apple-1 Party” app on GitHub.Part 7 covers the Audio Cassette Interface (ACI). The same could be said of Bill Gates, Paul Allen, and Monte Davidoff’s 4K version of Microsoft BASIC for the Altair 8800. &#8617; However, I dabbled with a homemade Z80 computer board, I programmed in RCA 1802 assembly on my own boards, and I eventually got some mastery of 68000 assembly (a beautiful processor instruction set architecture). &#8617; I learned that Small-C, a subset of C that could run on 8-bit systems, specifically the 8080 microprocessor, was developed in 1980. &#8617; I found this interesting History of C Compilers article. &#8617; " }, { "title": "Building an Apple-1 Reproduction in 2024 - Part 5: Monitor, Keyboard, Power-Up", "url": "/posts/apple-1-reproduction-part-5-monitor-keyboard-power-up/", "categories": "Technology", "tags": "", "date": "2024-12-10 22:00:00 -0800", "snippet": "This is part 5 of a series of posts about building an Apple-1 reproduction in 2024 (and 2025). See also: Building an Apple-1 Reproduction in 2024 - Part 1: Components Building an Apple-1 Reproduc...", "content": "This is part 5 of a series of posts about building an Apple-1 reproduction in 2024 (and 2025). See also: Building an Apple-1 Reproduction in 2024 - Part 1: Components Building an Apple-1 Reproduction in 2024 - Part 2: Power Supply Building an Apple-1 Reproduction in 2024 - Part 3: The Retro Chip Tester Building an Apple-1 Reproduction in 2024 - Part 4: Assembly Building an Apple-1 Reproduction in 2024/2025 - Part 6: C Programming Building an Apple-1 Reproduction in 2024/2025 - Part 7: The Audio Cassette Adapter Working Apple-1 reproductionHitachi monitorIt’s nice to have the main board populated, but I needed a way to connect to the video output, or else how would I know if things were working? For this, I had two options: An LCD monitor with composite input that I used with my VIC-20. A 1975 Hitachi monitor that I bought at a flea market this year (see also Part 1). Hitachi monitor before restorationOf course, the Hitachi monitor would be perfect for the Apple-1, but I hadn’t really tested it. So first, I tried to connect it to my VIC-20. At that point I realized that the Hitachi doesn’t have standard RCA or BNC connector on the back. Fiddling with an RCA cable, I did manage to see some image on the Hitachi, although rotated 90 degrees. This indicated that the monitor was at least partially working!Searching online, I found out more about the connectors on the Hitachi: those are older-style “UHF” connectors. Luckily, I found some NOS BNC adapters on eBay (BNC(F)/UHF(M)), and ordered a couple of them. I actually only needed one, but I wanted to have a spare, or one for the output connector, for looks. \"UHF\" to BNC adapterLuckily, they fit perfectly, and they were in excellent NOS condition. \"UHF\" to BNC adapter on the back of the monitorI used the 75 Ohm setting of the monitor.I opened up the monitor. The back of the monitor opens easily with 4 screws. Back of the monitorFrom there, another 2 screws allow you to swivel open the main PCB. Back of the monitorYou can access the back of the CRT (Cathode Ray Tube) from there.PSA: CRTs can store a significant electric charge even when unplugged. Be careful when working around them. Don’t touch them if you don’t know what you are doing. Back of the CRTI removed the knobs and front panel: Front panel removedThe main front panel was lined with crumbling foam tape which I cleaned. Front panelI cleaned the inside of the monitor with compressed air.I used Hoppe’s #9 to remove the hardened glue residue on the top cover and sides. Glue residue on the top cover Glue residue removedI cannot recommend enough the following products and materials: Hoppe’s #9 plastic razor blades Goo GoneMost people might be aware of Goo Gone, but personally I only discovered Hoppe’s #9 thanks to my work on typewriters. It’s originally a gun cleaning product, but it has other uses, and works marvels where other products fail. You have to be a little careful with Hoppe’s #9, as it can remove paint. But I have found that on plastics, and even on most painted surfaces, it can remove all sorts of stains and hardened materials as safely as can be.I followed the following process: apply Hoppe’s #9 with a q-tip let it sit for a while carefully scrape with a plastic razor blade wipe repeatThis removed the glue residue entirely.I also cleaned the buttons cover. I used some plastic rejuvenator on the plastic parts, which helps a little for the looks. Buttons cover cleanedThe front panel of the monitor was broken. This was tinted plastic. I went to Tap Plastics and got a piece of the only tinted plastic they had, for about USD 11. This was thicker, but I went with it anyway. They cut it to a perfect size based on my original plastic part. It is definitely too thick, and a thinner piece would be better. But unless you know about it, you won’t notice that the bevels are not quite straight.Here is the monitor cleaned but without its front panel. Monitor cleanedHere is the new tinted plastic installed: Monitor with new tinted plasticI mentioned above that the image on this monitor, during a quick initial test, appeared to be rotated 90 degrees! I wondered if: there was a setting for this (unlikely) or whether it was just the yoke that someone had rotatedOnce the monitor was open, I was able to access the yoke. I compared the yoke position with a picture of a similar monitor I found online. It seemed to confirm that the yoke was rotated 90 degrees. I loosened the screws that keep the yoke in position, rotated it (carefully, with gloves), and got a properly-oriented image!First power-upWith a working monitor, it was time for the first real power-up of the board with all of its ICs populated.Mike Willegal, pioneer and hero of the Apple-1 reproduction scene, used to recommend powering-up the Apple-1 sections separately: first the terminal section, and second the computer section. Uncle Bernie, in the context of his kits, has recommended against doing this, and going straight for a full power-up. I decided to follow Uncle Bernie’s advice: even though I was not working from a kit, I had tested most chips with the Retro Chip Tester. It seems that half-populating the board and powering it up is also not entirely risk-free.I plugged the power, and I saw something on the Hitachi monitor! But I didn’t see the clean, blinking pattern you are supposed to see. There were characters, but they were flickering in a funny way. Unfortunately, I don’t have pictures or videos of this state of affairs, as I was too busy and excited.Indeed, you are supposed to see an alternated series of “@” and “_”, with the “@”s blinking at the cursor blinking rate. This, at least, is the most common state of the video section after a power-up, but it can also be a little different as it is not the result of a proper reset logic.I used my vintage HP oscilloscope to measure some signals: Component/Pin Measurement Observations 74123 pin 13 496 ns a little long, but pretty close 555 pin 3 4.4 µs (225.255 kHz) definitely wrong! Φ3/Φ4 ~500 kHz good 6502 pin 3 ~1 MHz good Here is the problematic reading on the 555: 555 pin 3 measureI read here that the “theoretic time period is 457 msec” for the output of the 555. So something was definitely wrong.I tried out to power up again. Using wires, I activated the CLS and the RESET signals on the keyboard connector, carefully in order not to cause shorts. This caused the famous (to Apple-1 fans) \\ and @ to show! Output after `CLS` and `RESET`sHowever, the @ was blinking weirdly. I then also used a wire to hit the STROBE signal connected to +5V, and I saw some _s show up. This was great news, as it meant that the CPU was reading from the keyboard connector, and writing to the video section! In other words, it indicated that CPU, PIA, keyboard connector, and display section were all working to some degree at least! Apple-1 showing real some lifeSo there was just something wrong with the cursor logic. I tried the obvious first: swapping some related ICs to see if anything changed. Nothing did. I then swapped the 555, and nothing changed. With the 555 removed, I measured in-circuit (which was fine since the 555 was removed) the resistors and electrolytic capacitor around it, and found that the 22 μF capacitor was bad! I removed it, measured it again to confirm that is was bad (and it was), put a new one in, and the blinking worked! Apple-1 blinking patternSince things appeared to be working, I decided to put in some older or cooler chips, like this 1968 blue and gold Sprague 7402: Blue Sprague 7402KeyboardIn order to proceed further, I needed a keyboard. Earlier in the project, I had considered building a modern Datanetics keyboard reproduction. In fact, I had already ordered components for that purpose.But in August 2024, I found an Apple II keyboard. Note that there are several iterations of the Apple II keyboard. Here is mine: Apple II keyboardI didn’t know if it worked, but I had to try it. I started by partly disassembling the keyboard to clean it. Here is the controller board. Sometimes the keyboard encoder fails, but luckily I found out later that mine was good: Apple II keyboard controller boardIt was hard to pull out the two boards apart, due to this connector being pretty tight: Apple II keyboard connectorI removed the board under the keys, for cleaning, and also to see how this keyboard was made. As you can tell, you don’t have individually-packaged switches, but a series of contacts: Apple II keyboard contactsHere is a close-up of the contacts: Apple II keyboard contacts close-upHere is the PCB behind the contacts: Apple II keyboard contacts PCBThere is a clear maks around the contacts: Apple II keyboard contacts maskI didn’t want to remove all the key tops, so I decided to just use water and detergent to wash the whole thing. Then I used compressed air to remove all the water, and let it dry. Apple II keyboard during washingFor looks, I later polished the sides of the keyboard, which are made of metal on a membrane (copper?). this looks better than before, where that has significantly corroded. Apple II keyboard polishedOne thing to know is that the connector for this keyboard and the Apple-1 are identical, but the pinout is different. This means that you need to use an adapter. This is easy to do, based on the following diagram made by Wendell Sander, another hero of the Apple-1 scene, in 2010 (which I colorized a little for readability): Apple II keyboard pinout adapterI first built the adapter on a solderless breadboard. Although I didn’t take good pictures, you can see the breadboard on the bottom left of this image. Apple II keyboard adapter on breadboardLater, I redid it using veroboard. Here is the veroboard version: Apple II keyboard adapterHere is the bottom of it: Apple II keyboard adapter bottomBoth the adapters worked! I know they are very simple, but still, it’s always nice when things work the first time.I had no difficulty making the keyboard connector: you just need to get the correct connectors, a flat ribbon cable, and to sandwich the ribbon in the connector. This requires serious force, but it worked without any issue.At some point I will design a PCB for the adapter, or use an existing one if I find one. It shouldn’t be hard to do.As soon as I knew that both the terminal and the keyboard worked, I swapped by PIA with the cool-looking CM602 from Bulgaria: CM602 PIA installedWhile I bought it untested, it seems to work flawlessly. I like it because, while I am not a gold person in general, the gold cover, line, pins go well with the gold machine sockets and the ENIG PCB.Now ideally you would want a white ceramic 6502 CPU as well, but those fetch up to USD 2,000 on eBay, so no thanks. I am happy with my 1979 6502A.First programsAs soon as I had a working keyboard, I entered the test program from the Apple-1 manual. And it worked! Here is the relevant part of the manual: The Apple-1 test programAfter that, I tried a small memory test shared by Uncle Bernie:0280: A9 00 85 00 A8 49 FF A2: E0 86 01 91 00 C8 D0 FB: E8 E0 F0 90 F4 49 FF 8D: 3F E0 8D C0 EF 8D 6A E5: 8D 95 EA CA D0 F1 88 D0: EE 49 FF 8D 3F E0 8D C0: EF 8D 6A E5 8D 95 EA A2: E0 86 01 D1 00 D0 11 C8: D0 F9 E8 E0 F0 90 F2 AA: A9 AE 20 EF FF 8A B0 B5: 51 00 20 DC FF A9 C0 20: EF FF 8A 20 DC FF 98 20: DC FF A9 A0 20 EF FF 4C: 80 02It took me a while to enter it by hand, and it didn’t work the first few times due to typos. But eventually it ran! Memory testEPROM boardIt is not fun to enter programs in hex by hand. So I had ordered PCBs for the simple EPROM board designed by Macintosh_nik.This fits at most a 4 KB EPROM (2732). I assembled it, realized the 2 ZIF sockets I had had 28 pins while the PCB fits a 24-pin socket only! I opened up one of the ZIF socket, as I realized I could remove extra pins from it, but then realized that it was not necessary as I could solder a 24-pin machined socket, then plug the ZIF socket in! Dismantled ZIF socketI made some address decoder wiring changes, so that my EPROM could be at location E000-EFFF, which is the regular location for BASIC, in particular. I have a stack of EPROMs: EPROMsI did try to read all EPROMs before erasing them, but I doubt there was anything valuable on them. Here is the cheap EPROM eraser I used: EPROM eraserI programmed some EPROMs with binaries provided in online forums, including: BASIC WORPLE! Apple 30th/Mastermind Memory test/2048/Shut the box Codebreaker MicrochessI hit a snag where things didn’t work perfectly, then realized I had incorrectly reassembled the ZIF socket. Another mistake was to put the EPROM the wrong way around. Luckily, nothing bad happened to either the EPROM or the board! Here are some EPROMs I programmed and the EPROM board: EPROMs and EPROM boardIt is fun to play the 30th anniversary demo, which shows a series of pictures including Woz, Steve, and newer Apple products, all in ASCII art. Here is Woz on screen. 30th anniversary demoVideo fixThe Apple-1 video is notoriously not great, because the NTSC signal is not up to spec. Uncle Bernie has a fix, which involves soldering a transistor and a few other components. I figured that I would design a small PCB for this. In fact, this was my first PCB design in decades! I designed it with EasyEDA and ordered boards from JLCPCB. I used: 805-size SMT capacitors and resistors SOT-23 BC858CL transistorHere is the tiny resulting PCB: Video fix PCBHere is the PCB populated and attached with double-sided tape to the back of the main board, and how it makes for a neat solution: Video fix PCB populatedYou can see how tiny the PCB is compared to the main board: Video fix PCB on main boardI was happy to see that indeed, the fix worked, in that it centered the image much better on the monitor: Video fix workingUnfortunately, there was a problem: in some cases, especially when scrolling a lot of text on screen, the image wobbles. This is quite visible on the left side. This was also visible with the LCD monitor, although you can’t tell based on a picture: Trying the LCD monitorI tried to change the values of the components, in particular the capacitor. Using 33 pF was not worse, but using 220 pF was definitely worse! Either way the wobble remained. I tried a 75 KΩ resistor instead of 100 KΩ, but there was no visible difference. At this point, I gave up fixing this, at least temporarily. I still don’t know if this is due to the design of the fix, the transistor I chose, my PCB layout, wires, or something else. I left the fix in, as it is ok, but not perfect. It is easy to disconnect it.2519 replacement variantI used the 2519 replacement board designed by Szillat and P-LAB. This worked great, but I had the issue that the small-package 14557 shift registers are not available from major electronics components stores (or only in very large quantities). I had to buy those on eBay, and they are not reliably available there either. However, the SOIC-16 Wide chips are easily available (mouser, DigiKey). So I recently I redesigned the board to handle the larger chips. I managed to do this without making the board larger, partly by putting all the decoupling capacitors on the opposite side. I made it black to keep with my “black replacement board” theme. 2519 replacement boardView from the top: 2519 replacement boardHere is a close-up of the chips on the new board: 2519 replacement board close-upCompare with the original version: 2519 replacement boardsThe project is available on GitHub.Here is the outline of the board: 2519 replacement board top 2519 replacement board bottomI was kindly pointed out by P-LAB that there were some small issues with my PCB, including missing vias and traces that are too narrow. I fixed those in EasyEDA, but haven’t yet ordered new PCBs. This said, the current one works!PROMsI had omitted buying PROMs for WOZMON, as I couldn’t find blanks and I was not sure I could program them myself easily anyway. So I had used that EPROM daughter board, which works really well.But incredibly, I got offered a set of free PROMs from an Apple-1 community member, shipped all the way from Germany! I am very grateful for this kind gesture. Here they are: PROMsConclusion of part 5This part covered some of the most exciting aspects of the project, and it ended with a well-working Apple-1 reproduction!As usual, you will find more pictures in this photo album: Apple-1 reproduction: Work in progressPart 6 covers programming the Apple-1 in C." }, { "title": "Building an Apple-1 Reproduction in 2024 - Part 4: Assembly", "url": "/posts/apple-1-reproduction-part-4-assembly/", "categories": "Technology", "tags": "", "date": "2024-11-19 19:00:00 -0800", "snippet": "This is part 4 of a series of posts about building an Apple-1 reproduction in 2024. See also: Building an Apple-1 Reproduction in 2024 - Part 1: Components Building an Apple-1 Reproduction in 202...", "content": "This is part 4 of a series of posts about building an Apple-1 reproduction in 2024. See also: Building an Apple-1 Reproduction in 2024 - Part 1: Components Building an Apple-1 Reproduction in 2024 - Part 2: Power Supply Building an Apple-1 Reproduction in 2024 - Part 3: The Retro Chip Tester Building an Apple-1 Reproduction in 2024 - Part 5: Monitor, Keyboard, Power-Up Building an Apple-1 Reproduction in 2024/2025 - Part 6: C Programming Building an Apple-1 Reproduction in 2024/2025 - Part 7: The Audio Cassette Adapter Fully-populated Apple-1 boardAssemblyAssembling the board is the meat of the project. To get prepared, I read some material: I obtained, in particular, “UNCLE BERNIE’S TIPS AND TRICKS FOR APPLE-1 BUILDERS Version: V3.01 - Turned loose on the world on 12th March 2023”, which he kindly sent me. This is an invaluable resource. Uncle Bernie's tips and tricksI had also watched some videos on YouTube over time: there are a few covering the building of Apple-1 reproductions from kits, including: The 8-Bit Guy: How the Apple 1 computer works Retro Hack Shack Apple 1 History And Build Guide Building An Apple 1 Clone From Scratch I started by quickly inspecting the PCB. It was supposed to be electrically tested by the PCB manufacturer, but I still wanted to make sure that there were no obvious issues, and I didn’t see any.The first components I soldered were the resistors. I had measured all of them to see how close their values were to the nominal value, and all the Allen Bradley resistors I measured were a little high, but not by too much, usually within 10-15%.I wanted them to look good on the board, so I did the following: carefully bent the leads cleaned the old leads with contact cleaner used flux to help the solder flow used a spacer between the resistor and the board (following a tip I saw in a video) soldered the top first, then the bottom used a wet sponge when soldering the bottom, to avoid overheating the resistor re-measured the resistors after soldering; they tended to measure even higher, as had been indicated by others cleaned the flux residue with isopropyl alcohol (IPA) Use of a spacer Soldered resistors on topOne recommendation is to make sure that the resistors in the C/D section are not more than 10% off. Also, for the 27 KΩ resistor, the advice is to use 22 KΩ instead. I used a modern resistor, but I plan to replace it with a vintage one.My 7.5 KΩ resistors were measuring around 8 to 8.2 KΩ, which is fine. I decided to replace them with 7.5 KΩ resistors. I also replaced the 27 KΩ resistor with a 22 KΩ one.Then I soldered the diodes. For the small signal diodes, there was no problem. But the big rectifier sinterglass diodes in particular caused me some trouble. First, my board is ENIG, so has a golden look. Solder is, of course, silver color. And here, the holes for the diodes are large, and the pads are huge. Soldering them made ugly blobs. I decided to tin all the large pads around the diodes. I reflowed a lot of solder, and I was worried about the heat for the diodes as well as the PCB. But it eventually worked ok and nothing was damaged that I could tell. I tested the diodes after soldering. Tinned pads and soldered diodesHere is the board with most of the resistors and diodes soldered: Most resistors and diodes solderedIn-socket reliability modsThen it was time to solder the IC sockets. All the IC socketsIt is well-known that the Apple-1 had some design flaws, not in principle, but in some aspects of the layout of the PCB like power distribution, including lack of enough decoupling capacitors, the termination of some lines. The good news is that there are some easy fixes that objectively improve the reliability of the board. Uncle Bernie has pushed this to the next level, and I am following his advice to include his “reliability mods”: specifically, extra decoupling capacitors and termination resistors are added.There are two main options to do this: solder those extra components at the bottom of the board hide them inside the IC socketsI wasn’t sure I would do the latter, but I experimented with one socket and convinced myself that it was the way to go. It’s more work, but it’s so much cleaner. I used small pliers, flux, and patience. I observed the result under a magnifying glass to make sure that all connections were good.For these, I used small, modern axial capacitors. Positioning a decoupling capacitorSeveral chips required the classic diagonal decoupling capacitor. Installed decoupling capacitorHere is the decoupling capacitor for the 6502: Installed decoupling capacitor for the 6502Some were more custom: Custom setupsFrom the top: Custom setupsHere is the board with all IC sockets soldered: All IC sockets solderedFixing a problemI thought that I wouldn’t be able to install the 6 termination resistors inside IC sockets, so I soldered the relevant sockets. But then, I was told that you could put 3 resistors in two separate sockets. What should I do, then? Solder them under the board? Install the resistors in a riser card? But then, what if the card is removed?So I considered desoldering the already-installed sockets. I don’t have a proper, professional desoldering iron, but I found a tip on YouTube which consists in using a thick piece of copper wire to transmit the heat. I decided to try that. I was ok destroying the IC sockets in the process, but I didn’t want to damage the PCB. So I tried first on a random board I had, and it worked. Then I tried on my spare Apple-1 PCB as well. The only drawback is that the copper pads on top of the board got some solder in the process and have become gray. There is probably no way to get them golden again. But I was ok with that, as the pads are mostly hidden by the IC sockets. If you look you can see it, but it’s not too bad. So I decided to proceed. The copper wire trickI used a lot of flux in the process. Desoldering the IC socketsYou can see the grayed pads here. The top of the board after desolderingHere is one of the sockets with the resistors installed. IC socket with resistorsThe final result. The two sockets with termination resistorsDecoupling capacitorsFor these, I had bought old ceramic disc capacitors. These are weird beasts. They came in various sizes. I measured all of them, and unfortunately several were as much as 20% under spec. For decoupling capacitors, it’s ok to be higher, but not lower, especially given the above-mentioned issues with the Apple-1 not having enough decoupling capacitors. So I decided to use the ones that were close to spec. Some of the larger, out of spec capacitorsI decided to make things look as good as possible, by using capacitors of similar size in each section. I managed to insert some capacitors with the leads going in diagonally, but for most capacitors I had to bend the leads to make them fit. Here are the capacitors in the memory section. Decoupling capacitors in the memory sectionYou have to be careful with these old ceramic capacitors: when bending a lead, I broke some of the outside packaging of one of them. Also, it is very easy to just bend them back and forth once installed, just as a matter of course when handling the board or soldering further components, as the leads are very thin. This might, eventually, cause some leads to break.Other componentsI also installed the remaining small capacitors. I carefully bent the leads, and also used a spacer. Electrolytic capacitorI then installed the smaller regulators. The pins needed to be bent with pliers to fit the holes. Bending the pins of the regulatorsI also installed the transistor and the video connector. Note the orientation of the connector: the vertical plastic part should go toward the outside of the board. The same applies for the similar 6-pin Molex connector for the power supply (I had initially wired my power cable exactly the wrong way and had to fix it).Here is a section with resistors, IC sockets, capacitors, and the quartz installed. Section with resistors, IC sockets, capacitors, and the quartzAnother viewpoint with the small regulators. RegulatorsThe edge connector was also installed. Note that its black markings go away with isopropyl alcohol! It’s not a problem. Also, the side with numbers and the one with letters are marked on the connector, so you might want those to match, even though the connector is, as far as I can tell, symmetrical. Edge connectorCleaning the boardOnce all of this is done, you can clean the board of flux thoroughly. I had already done some spot cleaning. The reason to do this now is that most components are still low-profile, and cannot be damaged with isopropyl alcohol. I used a flat tray lined with aluminium foil, filled it with isopropyl alcohol, and let the board soak for a few minutes. I then used a toothbrush to clean the board. I used compressed air to dry it. I also have KimWipes to clean the board, which come in handy in many cases. Cleaning the boardLast componentsFinally, you can install the last components. For the large Sprague capacitors, Uncle Bernie, again, has some nice tips. I used double-sided 3M tape to affix the capacitors to the board. This provides some mechanical stability, and also makes it easier to solder the capacitors. Double-sided tapeHere is one of the capacitors positioned. Taped capacitorHere are some nice solder joints under the board, covering the pads entirely. Solder jointsHere are two of the Sprague capacitors installed. SpragueI also soldered the remaining reliability decoupling capacitors that cannot be installed inside sockets due to the fact that said sockets do not provide access to the correct voltages. More decoupling capacitorsI soldered the trim potentiometer for the video output, and I checked its pinout using a multimeter. Trim potFor the large LM323 regulator, which is fitted with a large heat sink, I used thermal paste. Heat sink with thermal paste LM323 with thermal pasteI used temporary screws to hold the regulator and heat sink in place while soldering it. I later replaced the screws with proper ones. LM323 about to be solderedHere is the LM323 installed in the power section of the board. LM323 installedThere are a few solder bridge jumpers to install. I protected the golden tracks around for safety. You have to install the ones marked 6502, and the “No DMA” one. Protecting the area around the jumpersI checked the bottom of the board with a magnifying glass for any type of issue: cold joints, solder bridges. And I did find one solder bridge, which I fixed!I installed some plastic spacers. I might put something more sturdy in the future. Plastic spacersFirst power-upWith all the components except the ICs in place, it was time to perform a first power-up!I discussed the power supply in a previous post. It was ready to go. I plugged it, turned it on, and hoped no smoke would come out from the power regulators and capacitors. I measured voltages on all IC sockets chips and the keyboard connector: they were all good!This step might sound a little paranoid, but the last thing you want is to fry ICs that are hard to find and expensive. Also, it is a confidence booster.Testing the 2519 replacementI discussed testing a large number of the chips in a previous post. But the Retro Chip Tester Pro cannot test the Signetics 2519, or its replacement board. But I wanted to check that it worked before risking putting it on the Apple-1 board. So I made, again, a custom tester for it, using a Raspberry Pi Pico. I wrote some simple software, in C, to test that I could write 40 6-bit words into the shift register, and read them back in “recirculate” mode. Here is my tester. I needed to use a stack of IC sockets to raise it, and I connected also GND to pin 7 of the 7400 socket. Testing the 2519 replacement boardIt didn’t work at first. Of course, I made numerous mistakes in my test program. Finally, I got some results, but they indicated failure of some bits. I took out the board and examined it better under a magnifying glass, and noticed some poor solder joints. I fixed them, and then my tests passed!NOTE: The 2519 board could be put underneath the board, with appropriate sockets. For now, I am 99% ok with it on top.UPDATE: I have pushed the source code for the tester to GitHub.Integrated circuitsI finally installed all the ICs. I had initially ordered the 74xx series ICs from Unicorn Electronics. Note that those are the plain 74xx series, not the “newer” 74LSxx series. In any case, because I later separately acquired a lot of 74xx series chips (see Part 3: The Retro Chip Tester), I went through them and picked some older and nicer ones when I could. Considering 74154 alternativesI installed all the chips. This went well, except I bent some pins on a DRAM chip. I had a spare, so I used that one (and the one with bent pins will now be a spare).Thd Apple-1 has an interesting feature: a memory map section on the board, which is configured with jumper wires. The output of the address decoder outputs a signal for each 4KB block of the 64 KB of memory, and you can map memory and devices to these blocks. Here is the memory map. The following table shows the typical memory mapping for the Apple-1: Label Memory/Device Address Notes On connector Y Woz Monitor PROM 0xF000 Typically unchanged No Z 6820 keyboard interface addressing 0xD000 Typically unchanged No R Cassette interface PROM and hardware mapping 0xC000 Typically unchanged if used Yes S Auxiliary - Typically custom Yes T Auxiliary - Typically custom Yes W Second onboard 4K bank of dynamic RAM 0xE000 Sometimes changed No X First onboard 4K bank of dynamic RAM 0x0000 Typically unchanged No This is how things are configured typically on the board: Memory map diagramI soldered the memory map jumpers following this standard setup. Memory map jumpersConclusion of part 4This major step required research, care, and patience. A couple of small challenges had to be overcome, but the board is now fully populated and includes the “reliability mods”.As usual, you will find more pictures in this photo album: Apple-1 reproduction: Work in progressPart 5 covers the monitor, keyboard, power-up, and troubleshooting." }, { "title": "Building an Apple-1 Reproduction in 2024 - Part 3: The Retro Chip Tester", "url": "/posts/apple-1-reproduction-part-3-retro-chip-tester/", "categories": "Technology", "tags": "", "date": "2024-10-29 18:00:00 -0700", "snippet": "This is part 3 of a series of posts about building an Apple-1 reproduction in 2024. See also: Building an Apple-1 Reproduction in 2024 - Part 1: Components Building an Apple-1 Reproduction in 202...", "content": "This is part 3 of a series of posts about building an Apple-1 reproduction in 2024. See also: Building an Apple-1 Reproduction in 2024 - Part 1: Components Building an Apple-1 Reproduction in 2024 - Part 2: Power Supply Building an Apple-1 Reproduction in 2024 - Part 4: Assembly Building an Apple-1 Reproduction in 2024 - Part 5: Monitor, Keyboard, Power-Up Building an Apple-1 Reproduction in 2024/2025 - Part 6: C Programming Building an Apple-1 Reproduction in 2024/2025 - Part 7: The Audio Cassette Adapter Assembled and working Retro Chip Tester ProIntroductionRight from the beginning of this project, one of my fears was that I would spend time and money, assemble things the best I could, and then turn on the power and face a non-working computer. One reason for this is that not all the components I bought were sold as tested. Remember, I didn’t buy a kit, but instead bought components from various sources. The DRAM, 2504s, and 2513 were sold to me by Arunas in Lithuania as tested, but while the expectation was that the chips I bought from other places were in working condition, they were not specifically tested by sellers, including the components bought from Unicorn Electronics, Anchor Electronics, or other eBay sources.Finding which out of the 61 integrated circuits of the Apple-1 might not be working could lead to some very painful troubleshooting sessions. So I considered what I could do to reduce that risk.Testing componentsFor my TVI-912 repair, I wrote my own basic memory tester with an RP2040, and it worked! But here we are talking about testing many chips of different types. Unless I wanted to embark into the completely different project of making my own general-purpose tester, I needed to use something off the shelf. I decided to build a Retro Chip Tester after reading about it and watching videos reviews.The Retro Chip Tester Pro (or RTC) is a project by Stephan Slabihoud in Germany. Stephan runs a website dedicated to retro computing. You typically buy the PCB, optionally with the microcontroller already programmed and soldered, but you have to buy the rest of the components yourself, although I think that some third-parties sell fully-assembled RTCs.While this is not an open source project, there is above-average documentation for building and using the device, and there is an official support forum on Reddit.The RTC can test a wide range of older chips, including the 74xx series, 4000 series, SRAM, DRAM, and more. Here is the list of Apple-1 chips and whether they can be tested with the Retro Chip Tester Pro: Chip Quantity RTC Comment 7400 3 Yes   7402 1 Yes   7404 1 Yes   7408 1 Yes   7410 2 Yes   7427 1 Yes   7432 1 Yes   7450 1 Yes   74123 1 Yes   74154 1 Yes   74157A 2 Yes   74160 1 Yes   74161 5 Yes   74166 1 Yes   74174A 1 Yes   74175A 1 Yes   74S257 4 Yes   8T97 2 Yes   6502A 1 No CPU 6520A 1 No PIA 2504 7 No shift-registers 2513 1 Adapter with -5V/-12V, use 2704 settings with adapter 2519 1 No shift-register DS0025CN 1 No clock chip MK4027N-4 16 Yes use 2104 DRAM setting 27C64 1 Yes EPROM replacement 74LS02 1 Yes ACI 74LS10 1 Yes ACI 74LS74 1 Yes ACI As you can see, there is quite good coverage.Ordering the partsI got in touch with Stephan about ordering. I paid EUR 108 (about USD 118) total for the main PCB and the DC-DC module (EUR 68), the soldered and programmed microcontroller (EUR 12), and shipping (EUR 28). Transit of the package to the US took weeks, but I was not in a hurry. The items arrived safely. They came in a nice box. RTC boxThe PCBs are nicely packed inside: RTC box insideHere is why I bought the soldered and programmed microcontroller: I am not confident that I could solder something that small. The microcontrollerIn the meanwhile, I looked at procuring the rest of the components for the board. There are PDF files detailing the BOM, options for some of the parts, what to watch for, etc. I started with a pre-configured DigiKey cart, and double-checked it and added to it.In addition to items that you can get from online electronics stores like DigiKey, there are a few components you need to get separately: nylon standoff screws LCD displayI got these from AliExpress. You have a choice for the LCD, as it is a standard two-line display, and you could even get an OLED version, but for a large premium. I went with a yellow LCD, which, I thought, looked cool. Standoffs and LCDI had ordered the extra power module board, which I might not really need immediately. It provides regulated 5 V, -5 V, and 12 V (but no -12 V).Here is my total cost for the RTC: Item Cost (USD) Details PCBs, MCU, and flashing $118.00 Directly from Stephan Other components (including DC-DC board) $122.56 DigiKey LCD and spacers $26.61 AliExpress Extra diodes $6.55 Amazon Total $273.72   Building the RTCOne thing that Stephan recommends is to test the Zener diodes. I made a simple test setup using my regulated power supply (not shown here, and neither is the multimeter). Zener diode test setupUnfortunately, the values were all a little off compared to what the instructions recommend. I asked Stephan about it and he said it should be fine, but still pointed to a set of Zeners that work for him. I ordered those from Amazon, and they were spot on. So I used the new Zeners.I followed the build instructions and I soldered the low-profile components first, including the Zeners and resistors. First low-profile components solderedYou then solder the IC socket, transistors, relays, and the rest of the components. Soldering by height is just a matter of convenience: it just makes it easier to solder. More components solderedI then soldered the power module, put the LCD headers in place, the spacers, and I was done!I built a somewhat maximalist build, with the power module, and all the ways to power the board: barrel connector, USB-B, micro-USB, and screw terminals.Using the RTCI plugged the RTC for the first time, plugged a chip in, and it worked right away! Here I am testing a 7400 chip. Assembled and working Retro Chip Tester ProThe UI is pretty easy to use. You have to use the switches to navigate the menu. The only issue is navigating in large series of chips, like the 74xx series. You can hold the button and it will start jumping by 10s, which helps. It’s not a big problem, and you get used to it.I like that there is a buzzer indicating success or failure. It’s a nice touch. You can also very easily test the next chip in a batch: remove the chip, put the next one, and press the button.I was able to test the chips, listed above, that I had bought for the Apple-1, and they all passed, including the Mostek MK4027N-4 DRAMs. Testing a DRAM chipSince my original orders of components for the Apple-1, I stumbled onto two fairly large sets of 74xx series chips. Set of 74xx series chips Another set of 74xx series chipsSo of course I started testing those chips. As of October 2024, I am not entirely done, but only a small subset so far showed as failing. I only encountered an issue so far with two types of chips: 7441 (9 instances) 7473 (57 instances)The tester reports that they all fail, which seems unlikely. I wonder if it is the chips, the tester, or the algorithm used to test them.UPDATE: Stephan indicates that these chips must be positioned specially in the ZIF socket. In fact, the display shows that (“Pos 4” or “Pos 5”). So it was a user error, not having RTFM. By positioning the chips correctly, most of these chips now test fine!ConclusionAlthough it wasn’t exactly cheap, I am glad I built the RTC. It gave me more confidence about completing the assembly of the Apple-1 reproduction, and hopefully will also be useful for other projects.Part 4 covers the assembly of the Apple-1." }, { "title": "Building an Apple-1 Reproduction in 2024 - Part 2: Power Supply", "url": "/posts/apple-1-reproduction-part-2-power-supply/", "categories": "Technology", "tags": "", "date": "2024-10-16 19:00:00 -0700", "snippet": "This is part 2 of a series of posts about building an Apple-1 reproduction in 2024. See also: Building an Apple-1 Reproduction in 2024 - Part 1: Components Building an Apple-1 Reproduction in 202...", "content": "This is part 2 of a series of posts about building an Apple-1 reproduction in 2024. See also: Building an Apple-1 Reproduction in 2024 - Part 1: Components Building an Apple-1 Reproduction in 2024 - Part 3: The Retro Chip Tester Building an Apple-1 Reproduction in 2024 - Part 4: Assembly Building an Apple-1 Reproduction in 2024 - Part 5: Monitor, Keyboard, Power-Up Building an Apple-1 Reproduction in 2024/2025 - Part 6: C Programming Building an Apple-1 Reproduction in 2024/2025 - Part 7: The Audio Cassette Adapter The completed Apple-1 power supplyIntroductionEvery computer needs a power supply. On the Apple-1, it is split into two parts: Separate from the main board: two transformers, fuse, switch, wiring to the mains and to the main board. On the main board: rectifier diodes, capacitors, and regulators.You can see these two parts represented in the following schematics: Apple-1 power supply schematicsCredit: Apple-1 schematics redrawn by Armin Hierstetter, colorized by myself.The main board features a 6-pin Molex connector, identified by J1, to which the output of the transformers is connected.On many original Apple-1s, you can see the two transformers in the open, simply mounted on a separate wooden base. There are even some iconic photos of Steve Wozniak and Steve Jobs with the Apple-1, where you can see the transformers on such a base. Woz and Steve Jobs with the Apple-1Modern approachesIn 2024, you could instead use a modern power supply. People have adapted, in particular, MEAN WELL power supplies. This is good because: it is more power-efficient; it can be safer as the power supply is fully enclosed; it is smaller and lighter.I have seen online two beautiful examples of such power supplies, including one by Armin in Germany, and one by Arunas in Lithuania. I don’t rule out that I will try something like this in the future.Choice of enclosureI have to recognize that the transformers on a wooden board have some appeal! But for now, I wanted to go with the original transformers. However, for practical and safety reasons, I decided that I wanted to enclose the transformers and associated hardware.I came across those inexpensive but fairly pretty blue metal (with white plastic parts) cases. The case has front and back panels, a removable top panel, vents on the left and right side, and rubber feet. This one was $12.44 shipped from AliExpress. Note that while it comes with the screws to attach the top panel, it doesn’t come with screws to attach the front and back panel and you have to provide those yourself. The blue case from marketing materialMy plan was to mount my transformers inside, but also to use the opportunity to include some enhancements sometimes recommended by the Apple-1 community: secondary fuses secondary LED indicatorsThe secondary fuses are not present in the Apple-1 schematics, but they are an obvious protection in case of serious problem. They are in particular recommended by Uncle Bernie on the AppleFritter forums.The LED indicators are not present in the schematics either, but I think they are pretty cool, and they indicate that the power supply is on and working and that the fuses have not blown up.TransformersAs mentioned in Part 1, I obtained two Triad Magnetics transformers from Mouser. The large transformer is a Triad F-31X which outputs 10 V up to 3.0 A. The small transformer is a Triad F-40X which outputs 26.8 V up to 1.0 A, with a center tap.These are brand new, made in Philadelphia (the stickers say “Made in PHL”). Transformers and other items from MouserThe original Apple-1 manual actually recommends Stancor or Triad transformers, so this is as good as it gets. Transformer requirements from the Apple-1 manualDesign and prototypingI started with a very crud wiring diagram, which I barely dare show here. Wiring diagramThen I prototyped the panels in cardboard, to make sure each component would have enough clearance. Here is a view of the back with the power entry, fuse holders, and power output connector. Cardboard prototypeI planned to use DIN connectors for the output: 5-pin female DIN on the chassis 5-pin male DIN on the cableThe pinout would be entirely custom. Even though the Apple-1 schematics show a 6-pin connector, 5 pins are enough for the two transformers secondaries, plus one wire for the center tap, which becomes the “ground” on the Apple-1 board.I made sure the transformers and other parts would fit without problems. I placed the transformers sideways to optimize the space. Fitting the transformersFront panelI wanted to have LED indicators for the transformer secondaries. For this, you need an LED, resistor, and signal diode as the output of the transformers are AC and an LED is polarized. With this, the LEDs will blink at 60 Hz (but you will not see it unless you try to take a picture or video). I prototyped this on a breadboard first as I wanted to be sure I used adequate resistor values. Here is what I used: 3 × 1N4148 diodes 10 V secondary: 1 × 390 Ohm resistor 13 V secondaries: 2 × 560 Ohm resistorsUPDATE: I was asked about the reason of the presence of another diode in addition to the LED. After all, an LED is also a diode (it’s in the name: Light Emitting Diode), so even with AC, things should work. To be fair, I had seen that design with an additional diode before, and it seemed to make sense and didn’t think twice about the diode. Here is the explanation:The LED is connected to AC so there is a reverse voltage half of the time up to about 10 V or 13 V. The datasheet for standard LEDs mention a max reverse voltage supported of 5 V, so without doing anything more we would be exceeding that spec. Using a signal diode, we protect the LED against such excessive reverse voltage. A 1N4148 for example support around 100 V reverse voltage, so it will block in the reverse direction without any problem. I imagine that in practice, an LED might support a higher reverse voltage than 5 V, and things might still work without an extra diode, but based on the datasheet values, extra protection for the LED is warranted. LED indicator prototypeAfter drilling holes for the LEDs, I mounted them on the front panel with holders. I soldered the resistors and diodes directly on the LED pins. LED indicatorsI used heat shrink tubing to protect the connections. Heat shrink tubingHere I am testing that the LEDs work. Testing the LEDsHere is the result from the front after screwing the front panel. Front panelBack panelFor space reasons I had to use the small and common 20 mm × 5 mm fuses, as well as the matching holders, instead of the larger 3AG fuses that one might have used if just mounting the transformers on a wooden board. The use of these holders allows you to easily change the fuses from the outside of the case. The space inside the box is very limited anyway, and this seems to be a better design. Of course, one hopes that you will never have to actually change a blown fuse as that would indicate a serious problem happened! I followed advice on Apple-1 forums to use: 1 × 0.5 A fuse for the primary, which fits in the power entry assembly 3 × fuses for the secondaries 2 × 1 A slow blow for the small transformer that will feed the -12 V/-5 V and +12 V supplies on the board 1 × 3 A slow blow for the large transformer that will feed the main +5 V supply on the board I drilled/cut/filed the metal for the back panel. This was a pain as I don’t have a drill press or a good metal saw. So I used a hand drill, Dremel, and a file. But it worked out. Back panel with componentsI then worked on the female DIN connector, but I had trouble with the specific one I had bought. It was too cheaply made and I didn’t trust the connections. Still, I tried soldering wires to it. DIN connectorHowever, I decided to abandon this specific connector and to have the cable go out of the case without a connector, just through a grommet, as a temporary solution.I assembled the Molex connector easily. The metal parts (“SPOX Crimp Terminal, 18-24 AWG, Brass, Reel”) need to be cut from a roll. Molex connector partsHere are the cut parts. Molex connector parts cutWhile I crimped them with small pliers, I also soldered the wires (I realize that there is possible debate about that). Molex connector crimped and solderedHere is the female connector (“3.96mm Pitch SPOX Crimp Housing, Female, with Friction Ramp, 6 Circuits, Natural”) with its six wires installed.NOTE: I later removed wire #5, see further below. Molex connector with wiresI then used a sleeve and heat shrink tubing over the end: Finished connectorHere is the result after screwing the back panel in place. You can see that the output cable just goes through the hole meant for the DIN connector. Back panelHere is the inside view from the top after both panels were installed. Inside topReworking the cableI could have stopped there, but I was not satisfied with my initial cable and connectors. I decided to order a new female DIN connector from DigiKey (which costs a large multiple of the ones bought from AliExpress). And it does feel sturdier, with the pins also better laid out for soldering.I started by updating my original cable. I removed the sleeve and the heat shrink tubing, and then I followed Uncle Bernie’s advice, and decided that I would keep only five out of the six wires. You can see the updated Molex side here. Molex connector updatedIndeed, wires 5 and 6 are both “ground” and connected together on the PCB, so only one of those is needed on the cable. It seems that removing wire 5 (instead of wire 6) has the benefit that if you also remove pin 5 of the connector on the Apple-1 board, reversing the connector by mistake should not cause a short or blow up anything. However, I still have pin 5 on my board, so I better not reverse the connector in any case.1I forgot to take pictures of the process, but I carefully placed heat shrink tubing on the wires, then the sleeve, and the plastic end of the DIN connector. You have to put the various parts in the right order or things won’t work out! I then soldered my 5 wires to the male DIN connector pins, in the same order that they are on the Apple-1 Molex connector. Soldering was the most difficult part, as my wires are 18 AWG (while 20 AWG would have worked as well), and the pins inside the connector are smaller. I did ok though, and I wrapped each solder joint with heat shrink tubing. I was then able to close everything, adjust the sleeve, and use the black shrink tubing to cover the other end, near the Molex connector, as I had done before.Then I soldered wires to the female connector. This was much easier and more secure than with my previous cheap connector. You can see how the metal pins nicely open outward, making it easy to solder larger wires to them. Soldering wiresAgain, I added heat shrink tubing to protect all connections. I also soldered a wire to the chassis of the DIN connector to connect to the case’s ground. Heat shrink tubingNOTE: The Apple-1 “ground” does NOT connect to the metal case or to the mains’s ground wire. It is advised not to ground the Apple-1 this way, so it remains “floating” relative to the ground.I reconnected the wires inside the case, and screwed the connector to the case. The female DIN connector installedHere is the entire back panel, without cables connected. The back panel with the DIN connectorYou can see here how the output cable connects to the power supply. It’s much neater than the previous version. The cable connected to the power supplyTime will tell if this DIN connector idea is robust enough. I think that using a PCIe 6-pin connector would be more robust, but I don’t think there are panel-mounted connectors, so this solution would require cutting a rectangular opening in the back panel and a supporting PCB that is secured to the back or bottom panel. In the end, this would be significantly more work. The pinout would still be non-standard, as this PCIe connector is normally meant to have 3 ground pins and 3 +12 V pins. PCIe 6-pin connectorCredit: D-Kuru/WikipediaSmall tasksThe specific power entry module I chose is meant to clip on a case panel. However, my panels are thin, and there was some clearance between the clips and the panel, making the module wobble. I considered using a spacer, but couldn’t find something of the right thickness. So I decided to use JB Weld epoxy instead: this sets really hard, with the drawback that ever removing the module will be difficult. Power entry module being epoxiedI also added some labels made with a label maker. This is not fancy, but it’s better than nothing. I might improve on this later. The power supply's front panels with labelsRemaining workHere are a few tasks that I’d like to complete: Bleeder resistor: I have not installed a bleeder resistor in the power supply or on the cable. The idea is to help discharge the capacitors on the Apple 1 board when the power supply is turned off. Grounding: It is generally a good idea to ground any metal part exposed to the user, in case a hot wire inside the case gets loose and contacts the metal. I have already grounded the bottom and top panel, but I still need to properly ground the front and back panels. Logo or badge: I’d like to eventually put a copy of the vintage Apple logo2 on the front panel, maybe etched or engraved. Alternatively, I could use a simpler “Apple-1” badge and reserve the fancy logo for the main board. The original Apple Computer Co. logo Conclusion of part 2I now have a pretty good-looking Apple-1 power supply. The result is definitely not period-correct, but it is hopefully “hacker-correct”. The Apple-1 was a hobbyist’s machine, so not only does it not matter if what you do is not exactly what would have been done in the 1970s, but it is, on the contrary, a good thing, provided you do it with care.For more pictures, see: Apple-1 reproduction: Power Supply (PSU) Apple-1 reproduction: Work in progressPart 3 covers building the Retro Chip Tester Pro. One certain problem is that the secondary of the 10 V transformer will short and (hopefully) cause the corresponding fuse to blow. &#8617; Here is some background on this logo, created by Ronald Wayne, here. &#8617; " }, { "title": "Beware of Vail Resorts' Epic Coverage", "url": "/posts/vail-resorts-epic-coverage-declined/", "categories": "Other", "tags": "", "date": "2024-10-02 16:00:00 -0700", "snippet": " Vail Resorts is a ski resorts company which owns a large number of resorts, including Kirkwood in California. We have been skiing at Kirkwood for many years, and have always enjoyed the resort....", "content": " Vail Resorts is a ski resorts company which owns a large number of resorts, including Kirkwood in California. We have been skiing at Kirkwood for many years, and have always enjoyed the resort.In March 2024, my wife injured her knee while skiing there. She visited her doctor, and the knee seemed to recover enough that, a couple of months later, we bought 4 season passes for the 2024-2025 season for the family.The Epic website touts their “Epic Coverage” insurance, which is supposed to cover a number of situations, including injuries. We bought the passes thinking that if anything happened, we would be covered. In August/September, my wife’s knee was still weak, however. The doctor recommended an MRI, and agreed with us that she wouldn’t be able to ski this upcoming season.An official doctor’s note was provided, and we filed a reimbursement claim with Vail Resorts or, rather, their insurance company, Sedgwick. The claim was denied, with the reason that the injury happened more than 30 days before filing the claim. We forwarded this to Vail Resorts, with frustration, and they replied (with what I believe was already a canned email) that we could appeal the decision.So we appealed with Sedgwick, arguing that the date of the incident was not the original injury, but the medical determination that her knee was not fit for skiing. The appeal was denied, for the same reason. Note that the company deciding how to interpret the rules happens to be the company that would have to pay the claim.We forwarded again this decision to Vail Resorts, who first replied with the same canned message. Following another frustrated email from our part, they flatly replied that the decision was final. Things are “non-negotiable”: I understand your frustration and we respect your position. Unfortunately, the downgrade and/or refund policy is non-negotiable. The policy can be viewed here: www.epicpass.com/policies.aspx. This email serves as a formal and final declination of your exception request.We believe that there is misrepresentation of benefits taking place here. Yes, the fine print says 30 days to file a claim. But in the end, Epic/Vail pushes you to buy season passes early, and then denies coverage when you need it. Further, Vail keeps saying that it is Sedgwick’s decision, but of course it is Vail’s decision to work with Sedgwick and to agree with what terms are valid or not in the first place.It simply doesn’t make any sense to deny reimbursement of a pass (only one out of a family of four, mind you) when you are injured and can’t ski.The Ikon pass, for example, allows you to defer a pass to the following year all the way to December of the year you bought the pass. Even this would have been a better option for us. We might consider switching to Ikon in the future.What we find the most frustrating is the lack of consideration that Vail Resorts have for their customers: there is barely communication, and there is not even an attempt at getting the customer back on their side. Most businesses would have offered a reimbursement, a partial reimbursement, or some kind of credit or benefit. But not Vail Resorts.In conclusion, if you happen to buy season passes with Vail Resorts, beware: make sure you will be able to use the pass make sure you understand the fine print of the Epic Coverage don’t expect any kind of consideration from Vail Resorts if you need to file a claim consider other options, such as the Ikon passNeedless to say, skiing at a Vail Resorts location won’t feel the same as it once did." }, { "title": "Building an Apple-1 Reproduction in 2024 - Part 1: Components", "url": "/posts/apple-1-reproduction-part-1-components/", "categories": "Technology", "tags": "", "date": "2024-09-07 11:00:00 -0700", "snippet": "This is part 1 of a series of posts about building an Apple-1 reproduction in 2024. See also: Building an Apple-1 Reproduction in 2024 - Part 2: Power Supply Building an Apple-1 Reproduction in 2...", "content": "This is part 1 of a series of posts about building an Apple-1 reproduction in 2024. See also: Building an Apple-1 Reproduction in 2024 - Part 2: Power Supply Building an Apple-1 Reproduction in 2024 - Part 3: The Retro Chip Tester Building an Apple-1 Reproduction in 2024 - Part 4: Assembly Building an Apple-1 Reproduction in 2024 - Part 5: Monitor, Keyboard, Power-Up Building an Apple-1 Reproduction in 2024/2025 - Part 6: C Programming Building an Apple-1 Reproduction in 2024/2025 - Part 7: The Audio Cassette AdapterThe Apple-1The Apple-1 doesn’t need much of an introduction anymore: it is an iconic computer, the first made and sold by Apple (then the Apple Computer Company) for a short period of time of about a year beginning in 1976, until the extraordinarily successful Apple II was released. This first Apple-branded product, designed by Steve Wozniak and marketed (and partially assembled) by Steve Jobs, sold only about 175 units of 200 made. Although it was a very simple computer, one of its novelties was that it included electronics for the keyboard and video terminal on the same board.1 Restored Apple-1 \"Schlumberger #2\" (not mine!) “The Apple-1 wasn’t designed as a Wozniak computer: it was a Wozniak terminal for the Arpanet - modified into a computer a little, but not really designed as a computer.” -Woz, 2023, on Steve-O’s Wild Ride!The Apple-1 was sold as an assembled motherboard, and did not include a standard case or accessories, except for cases made by the Byte Shop, a local computer shop that was instrumental and getting the Apple-1 started. You might have had to provide your own case, keyboard, monitor (TV), and later storage in the form of a tape player. In short, it was a machine for enthusiasts and hobbyists. Most of the surviving Apple-1s do look like hobbyist machines.The computer was not exactly cheap at $666.66 in 1976, which is about $3,000 in 2024 dollars, but that was a bargain compared to anything else on the market. An original Apple-1 like the “Schlumberger #2” depicted above will set you back several hundred of thousand dollars if recent auctions are any indication, the records being $905,000 by the Henry Ford Museum in 2014, and $677,196 in 2022 for a broken prototype board (assume auction premiums on top in both cases).Reproductions and PCBsSince getting an original Apple-1 is out of the question for most mortals, enthusiasts have, since the 2000s, made reproductions,2 including: Steve Gabaly’s Obtronix (2005)3 Mike Willegal’s Mimeo (2009) Mike Newton’s (or Mike Ng’s) Newton-1 (2012)A huge part of the job was to recreate the PCB, and I believe that Mike Willegal was the first to do that. It appears that Mike Ng also did his own replica of the layout.Projects that reproduce the spirit of the Apple-1 were also produced, including: Vince Briel’s Replica 1 (2003) Chris Davis’s more recent Open AC-1 (out of stock as of writing)How I got startedLately, Apple-1 replica PCBs (printed circuit boards) have become more commoditized, thanks to the availability of Gerber files. On a whim, in 2023, I bought a PCB on eBay from Armin in Germany, and only after the fact did I start thinking about what it would take to actually build the computer. That wasn’t the wisest strategy, and I soon realized that there is more to this project than I initially imagined!I learned after the fact that the PCB layout is based on public Gerber files, but carefully modified by Logan Greer to match the original Apple-1 PCB closely. My Apple-1 Replica PCBIndeed, as of 2024, it is both easier and harder than before to build a reproduction: It is easier because the PCBs are available and information online, in forums in particular, is abundant. It is harder because some of the components are harder to find or significantly more expensive, and kits4 are no longer available mainly for that reason.As of September 2024, you can still buy fully-assembled replicas on eBay, but they are expensive, and for me that is not the point of the exercise anyway.I should mention that there are options for the PCB: the one I bought from Armin is a fairly affordable ENIG (Electroless Nickel Immersion Gold) PCB, and the look of it is definitely not authentic. I realized later that for about double the amount I could have bought from him a higher-quality, silver-colored PCB. Some very knowledgeable people in online forums recommend the more pricey ones, but for better or for worse, I have decided to stay with the PCB I had. Some arguments in favor of staying with it: The edge connector plating is not going to be as robust as it could be, but it is unlikely that this connector will see many cycles of insertion/removal. The ENIG process gives unmasked areas of the PCB a gold color. However, I had already decided to use machined IC sockets, which are not period-correct either, and the ones I got happened to be also gold-plated. I realize I could have gone for silver on silver as well, had I made different initial choices.So my build is doubling down on the “gold” look, which in itself is quite nice, although clearly inauthentic.The quest for authenticityOne question I asked myself briefly at the start was whether I wanted the look to be as authentic as possible or not. I know that some people search (or used to search) for period-correct chips with the appropriate date codes, for example. How much money and effort you spend towards this goal is of course a matter of preference, but to me this makes the most sense if you are fixing an original Apple-1, and less sense if you are building a reproduction. Some have even gone as far as updating date codes on chips to make them look more authentic. This seems questionable to me: not only do I not understand the point of this, but there is a high potential for confusion if not deceit here.In any case, I decided that I wouldn’t be picky and that I would only care mildly about authenticity. I am mainly interested in getting the machine to look good and to work. It is entirely acceptable for me if it is obvious that it is a reproduction. I have no intention of fooling anybody or participate in a contest. This said, I want to do a decent job, and I am selecting parts that look close to the originals when possible (like the iconic Sprague capacitors, the sinterglass diodes, some resistors and capacitors, etc.), even though that means spending a little more.The search for partsIn the absence of kits, finding all the parts is possibly the most daunting aspect of the project.I started by asking questions in the Apple Fritter forums to get help. Answers confirmed that the parts I thought difficult to source or pricey are indeed difficult to source or pricey!There are several categories of parts: Available new parts that look like the original ones: Molex connectors, some diodes, transistors blue Sprague capacitors linear transformers (of the Triad brand, one of Apple’s recommended brands with Stancor) Easy to find modern parts that don’t look like the original parts but work: resistors, capacitors, diodes IC sockets Vintage parts with some remaining sources online (eBay) or offline (electronics stores): 6502 CPU 6820 PIA 7400-series chips, disc capacitors (Unicorn Electronics, Anchor Electronics) Vintage parts which may or may not be available from very few sources, if not a single source online (typically eBay): memory chips shift registers (including the infamous Signetics 2519) clock chips PROMs Parts that look period-correct but can be sourced on eBay with some patience and budget: Allen Bradley resistors A14F diodes I have yet to add up the exact total cost, but I paid between $800 and $1,000 for the PCB and components, keeping in mind that I will end up with spare parts (extra resistors, capacitors, diodes, etc.).Specific componentsThe Signetics 2519 replacementThe Signetics 2519 is part of the terminal section of the Apple-1. Specifically, it buffers all the characters in the current line to be displayed. This is known as “row” or “line” memory. In fact, the data sheet for the 2519 lists this as the main application for the chip. Signetics 2519 data sheet applicationBy modern standards, this is an extraordinarily simple chip. However, it has only a single source right now (and I think that this has been the case for a very long time). With shipping, that single chip would cost me $80. I decided that this was “too much”. Luckily, smart people (Natas and Claudio AKA P-LAB) designed a replacement daughter board for the 2519. This won’t be original, but it will work, and it doesn’t stop me, should I ever get an original chip, to replace the daughter board with it: Natas’s (through-hole) Natas’s (SMD) P-LAB’s (SMD, improved)I ordered 5 SMD and 5 through-hole PCBs for a grand total of $6 shipped! Through-hole and SMT PCBsBut then I found that the more modern HEF4557 shift-register chips were not available in either package: the DIP format is obsolete, and the SOIC-16 is replaced with a SOIC-16 Wide package! Luckily, I found a batch of 10 Philips HEF4557BT chips on eBay. If for some reason that doesn’t work I will have to order an updated version of the PCB for the SOIC-16 Wide footprint.5 Philips HEF4557BT chipsThe reason I had also ordered through-hole boards is that I thought that would be much easier to solder, and I could have switched to the SMD version later.Now why do we need 6 “modern” chips, while there was only on original? The 2519 is a “hex” (6 inputs, 6 outputs) 40-bit shift register. The 16-pin chip has: 6 inputs 6 outputs VCC and GND (VGG) clock recirculate Signetics 2519 pinoutThe replacement HEF4557BT is a slightly different beast, because its buffer size is configurable from 1 to 64 bits. This means that 6 of its pins are dedicated to this configuration. So we have: 6 configuration inputs 2 selectable data inputs (DA and DB) 1 data input selector (A and /B), which can be used to recirculate bits clock clock enable output and negated output (O and /O) reset VDD and VSSBecause this needs to replace a “hex” chip, six of those HEF4557BT are needed. HEF4557BT pinoutI had never soldered SMD components before, and I was a bit worried about it. I watched a few videos, and it turns out that it’s not as impossible as it sounded initially. Of course, on YouTube, you will find people doing the craziest things. But I started by assembling The Three Fives Kit from Evil Mad Scientist: here you get to solder SMD resistors and transistors, and that was good practice, even though I am still a beginner at this.This said, I wasn’t as successful with the SOIC-16 ICs, in my estimation: observing the result under a magnifying glass, I could see that the soldering was not perfect. I tried to improve it, but my confidence in the quality of the contacts remained low. It seemed that the joints were sometimes dry, often uneven, and that the ICs were a little too high, one is clearly not perfectly aligned, etc. I will have to test the board to see if it works properly. The good part is that since there are 6 bits in parallel, if I messed up one of the ICs (and therefore bits), and if I don’t have bridges, others should work. Crossing fingers. 2519 replacement board assembled, topThis is the bottom of the board, which plugs into the IC sockets: 2519 replacement board assembled, bottomDRAM chips, shift-register chips and character ROMThe Apple-1 features 8 KB of DRAM. I bought on eBay a set of 16 (but received 17, thank you!) Mostek MK4027N-4 chips, sold as tested.6 These are 4096x1 chips. DRAM chipsFrom the same seller, I got a set of 7 Signetics 2504 chips and the 2513 character ROM, again sold as tested.6 Shift-register, character ROM, and clock chipsNote that the character ROM must specifically have the CGR0001 code, which describes the content needed for the Apple-1. The character ROMAll in all, the chips I got from that seller cost me about $200. This is as close as it gets to being an Apple-1 “IC kit”: although it’s a small subset of the total number of chips of the computer, it is also some of the hardest and most expensive to find.DS0025CNThis two-phase clock chip I also bought on eBay, in a lot of 2, untested.6 DS0025CN6820 (PIA) and 6502The PIA in the Apple-1 is used to interface with the keyboard and the terminal section.Those PIA chips used to be cheap and abundant, but original ones are running out. Interestingly, those PIAs are also used in old pinball machines, so they are sought after for that reason as well. But they can still be found. It appears that you can also use a 6821 chip, or a 6520. Some sources from China are cheap, but can you trust that they are not fake? I do note one seller who sold 80+ sets of 3 chips, so that might be a good source after all. A seller in Canada sells Motorola-branded 6821 chips “guaranteed to work”, which is good. With shipping, that amounts to about $15 for a chip. Not great, of course, but not crazy either. The CM602 made in Bulgaria might also be an option, and looks good (ceramic package) although not original. With shipping, that amounts to about $21 for a chip.Oh, and of course someone is selling on eBay a “Lot of 7 Rare MOS MPS 6520 PIA chip used in APPLE 1 - date codes all in 1977” for $1,995. Right.I decided, for looks and fun, to order a CM602 from Bulgaria. I don’t know if it works yet, as it was sold untested.6 CM602 chip from BulgariaI have since learned a little about the rise and fall of Bulgaria’s semiconductor during the communist era. See The Unlikely Rise and Collapse of the Bulgarian Computer, in particular. According to the description of an eBay seller, this chip was “Made by DSO “Priborosroene Pravetz, Bulgaria”, the same factory that produced the famous Pravetz Personal Computer (Bulgarian clones of Apple-II and IBM PC/XT) during the communist era.”Then locally I found a Synertek-branded 6520A (date code 1983) at Anchor (although they listed it as out of stock originally). Hopefully one or both will work.6You can easily find 6502 chips on eBay. This said, I also found a Synertek-branded 6502A locally at Anchor Electronics (1979 date code).I read that those 6520A and 6502A chips came from old Atari stock, witness the “CO” markings on the chips! 6502A and 6520AThese two chips are very recognizable on the original Apple-1s, as they are the only 40-pin DIL chips, and sometimes they are in a ceramic package.PROMsPROM blanks, as well as Apple-1-programmed PROMs, are now unobtainium, although I recently (August 2024) heard about a provider. But we can use a small daughter board made by P-LAB to use a more “modern” EPROM. However, I found that UV EPROMs are no longer current tech. They are not sold online at Mouser or DigiKey, for example. But I bought a 27C64 at Anchor (AMD-branded),7 and I will have to program it. In the future, something using an EEPROM or modern Flash could be designed. 27C64 EPROMI decided to make that daughter board black, for a change: EPROM daughter boardCould I do the two daughter boards, as well as the possible riser card, black? That might look cool. There is “logic” too: the chips they replace are black, so it would be a nod to that.Here is the assembled board: EPROM daughter board assembledI also assembled a riser card, just in case: Riser card assembledIt is still missing the termination resistors, which I may or may not have to install.Power supply transistorI bought the large LM323K power supply transistor on eBay. Power supply transistor7400-series chipsI found out about Unicorn Electronics in the Apple Fritter forums and one of the BOMs available. They still have a selection of the TTL chips in the 7400-series.8 I also ordered from them the following, which also includes some capacitors and diodes: Purchase details Item Qty Amount CPD.150 CPD.150 20 $3.00 CPD.0150 CPD.0150 10 $1.00 CPD.00150 CPD.00150 2 $0.20 CPS47500 CPS47500 2 $1.18 CPA2225 CPA2225 6 $1.62 74174A 74174A 1 $2.99 74175A 74175A 1 $2.99 74157A 74157A 2 $7.98 Quad 2 Input NAND Gate 7400 3 $3.87 Quad 2 Input NOR Gate 7402 1 $1.79 Hex Inverter 7404 1 $1.49 Quad 2 Input AND Gate 7408 1 $2.49 Triple 3 Input NAND Gate 7410 2 $2.98 Dual Retriggerable Mono. Multivibrator 74123 1 $2.49 4 to 16 Line Decoder/Demultiplexer 74154 1 $3.49 4 Bit Decade Counter with Direct Clear 74160 1 $1.49 Synchronous 4 Bit Binary Counter 74161 5 $7.45 8 Bit Shift Register 74166 1 $1.49 Triple 3 Input NOR Gate 7427 1 $0.99 Quad 2 Input OR Gate 7432 1 $1.79 Expan. 2 Wide-2 Input AND/OR/Invert Gate 7450 1 $0.49 Quad 2 Input Multiplexer (Tri-State Output) 74S257 4 $5.16 High Speed Hex Buffer (Tri-State Output) 8T97 2 $3.98 50V 1A Silicon Rectifier 1N4001 5 $0.50 Total     $62.90 Chips from the Unicorn Electronics orderI found out that locally for me, Anchor Electronics in Santa Clara still has some of those chips as well.[^74series]Transformers and Sprague capacitorsThe transformers are also iconic parts of the Apple-1. The original ones were of the Triad or Stancor brand as recommended by Apple. The Stancor ones are harder to find, but the Triad ones are still available. I bought them on Mouser, alongside the Sprague capacitors, extension connector, power transistor radiator, and other smaller items. All in all, each of the large parts cost about $20 a piece, for a total of about $100 just there. Transformers, capacitors, and moreIC socketsBy almost universal agreement, the old-style 1970s sockets were not great. In fact, I saw this first hand when fixing my TVI-912 terminal. New machined sockets are better but look definitely different from the original ones. From what I see online, many Apple-1 reproductions use machined sockets and I will be in good company. But they are not cheap: I spent between $60 and $80 for the set. That’s right, just the sockets! IC socketsResistors, capacitors, and diodesIt doesn’t make a difference for functionality, but passive components are also part of the look of the Apple-1. I bought some disc capacitors (Unicorn), some carbon composition resistors of the Allen Bradley brand, and the A14F sinterglass diodes (eBay). Allen Bradley resistorsThe diodes came in a pack of 50, so I will have plenty of spares. I will probably sell back most of them. I hope that they work. Sinterglass diodesEPROM programmingWhen I was 19, I dreamt of having an EPROM programmer to complete a custom Z80 build. But I don’t think I actually ever used one, although a few years later, at EPFL, I programmed modern CPLDs.But the Apple-1 either needs a PROM programmer if you can find PROM Blanks or, as is my case with the EPROM daughter board, a good old UV EPROM programmer. I did some research, got some advice, and ordered a cheap UV EPROM eraser and an “XGecu T48” programmer. EPROM eraser and programmerOpen source software available for this programmer has just recently been made available using the minipro command. I had to compile the source code locally, as follows:git clone https://gitlab.com/DavidGriffith/minipro.gitcd minipromakesudo make installI programmed the EPROM with the following command-line:minipro -p AM27C64@DIP28 -w wozmon-for-27c64-28c64-250-ns-or-better.bin Wozmon programmed and installedMonitorIn April 2024, I found something that should work: an Hitachi monitor. There is a crack in the front plastic, but it’s not too bad. I hope that it will work: although I haven’t tested it yet, the tube appears ok and the beam briefly travels through the screen when turning it off. Hitachi monitorConclusion of part 1I have now most of the parts I need to build the Apple-1 reproduction. I have also built some of the daughter boards.Part 2 covers building the power supply. This was quite different from the Altair, for example, which required adding separate boards for input and output, and a connection to an external terminal or teletype (unless you were happy to use the front-panel switches). &#8617; The exact terminology to use is a matter of debate. Uncle Bernie prefers the term “clone”, some people use the word “replica”, and some “reproduction”. I think that the terms themselves do not help here, as all of the above terms indicate that there is intent to make a copy of something, and the degree of exactness of the copy is not obvious. For example, some non-accurate reproductions using more modern chips for part of the board but keeping the Apple-1 spirit have been called “replicas”; so-called “PC clones” from the 1980s were not exact copies of the IBM PC; etc. To be more accurate, we could describe what’s being done here as “a fairly accurate reproduction of the Apple-1 main board”. &#8617; For the 2005 date, see Bryan’s Old Computers. &#8617; Kits were sold by “Uncle Bernie” over the last few years, but no longer. As of writing, there are kits still listed as available from Unicorn Electronics. However, there is no proper description of the contents of that kit, or any feedback from buyers of that kit that we know of. It is not cheap either at $666.66, and all in all buying that kit would be a gamble. &#8617; Update 2024-10-07: they worked, although I had initially some bad solder joints that I had to find and fix! &#8617; Update 2024-10-07: all the chips worked! &#8617; &#8617;2 &#8617;3 &#8617;4 &#8617;5 In August 2024, I also found a series of EPROMs, so I will have some spares. I also got some Czech and Soviet EPROMs, which are not original but look cool. &#8617; In April 2024, I found a lot of 7400-series chips, and I might use some of them with older date codes in the Apple-1. &#8617; " }, { "title": "Replacing a VIC-20 key", "url": "/posts/vic-20-key/", "categories": "Technology", "tags": "", "date": "2024-07-24 20:25:00 -0700", "snippet": "IntroductionIn late 2023, I acquired a Commodore VIC-20 computer. I had been thinking about getting one (or a Commodore 64) if I could get a good deal, and this was one. It came with a few cartridg...", "content": "IntroductionIn late 2023, I acquired a Commodore VIC-20 computer. I had been thinking about getting one (or a Commodore 64) if I could get a good deal, and this was one. It came with a few cartridges, including a Super Expander memory expansion cartridge, a Datasette with a few tapes, a joystick, the TV modulator, and several books and manual! The VIC-20 and some accessoriesThe VIC-20 had a broken (/: key. In fact, the key cap was missing and the key stem was broken. So I ordered a replacement part from retroleum.co.uk.Removing the old keyTo replace the key, you must: open the VIC-20 partially disassemble the keyboardThe VIC-20 is very easy to open: just remove the screws at the bottom of the case, and the two parts of the case can be separated. The open VIC-20NOTE: For cleaning, and out of curiosity, I removed the entire keyboard from the case, which is why you see the keyboard try out of the computer on some pictures. But this is not strictly necessary just to replace the key.To access the inside of the keyboard, you have to remove all the screws holding the PCB in place. You might have to partially lift the transparent sticky tape that secures the keyboard wires in place to access some of the screws. There is no need to completely remove that tape. The keyboard's bottom PCB screwsYou also have to desolder the two wires for the RUN/STOP key, which is handled specially. The desoldered `RUN`/`STOP` key wiresYou can then lift the PCB. The open keyboardI just took the broken plunger out. The broken plungerInstalling the new keyThe replacement key came with key cap, plunger and spring. The replacement keyThere are different plunger sizes, so you need to make sure your replacement has the right size. I had determined, when ordering from Retroleum, that I probably had a Type 1 key, and luckily that was correct. Here is the size that fits my VIC-20. The new plunger's measurementEach key plunger fits into its own little compartment. The keyboard trayAfter installing the new key, you have to put back the PCB, screw back all the screws, and resolder the two wires for the RUN/STOP key. The resoldered wiresYou can then close the VIC-20. I had ordered a “Grade 1.5 - Minimal Yellowing” key from Retroleum, and that turned out to be a perfect match. The fixed keyboardConclusionThis was an easy fix, and the VIC-20 looks great after this replacement and an overall cleaning. The fixed VIC-20" }, { "title": "The IBM Magnetic Tape Selectric Composer - Part 2", "url": "/posts/ibm-mt-sc-2/", "categories": "Technology", "tags": "", "date": "2024-07-03 14:25:00 -0700", "snippet": " The IBM Magnetic Tape Selectric Composer (MT/SC)IntroductionThis is part 2 of a two-part post. See also The IBM Magnetic Tape Selectric Composer - Part 1.In the first part, I placed the IBM MT/...", "content": " The IBM Magnetic Tape Selectric Composer (MT/SC)IntroductionThis is part 2 of a two-part post. See also The IBM Magnetic Tape Selectric Composer - Part 1.In the first part, I placed the IBM MT/SC in its context, described its various parts at a high level, and covered the input station in more details. In this part, I continue the exploration of the MT/SC, starting with the output station.The output station (MT/SC)Initial glanceThe output station, or composing station, is what I call above the MT/SC proper. It consists of: a modified Selectric Composer a tape console a desk which contains electronics inside, and a control panel on topThere is a single power cable for the whole system, which goes to the desk.The ComposerAs discussed at the beginning of this article, this is what I saw first of the system. The IBM Composer is a very recognizable, and beautiful, piece of equipment. The ComposerIt looks significantly different from the regular Selectric, and this is reflected inside, which also differs significantly from the Selectric.The Composer has a built-in cover, which you lift during operation. The Composer with cover liftedThe top case is removed easily, like with the regular Selectric. The inside was full of crumbled sound deadening foam, a common occurrence in IBM typewriters. The dirty insideYou can see, on the back left, the part that deals with the proportional escapement. The proportional esxapeementNow, the Composer part of the system is identical to the regular IBM Composer, is it? Well, almost, but not exactly! Indeed, IBM could have decided to build an I/O Composer, as they did an I/O Selectric. But they opted not to. The market was probably too small for this to make sense. So instead, IBM opted to electromechanically control a standard Composer from the outside. This required making a few small changes to the standard Composer: Add an opening at the bottom, with hooks, so that Composer keys can be activated. Add “photoelectric devices” inside the machine to detect the state of the machine’s cycle. Add a connector providing this information to the outside world. The Composer bottomYou can see how the hooks look like. The Composer hooksThe electronics in the MT/SC desk control the Composer using an electromechanical interface device called the translator. Here is a diagram from IBM. Translator diagramHere is a view from the top of the actual unit. The Composer simply sits on it. There is even an electrical outlet for the Composer power. The translator from the topThe translator base can easily be rotated up for servicing, The translator from the bottomIt includes its own electric motor. The translator motorThe translator also includes a small PCB, some switches, and some solenoids. Here, the PCB and the outlet next to it. The translator PCBThis introduces a synchronization problem, described by IBM in a 1968 paper. In short, the electric signals coming out of the modified Composer allow for synchronization, and for maximizing the throughput of the system.Like for the MT/SR, the Composer has a rubber ring around it so it can nicely fit into the opening in the desk.The Composer came with a dust cover.The tape consoleThe MT/SC tape console is labeled:Selectric Composer MT/Reader The tape consoleThis indicates, or rather confirms, that the purpose of the tape station is to “read” magnetic tapes only.The tape console include two so called “Tape Stations”: a left tape station, and a right tape station. My understanding at this point is that they are not identical: the left one is meant to hold a “correction tape”. while the right one holds a regular tape. The correction tape is typically produced from an MT/ST, but I am not sure an MT/ST Model V (MT/SR) can produce such a tape. Possibly.UPDATE: Reading some documentation, it appears that you can create a correction tape with any MT/ST, including with Model V (AKA MT/SR). All it takes is the ability to write prefix codes to tape, which the MT/SR can most definitely do.The tape stations are locked with two electromagnets. The MT/SR tape station has a single electromagnet. The tape console locksThe control panel contains more buttons than the in put station’s tape console. It includes: REREAD SKIP SEARCH COVER UNLOCK LOAD LEFT and UNLOAD LEFT LOAD RIGHT and UNLOAD RIGHT The tape console control panelCompare the two tape consoles’ control panels: The control panelsThe inside of the tape console is similar to the other tape console, except: there are two tape stations on top (but they share most of the components) there are two tape trays inside there is no electronics cage at all there is no power supply The open tape consoleThe tape console has a cable that connects to the MT/SC desk. There is no removable connector, so the cable is permanently attached to the console.There are 2 tapes inside the machine, loaded in their respective stations. They are not labeled. The fact that there are two hints that the “correction tape” might have been in use, and that, therefore, it was possible to make use of such a correction tape, and even maybe produce one from the MT/SR.UPDATE: This is possible, see further comments above.The desk and electronicsThis part is the heart of the whole MT/SC system. So it is important to spend some time on it.As already mentioned, this is not just a “desk”, of course. It is a desk that contains significant electronics, in addition to the translator discussed above.The top of the desk features a control panel. This is built into the desk at that specific angle, so that it can face the user sitting at the Composer. The control panelThe cover of the panel can be removed, to reveal more functions: The control panel cover removedA lot should be said about this control panel at some point.The electronics of the desk are accessible from the back. There is a large cover, which should usually be closed. The back of the deskTaking it fully off reveals the electronics inside. The back of the deskOn the right, we have a large fan and the power supply. The power supply with fan on its rightThere is obvious corrosion on some of the metal capacitors’ cases.On the left, there is a card cage, and a separate electronics board.The card cage can swivel, and you can easily see the back, which features a partially wire-wrapped backplane. The card cageSome funtional areas of the card cage can be established already, even without looking at the diagrams. The card cage areasThe separate board, in fact, contains the 2 KB core memory, while the card cage contains the rest of the electronics, including the memory controller. The cards are made essentially of IBM SLT modules. Some SLT modulesInterestingly, the back of the core memory features a note which says:FROM: JACK MARTIN OAKLAND B.O #287CUSTOMER : AUTOWEEKINSTALLED: 4/69SER # :PROBLEM : CONTINUOUS TRANSLATOR EXTRA CYCLINGThis tells us that a certain Jack Martin, working out of Oakland, installed or replaced the core memory in April 1969. The core memory noteNow what’s really funny is that I posted about this in the Golfball Typewriter group on Facebook, and someone replied that they had worked in Oakland in building 287, that they had known Jack Martin, and that he was indeed in charge of MT/SC machines. We are talking about a note installed in this machine almost exactly 50 years ago! What a small world!I notice one single missing part: the document holder that plugs on the desk. The MT/SR desk did come with its document holder.The MT/SC electronicsBesides full reverse-engineering, there is some good news about the electronics. Indeed, we have two major sources of information: the maintenance diagram manuals the article “Development of the Magnetic Tape Selectric Composer”, published in 1968 in the IBM Journal of Research and DevelopmentI knew the second resources existed, but it took me a while to find a way to download it online. But I did. That 19-page article contains a number of invaluable insights into the MT/SC. The MT/SC articleFrom it, in particular, we know that the electronics in fact implement a very simple processor, and we even have the format of the simple 16-bit instructions! The MT/SC instruction setIn fact, before I was able to obtain a copy of that article, I mused about the fact that the system might contain an interpreter. This was hinted at by the fact that there was clearly memory, and some notion of “program” was mentioned in the diagrams, and some labels on the MT/SC’s control panel hinted at loading a program (“Initial loader”) and stepping through instructions. The MT/SC control panelI wondered whether the program for the system might have resided on a special tape, which the operator would have to load in memory every time the machine was to be used. I also wondered, if not on tape, where the width of each character would be encoded so that justification could take place. I hadn’t thought that the program and justification tables could simply reside in the non-volatile core memory, as explained below. But I wasn’t that far off.The tasks of the machine, while simple in modern terms, were considered too large to implement in discrete logic, as was the case with the MT/ST and its relays bank. So the engineers went for a very flexible solution: a custom processor, with a small instruction set, and a microprogram stored in core memory. This allows the machine to process text coming from the tape, justify it, and send it to the Composer for output.The microprogram was stored in core memory at the factory. Because core memory is non-volatile, this was possible, and it acts as an EPROM or as Flash memory. In addition, the core memory also acts as RAM for buffers, and even as processor registers. The following diagram illustrates the general architecture of the processor. The MT/SC processorA similar diagram is present in the maintenance binder. Both appears broadly compatible. The MT/SC processorWe are so much better prepared here compared with newer IBM machines which are absolutely undocumented!This said, there is a huge challenge: after 45 years, can we still recover the microprogram from the core memory? It is not impossible that the program has remained. However, core memory read cycles are destructive, and if the memory controller is not working properly, we might lose the program. So we need to be very careful.If worse comes to worst, we could write a new microprogram. But wouldn’t it be cool to recover the original one, and see how the IBM engineers dealt with all the functions of the machine in such a small amount of memory?AccessoriesTapesThe MT/SC system is designed to work with magnetic tapes. IBM designed a completely new tape system, as far as I know, for the MT/ST. The MT/SC uses the exact same system, of course, as it had to be fully compatible with existing MT/ST that act as input stations.The tapes are designed to be very user-friendly. The target users were not computer users or even technical personnel, but secretaries and office workers. The tapes are enclosed in a transparent plastic cartridge, and as easy to handle as an audio cassette tape (a format released in 1963).In addition to two tapes present in the MT reader of the Magnetic Tape Selectric Composer, there were 3 dirty tapes that came with this system. One of the dirty tapesI decide to clean them right away as I couldn’t stand the dirt. One of the tape cartridges opened very easily, so I decided to just clean the cartridge with water and detergent. Cleaning a type element caseI also managed to open the other tapes, although I did break a plastic tab or two. Dirt had come into the tape cartridges, so I gently blew air and brushed away the dust, while I properly cleaned the cartridges. I also cleaned the hubs with Q-tips.Here are the 3 tapes after I cleaned and labeled them. The tapes in their cartridgesHere is how you handle the tapes (in theory - I haven’t been able to try this yet): Press the “UNLOAD” button on the tape console. An existing tape in the machine will be rewound, and the tape cover will open (or unlock) so we can remove it. Place the new tape in the tape console. Close the cover. Press the “LOAD” button. The cover will lock, and the tape will be loaded into the machine. \"LOAD\"/\"UNLOAD\" buttonsLike with a compact cassette, there is no manual winding or spooling of the tape needed. Even better, here the surface of the tape is never exposed to the user, and it’s always guaranteed to be fully wound in its cartridge.Each tape has a little eyelet on its end. You can see this on the following picture, as well as the sprocket holes in the tape. The tape and its eyelet and sprocket holesInside the machine, the tape drive has a pin that grabs that eyelet and pulls the tape into the machine. There is no take-up spool inside the machine: instead, the tape gently folds into the plastic bin inside the machine. Also, the tapes have a track with sprocket holes, which allows the machine to drive them.There is a fixed, plastic tape end inside the machine, that on one hand dips into the tape tray, and on the other hand hooks into the end of the actual tape. You can see it in this picture: The tape endThe tapes are quite low density: each character includes 9 bits and is written across the 16 mm width of the tape, at 20 characters per inch. Each tape contains 100 feet of 16 mm magnetic tape. Approximately 24,000 characters can fit on a tape. IBM’s estimate was that this would be equivalent to about 10 standard pages of text.Tapes, while playing back text, would go at about 15.5 character/second. The MT/ST search function is advertised as 900 character or 45 inch/second, while rewinding the tape would go at 32.5-52 inch/second.Composer type elementsThe Composer also came with a box containing 18 type elements - one of them being a regular Selectric type element, but the others being Composer type elements. Indeed, the Composer had its own, different type elements, incompatible with the Selectric’s. UN-10-L UN-8-B AR-8-I UN-8-L UN-8-MI UN-10-B UN-8-M UN-11-B UN-10-M UN-11-MC PR-8-M ORATOR [regular Selectric] PR-8-B PR-10-B UN-11-M UN-7-M B-12-B UN-11-MI In addition, element PR-10-M was installed on the machine. Some of the type elementsComposer elements are named consistently. For the fonts above: UN: Universal PR: Press Roman B: Bodoni BookThe middle number indicates the size of the font in points, while the last part indicates the variant: M: Medium B: Bold I: Italic MI: Medium Italic L: LightI have since acquired a few more type elements (thank you Ted and others!).The maintenance diagram manualsAn important part of the system are the “maintenance diagram manuals”. There is one for the MT/SC, and one for the MT/SR. These large binders contain what should be invaluable information about the system. The MT/SC maintenance diagram manualIBM service manuals, in general, are very well done and include, for each aspect of the machine, a “theory of operation” section. In short, you can peruse a service manual, and have a really good idea of how the machines works. This is not so here, with the “maintenance diagram manuals”: they don’t include are any explanations whatsoever!However, they contain a lot of detailed diagrams, including (as copied from the MT/SC binder’s table of contents): data flow diagrams intermediate logic diagrams (ILD) function charts ALD net listings timing diagrams power supply diagrams wiring diagrams code charts MT reader diagrams [for the magnetic tape reader] PT reader diagrams [for the optional paper tape reader] memory diagrams ALD card circuits ALD (Automated Logic Diagrams)The MT/SR binder contains similar diagrams, but they are much simpler.Both binders appear fully complete. The MT/SC binder contains 122 pages with text and diagrams, while the MT/SR binder contains 38 pages only.I was graciously lent/donated a CZUR scanner by Ken Shirriff. With it, it was a breeze to scan the content of both large binders. Thank you, Ken!I should note that we are also missing a user manual for the system. We do have manuals for the MT/ST, for the Composer, but not, specifically, for the MT/SC. If you know of such manuals, which definitely must have existed at the time, please let me know! The “Development” article contains the closest we currently have from a user manual!UPDATE: I now know of a partial manual: “IBM Magnetic Tape Selectric Composer - Guide to Copy Preparation”. There is also a manual online entitled “IBM Magnetic Tape Selectric Composer - Record Unit Training Guide MT/ST Models II and IV (for Graphics)”.There is mention in the available documents of a paper tape reader. This was an optional interface and device to read existing paper tapes in a format called TeleTypeSetter (TTS) used by newspapers. This instance of the MT/SC doesn’t come with this interface. It is unclear how widespread this standard was.Additional contextProvenanceWe know from the service records that came with the machines that they were in use from 1969 to 1978 at least. The customer mentioned on Jack Martin’s note is “Autoweek”, a car magazine. However, the service notes mention “Coon Litho”, a company that I haven’t been able to trace.The seller mentioned that her grandfather, unfortunately long passed, somehow acquired this system after it was decommissioned, and put it in his garage, where it stayed for the next 45 years. This is how this system was saved from destruction, and how we now have an opportunity to study it, document it, and, possibly, restore parts or all of it.It would be interesting if we could, at some point, read text from the tape, and see if indeed there is some Autoweek magazine content.RarityI mentioned at the top of this article that we, at of July 2024, do not know of any other surviving MT/SC. There are a few known MT/ST (none of them working, that we know of), but no MT/SC. Why would that be? Well, clearly there were less MT/SCs made compared to the MT/ST. The MT/SC was designed for a very specific market of cold typesetting, while the MT/ST was much more widely applicable.In addition, and this applies to many IBM systems, these systems were expensive, and therefore often leased to customers. Once the leasing period was up, given the speed at which technology was moving in the 1960s, 1970s, and 1980s, the machines were usually thoroughly obsolete, and IBM would scrap them. A similar fate awaited machines that were bought (like our instance, probably) instead of leased anyway, as they were large, obsolete, and not pretty or collectible.Well into the 21st century, I can only disagree that these machines are not collectible, but imagine the situation around 1980, which such machines would typically be decommissioned.Therefore, we are extremely lucky that any such machine has survived. I do hope that there are more, and I still hope to put my hands on an MT/ST at some point, but let’s see!PricingWe know from IBM ads, in particular, that the 1964 MT/ST was priced at $10,000 of the time, or about $100,000 in 2024.A 1967 document quotes the MT/SC proper at $16,550, which is about $150,000 in 2024 US dollars. The MT/SC therefore was about 50% more expensive than the already-expensive MT/ST. In addition, you would need to add an MT/ST to the system for the input station, unless you opted for the relatively cheaper MT/SR (AKA MT/ST Model V, see below).The same 1967 document quotes the MT/SR at $3,950, which is about $35,000 in 2024 US dollars. This equates to less than half the price of the MT/ST Model IV.Even the single-Tape Station MT/ST Model II was much more sophisticated than the MT/SR: it could read and write from and to the tape it had simple word-processing abilities it no doubt included the sophisticated relay bank the typewriter was a full-fledged I/O typewriterIt is pretty clear that the MT/ST Model V AKA MT/SR was designed specifically as a cheaper input system for the MT/SC. The system would have quite limited applications besides that.Relationship with the IBM 2741As an aside, I was curious as to how the MT/ST relate to the IBM 2741 terminal, used for the famous System/360. The IBM 2741 terminal(How can there not be a modern high-resolution picture of this terminal online? I created this one based on a manual for the terminal. I rotated the picture, smoothed it, and added a blue background.)There are obvious visual similarities: similar, but smaller desk without drawers use of an I/O typewriterThe IBM I/O typewriter obviously underlies the 2741 as well as the MT/ST. By some accounts, the I/O development started even before the original Selectric reached the market in 1961.The 2741 includes SLT-based electronics in its desk. So no relays here (the original MT/ST remains an outlier), and no separate console. From this point of view, it is more similar to the MT/SC desk (see below).The keyboard has differences as well: The MT/ST and MT/SR have a large extra PX (“Prefix”) key to the left, while the 2741 doesn’t. The MT/ST has a “REV/CR” key, while the 2741 has an “ATTN” key. The layout of special characters appears different (for example location of “!”, “+”, etc.) The 2741 used a serial RS-232 connection, while the MT/ST’s connector to the console is entirely proprietary.IBM documentation says that two types of keyboard/type elements could be ordered: standard Selectric typewriter (correspondence) PTTC/BCD or PTTC/EBCDBut while their documented Selectric layout appears to match the Selectric I’s layout, it is different from the MT/SR’s, which, as we have seen in part 1, matches the Composer layout. The 2741 typewriter layout The 2741 PTTC/BCD layoutThe “Development” article mentions that: Many of the memory circuits and array components were selected from those used in existing products such as the IBM 2740 Buffer Terminal. Many of the memory circuits operate from logic-level inputs, so that no well-defined interface is needed between memory and logic.It could be that the memory module, in particular, is also present on the 2740. If anyone is able to confirm or infirm that, it would be great to let me know.Restoration planI was incredibly lucky to have the visit of CuriousMarc and Ken Shirriff to have a look at the system. We talked a lot about it and what will need to be done to get it working again. They think that there is good hope to get it working, including the electronics, which they have the skills to analyze and repair, and the tape drives - the two major areas of the system that I feel the least comfortable with.So I have put together a very simple restoration plan: Clean and fix the input (MT/SR) typewriter flush the old grease replace the tab pulley relubricate check operations with the hand cycle tool separately power up the typewriter Clean and fix the input tape console flush the old grease relubricate check operations manually check the PSU voltages try to power the system up Clean and fix the Composer flush the old grease relubricate check operations with the hand cycle tool power up the Composer Tackle the MT/SC electronics …profit! I feel that I can reasonably start looking a the typewriters, since I have some experience with that. The tape consoles are not extraordinary complex either. Mechanically, they obviously need to be cleaned, flushed of old congealed grease, and then probably relubricated.I will leave the MT/ST electronics for last, as that is the most challenging project, probably. Well, it could be that everything “just works”, who knows! But for now I have to assume that restoring the entire system will be a large undertaking with some surprises along the way.Some initial workAs of June 2024, I have already started work on the MT/SR typewriter. I have flushed the MT/SR typewriter’s old grease and dirt, and I replaced the broken tab pulley. However, the machine seems to be stuck mid-cycle, and I will have to investigate more before I even attempt to power it up. The MT/SR typewriter's new tab pulleyI have also started removing the sound-deadening foam from the tape units, and otherwise cleaning the tape units enclosures. Cleaning the tape consoleI removed the foam from the MT/SR typewriter, and the electronics cage as well.I cleaned the MT/SR’s document holder, the binders, and the Composer type elements and box. Unfortunately, I didn’t manage to get rid of the rat urine smell on the papers. I even tried to use an ozone machine, but I am not sure that had an actual effect. Cleaning the type elements boxThe box also now has new feet. The type elements box with new feet Cleaning the document holderI already had a BORA base, which I had used for one of my ASR-33 terminals. I bought a second one, this time with a metal frame. The BORA baseYou can see the MT/SR tape console on its base here: The tape console on the BORA baseThese bases are convenient to move things around. I also put new rubber feet on the tape console. I wish I could put the desks on wheels as well, as they are extremely heavy.Temporary conclusionIn this post, I placed the IBM MT/SC in its context, described its various parts, and started digging into the details of the MT/SC instance that I acquired. The system received a basic cleaning, and is stored in reasonably good conditions. It has been fairly extensively photographically documented. Its unique documentation has been scanned for posterity. Finally, I outlined a restoration plan, which I hope will eventually unfold.References Photo albums IBM Selectric MT/SR 655 (196x) - Part 1 IBM Selectric Modified Composer (196x) - Part 1 IBM MT/ST Recorder Model V (1965) - Part 1 IBM MT/SC Composer (1969) - Part 1 MT/ST Composer/Recorder - Restoration in progress TWDB 1969 IBM Selectric Recorder 1969 IBM Selectric Composer 1969 IBM Magnetic Tape Selectric Recorder 1969 IBM Magnetic Tape Selectric Composer " }, { "title": "The IBM Magnetic Tape Selectric Composer - Part 1", "url": "/posts/ibm-mt-sc-1/", "categories": "Technology", "tags": "", "date": "2024-07-03 14:25:00 -0700", "snippet": " The IBM Magnetic Tape Selectric Composer (MT/SC)IntroductionThis is part 1 of a two-part post. See also The IBM Magnetic Tape Selectric Composer - Part 2.For a few years now, I have been collec...", "content": " The IBM Magnetic Tape Selectric Composer (MT/SC)IntroductionThis is part 1 of a two-part post. See also The IBM Magnetic Tape Selectric Composer - Part 2.For a few years now, I have been collecting IBM typewriters. That includes the Selectric, probably the best known of the IBM typewriters with its famous “golf ball” type element, but also older-style “typebar” typewriters, starting with the Electromatic, and later Executive typewriters which feature proportional spacing and carbon ribbon. All of these are electromechanical machines. Electromechanical IBM typewriters: Electromatic (later IBM Model 01), Model 04 Executive, Model A Executive, Selectric I (two instances), Model D Executive, Correcting Selectric II (two instances), Correcting Selectric IIIBut there is more to the world of IBM typewriters than those. During the 1950s already, IBM typebar typewriters modified by third-party companies were used as computer terminals, such as for the Bendix G-15 or the PDP-1. Such computer systems cost between half a million and over a million 2024 dollars. Compare the terminal below with the IBM Model A Executive in the montage above. IBM-based typewriter terminal for the PDP-1(Photo credit: Alexey Komarov, CC BY-SA 4.0)However, around that time, IBM also started looking internally at how their typewriters could be used in conjunction with paper or magnetic tape for word processing or publishing, with much more limited hardware needs, making them more affordable and suitable for office work.UPDATE: Here is a picture of a prototype from around 1958: IBM prototype of the MT/STYou can see: on the left, a keypunch for entry in the center, the tape drive on the right, the printer, which is a modified IBM Model B typewriter (or Model B I/O)The machine’s electronics clearly feature relays, but also vacuum tubes! It is interesting to me that IBM eventually got rid of the tubes, kept the relays, but used “SMS” cards (some with transistors) instead of tubes for the rest.It took IBM about 6 years and finally, in 1964, IBM’s MT/ST (Magnetic Tape/Selectric Typewriter), the first dedicated word processor, reached the market. It wasn’t cheap at $10,000 (or $100,000 in 2024 dollars). This was a very significant machine, and interesting in many ways. I plan to cover it in more details in a separate post. The IBM Magnetic Tape Selectric Typewriter (MT/ST)Later generations of that system progressively got more affordable and used magnetic cards (“Mag Card Selectric Typewriter”), an internal tape loop (“Memory Typewriter”), or even battery-powered RAM (“Electronic Typewriter 75”). I did manage to collect some of these machines as well.1 I covered, in particular, the Memory Typewriter and Electronic Selectric Composer in a few posts.2 Electronic IBM typewriters: Memory Typewriter, Mag Card/A, Electronic Selectric Composer, Memory Typewriter 100, Electronic Typewriter 75Over the last couple of years I have become (maybe a little too) fascinated with the MT/ST, and I was keeping an eye open to see if any instance would surface. Among others, I acquired a maintenance binder for the MT/ST, which I will discuss in another post; I acquired NOS (new old stock) MT/ST tapes; and I also got vaguely acquainted with a weird system called the MT/SC (Magnetic Tape/Selectric Composer), which appeared derived from the MT/ST and the IBM Composer.3 In fact, recently, I had asked in online groups whether any MT/SC might have survived, as there was no evidence online that any had. Nobody had any knowledge of a surviving system.The findUnexpectedly, in March, someone (thank you Brian!) tipped me that an IBM Composer was available in my area. This was already of interest to me, but on the side of the picture was clearly (to me!) an IBM tape console that looked like the one used for the MT/ST. The picture from Craigslist!Would you have seen it? I am quite proud I did, but then I had been feeding myself images of the MT/ST for a while. On the other hand, retrospectively, I think I blanked on the desk console and binders when I first looked at the picture.I immediately contacted the seller (thank you Kelly!), who confirmed the item was available, including the tape console. I dropped everything to rush to the place. This is what I saw when I arrived. The machines as I first saw themThere was not only the Composer, desk and tape console, but another desk, typewriter and tape console! I was in shock. I had to have it all, but I was told that it all came together anyway. I was too excited to be quite sure what I had, but I knew that I wanted it, and that I would figure out the rest later.I had planned for my minivan, which I hoped would be able to hold typewriter, desk, and tape console - and it did. But I hadn’t planned for two sets of these! I called a friend with a small truck, and thankfully he was able to help right away (thanks again, Darrell!).I glimpsed into one of the tape stations, hoping to find a bank of relays like that of the full MT/ST. Instead, I saw mostly emptiness. I had a slight moment of doubt, thinking that the console might have been guttted. But luckily, it turned out not to be the case, and that, by design, these tape consoles never included relays.After the (literal) dust settled, I realized that this was a full MT/SC system - and, possibly, the only survivor of its kind!4First stepsOnce the system was loaded, transported and unloaded, I did a round of cleaning. The goal here was twofold: Avoiding storing filthy machines. Doing a rough evaluation of the machines’ condition.The desks, which were covered in grime, turned out to be in better cosmetic condition than expected. The top of the input station, in particular, is in excellent condition, as are the drawers. There were lots of rat excrements underneath the desk, which had to be taken care of. There is corrosion on the desk legs, which should be also addressed eventually, but it’s not too bad. Finally, one of the legs is slightly coming loose, but hopefully that is fixable. The input station desk after cleaningWhile the desk of the input station is purely a piece of furniture without electronics, the desk of the output station contains electronics and electromechanical components, but no drawers.I used compressed air to clean dust and dirt from the output station’s inside. The back of that unit can be closed with a large panel, which was separate when I got the machine, but which I luckily recognized for what it was and took as well.I opened the tape consoles to check them, but only cleaned their exterior. Grimy tape consoleThe consoles look better after cleaning. However, there are some scratches on the exterior panels of the input tape console, and some color stains on top. It’s unclear if there is any way to make this go away, or if some painting will be eventually needed. Input tape console after superficial cleaningThe Composer station station also looks better after superficial cleaning. The cleaned Composer stationWhat is the IBM MT/SC?So what is, then, the IBM MT/SC (Magnetic Tape/Selectric Composer) that I obtained? Let’s put things in perspective.IBM’s typewriter product line in the 1960s was not perfect or exactly simple, but it was sensible. They had: the heritage of the typebar Electromatic, including the Executive with proportional spacing (Model C in 1958, C Executive in 1959); the new revolutionary Selectric (now known as the Selectric I), which would soon take over so many offices (1961); the first word processor, using magnetic tapes, the MT/ST (1964); the Selectric Composer, an electromechanical typesetting machine (1966).3Given this product lineup, it was only natural for IBM to bring together the MT/ST and the Composer by means of electronics. IBM had all the in-house technology needed for this, given that it also had a line of powerful but extremely expensive mainframe computers.5An so the IBM MT/SC came out in 1967, quite soon after the standalone Composer’s release. This indicates that development on the system must have started much earlier. How early, we might never know!The general idea behind the MT/SC was as follows: you would use an MT/ST to enter text and save it to tape. Then you would move the tape to the MT/SC station, which would read the tape and produce typeset text. This included proportional text, right-margin justification, and even hyphenation. The following diagram, from a 1968 IBM paper, and which I colorized, shows the general idea of the system: Block diagram of an MT/SC systemAt the center of the system, in yellow, are the tapes. On the left, “Keyboards” (or input stations). On the right, the MT/SC proper (or output station, or composing station), which can read the tapes and produce the composed copy.This had been unclear to me before obtaining this system, but a distinction must be made between the MT/SC proper, which includes the Composer, its desk, and tape console, and a full MT/SC system, which has to include the MT/SC, but also one or more input stations. In a field installation, you would have always at least one input station in addition to the MT/SC. In other words, the MT/SC cannot be used standalone, without an input station. You need a way to make the tapes containing the text to compose, and the MT/SC by itself cannot do that.The 1966 standalone electromechanical Composer (and, before it, the Varityper) required the operator to type each line twice, making those devices slow. The MT/SC fixed that issue of slowness in a few ways: The Composer works from tape, and has an electronic memory, and no longer requires typing things twice. Text output is mostly automatic, only requiring intervention for some hyphenation decisions as well as changing fonts. Mistakes are more easily handled. Since the text is on tape, you can input the text once, and output it multiple times from the same tape. You could also have multiple operators working on text entry at the same time, on cheaper input stations, to maximize the use of the expensive composing station.The result was high-quality text output produced much faster than with the electromechanical Composer alone. This was very important for medium-size publications, like some magazines.As you can see, this is really a composing or publishing system not “just” a word-processing system, although word-processing with the MT/ST can absolutely be part of it.High-level inventoryI am really lucky that the system I got also included an input station! Therefore, I obtained not only an MT/SC, but an entire MT/SC system. It consists of two main parts: the Magnetic Tape Selectric Recorder (MT/SR) which acts as an input station the Magnetic Tape Selectric Composer (MT/SC) proper (output station)Each station includes: a typewriter a desk a tape console a green binderAmazingly, the two maintenance binders with service diagrams are present! The binders were meant to be stored in the tape consoles, where there is a holder for that purpose. However the two binders had been left on top of the machines, where unfortunately they were exposed to some amount of rat urine. But their content was mostly intact. Each binder also includes a complete service record for each machine, showing that they entered service in 1969 and were used until at least 1978. The MT/SC maintenance diagram manualHere is the itemized “Equipment History” for the MT/SR, dated July 5, 1968: The MT/SR partsThere were also some accessories, including: 3 tapes that were unprotected 2 tapes within the MT/SC some ribbons a box with 18 type elements some sheets of paper some smaller items not directly related to the MT/SCThe input station (MT/SR)Initial glanceFirst, this was an unknown system to me! The input station, at first glance, looks like an MT/ST. The main difference you can observe is that the tape console has fewer buttons. In particular, it doesn’t have the iconic dials and two-digit window for search. The tape console also has only one Tape Station (as IBM called them), on the right, with a placeholder on the left. The tape console of the input stationCompare with the MT/ST Model II, which also had only a single Tape Station, as seen below. The single-Tape Station MT/ST Model IIThere is a single power cable for the whole system.NamingThe input station features multiple names, which I summarize below: Label/Location Model/Name Notes Inside the typewriter MODEL: MT/SR “Magnetic Tape/Selectric Recorder” Inside the typewriter TYPE: 655 model of the typewriter unit Maintenance Diagram Manual Magnetic Tape “Selectric” Recorder presumably for the whole system MT/SR Equipment History sheet 655 TYPEWRITER clearly the model of the typewriter unit Inside the tape console MT Selectric Recorder   Inside the tape console Model 6330 presumably the model of the tape console On the tape console Selectric Recorder / Magnetic Tape Model V presumably for the whole system 1967 sales quote from Kansas Magnetic Tape Selectric Recorder with desk, Model V whole system I will call this the “input station” or the “MT/SR” to refer to the whole input system.The typewriterThe typewriter looks identical to the typewriter of the MT/ST. I already knew that this machine was a so-called I/O typewriter, that is, an IBM Selectric modified to be connected to computers and tape systems like the MT/ST and the MT/SR. Well, this was only partially correct, as I found out later. The MT/SR typewriterUnlike the output station (see below) and later IBM Mag Card units, you can easily disconnect the magnetic tape console from the typewriter by unscrewing a connector. That connector also brings power in for the typewriter motor: there is no separate power cord for the typewriter. The typewriter connectorThe typewriter label says clearly “MODEL: MT/SR” and “TYPE: 655”. This is a hint that it is not a standard I/O typewriter, and I determined later that this is just an “input-only” typewriter, with the ability to type text and save it to tape, but not to read from tape and print. The machine features contact for input, but lacks the solenoids needed for operating the printer. In fact, there are two solenoids: one to activate the ribbon color switch one to activate the Selectric’s cycle clutch The I/O typewriter labelSomeone asked me if it could be possible that this was a regular I/O typewriter, but that someone took out the solenoids. I am 100% sure that this is not the case: The naming of the typewriter is clear: it is an MT/SR (as in “Recorder”). The use case for the input station is clear: it is to enter text and save it to tape, not to print it. There is no evidence in the typewriter’s or tape console’s buttons of anything indicating that you could switch the machine to read from tape and print. There is no physical evidence inside the typewriter of anything having been removed. All appears original.My conclusion is that IBM simply produced dumbed-down I/O typewriters for input only, and that this is one of them. This would have reduced cost by a small fraction.Now, I wish I had an actual full-fledged I/O typewriter, as it would be fun to use it s a printer, but this is not such a machine.I might still refer to this as an “I/O typewriter” for simplicity, but from now on let’s keep in mind that this is not a regular I/O typewriter.The I/O typewriter uses fabric ribbons in a cartridge. A spare, sealed ribbon was present, as well as another, open ribbon. The ribbon is bicolor, which is unusual for an IBM typewriter. The reason for this was that the user could enter codes using the PFX (“Prefix”) key, and the code would show in red on the paper as a differentiator. The bicolor ribbonI think that you should be able to respool a regular fabric ribbon into the cartridge, but I haven’t tried yet.A single type element, identified by MT/SR, is present. The list of parts refers to this as “DOMESTIC PRESTIGE ELITE ELEM”. The type elementLike the regular Selectric I/O typewriter, the machine is taller than a regular Selectric I typewriter, but the bottom part is meant to fit into a recess in a desk. The “underwater” part is almost the same height as the “above water” part. The I/O typewriter profileIn fact, it looks really cool when inside the desk, even better than a regular Selectric typewriter! The I/O typewriter in its deskThe typewriter can easily be removed from its desk, which was convenient for moving the whole system. It is also easy to remove the top cover the I/O typewriter without tools. Once you have done that, you can lift the inside of the typewriter in service position (shown below after removal of crumbling sound-deadening foam). The I/O typewriter in service positionThere are two obviously broken parts inside the typewriter: A plastic tape is broken. This is activated by a solenoid, and the purpose is to switch the ribbon from black to red. It is not an essential part, but it would be nice to fix it. The tab pulley is broken. This is a common issue in Selectric typewriters, and it is definitely fixable. Broken tab pulleyHere is the schematics for the ribbon color switch. Ribbon color switch schematicThe I/O typewriter came with a dust cover.The MT/SR keyboard is interestingly different from the standard Selectric keyboard, or from the IBM 2741 terminal’s. Note, in particular, on top of the number row: ! above 1 ♰ “cross” character above 2 + above 3 absence of a # sign inclusion of quotes ‘ and ’You can see the entire layout below (prior to cleaning): The MT/SR keyboardThis would be considered an unusual layout, except that it actually matches the standard Composer layout! It makes sense that the layouts would match, since one station is meant to be used with the other (see part 2 for a discussion of the output station). The Composer keyboard layoutThe tape consoleIt is easy to open the tape console: push a flat spring on the right side, then lift the rear top cover, and then the front top cover. They pivot on hinges and nicely stay open. Note the typically disintegrating foam on the top cover. First opening of the top of the tape consoleFrom there, you can remove the two side panels, as well as the front panel. This gives full access to the inside of the console. You see, on the right side of the console, the plastic bin that holds the tape as it is fed into the machine. Indeed, there is no pick-up spool for the magnetic tape: it just accumulates in that bin until the tape is rewound. The tape console with 3 panels removedThe top part, like for the MT/ST, contains the tape drive, including: motor gears, etc. the single tape station on the right front panel switchesThe front panel includes the following: Indicators ERROR ON READY Record/Type toggle switch I believe that this allows you to toggle the machine between two modes: Record: the machine is in record mode, and will write to tape. Type: the machine works as a regular typewriter, without writing to tape. Buttons LINE RETURN: it is unclear how different this is from the regular RETURN key on the typewriter. LOAD: for loading the tape (see below). UNLOAD: for unloading the tape (see below). The tape console front panelThe console is way larger than it needs to be, but it is clear that IBM just reused the full MT/ST console hardware, which needed much more space for its large relay bank. Similarly, the console’s front panel is way too large for the few buttons and indicators it contains. On the MT/ST II and IV, which have two large dials, many more buttons, and a double-digit indicator, it makes more sense.Inside, we have a small-ish power supply, with fuses and, interestingly, two power outlets: The tape console power supplyWith the front panel removed, you can easily pivot the electronics panel, and look inside. It contains a backplane, partially wire-wrapped, and a small number of cards. The tape console electronicsThe electronics connect to the tape reader, the control panel, and the typewriter via the large “umbilical cord”.The small power supply and electronics cage explains why the tape console appears mostly empty if you peek inside.We should note that, while the system is write-to-tape-only, there is a limited way to edit with the “Backspace” key: while this would not erase on paper (the IBM Selectric II was not released yet), doing so would back up the tape by one character. This is a very limited form of editing, but it is there, and allows fixing at least basic typos when entering text.The deskUnlike the Magnetic Tape Selectric Composer desk, which contains electronics, this desk is just a piece of furniture, with the electronics in the MT console.The desk is in very good condition. It features 3 metal drawers, which can lock with a key (which was present)! The I/O typewriter in its deskI couldn’t help cleaning and polishing the keys right away: The desk keysThe typewriter fits into a recess in the desk. A rubber ring seals the typewriter so that it fits snugly. But the typewriter actually mostly rests on a base underneath the desk top.The cable, for both data and power, nicely routes out of the desk to the tape console unit, which includes the power supply and electronics in addition to the tape drive. This gives the system a very clean look, with just one visible cable going from the desk to the tape console, and then one power cable going from an outlet to the tape console.Temporary conclusionIn this post, I placed the IBM MT/SC in its context, described its various parts at a high level, and covered the input station in more details. In the next part, I cover the output station, and more. See The IBM Magnetic Tape Selectric Composer - Part 2.References Photo albums IBM Selectric MT/SR 655 (196x) - Part 1 IBM Selectric Modified Composer (196x) - Part 1 IBM MT/ST Recorder Model V (1965) - Part 1 IBM MT/SC Composer (1969) - Part 1 MT/ST Composer/Recorder - Restoration in progress TWDB 1969 IBM Selectric Recorder 1969 IBM Selectric Composer 1969 IBM Magnetic Tape Selectric Recorder 1969 IBM Magnetic Tape Selectric Composer See also Typewriter bucket list. &#8617; See: The IBM Memory Typewriter Restoring an IBM Memory Typewriter - Part 1 Restoring an IBM Memory Typewriter - Part 2 Restoring an IBM Electronic Selectric Composer - Part 1 &#8617; See also Restoring an IBM Electronic Selectric Composer - Part 1. &#8617; &#8617;2 Needless to say, if you know of any other surviving MT/SC, please let me know! &#8617; The typewriter business was made into a separate division, the Office Products Division, in 1964. &#8617; " }, { "title": "Restoring a Yost 20 Typewriter", "url": "/posts/restoring-yost-20/", "categories": "Typewriters", "tags": "", "date": "2024-06-29 06:13:00 -0700", "snippet": " Spoiler: The restored Yost 20IntroductionA few years ago, I bought a Yost 20 typewriter in Switzerland (serial number KM00370). The brand is named after George Washington Newton Yost, a charact...", "content": " Spoiler: The restored Yost 20IntroductionA few years ago, I bought a Yost 20 typewriter in Switzerland (serial number KM00370). The brand is named after George Washington Newton Yost, a character who was instrumental in getting the first commercially successful typewriter to market: indeed, he participated in the meeting that convinced Remington to manufacture the Sholes and Glidden “Type-Writer”. Yost went on, eventually, to create his own brand of typewriters.The first Yost typewriters were understrike, blind typewriters. They are known for: their “grasshopper” action the guide that allows centering the type on the paper the use of an ink pad instead of a ribbon the use of a double keyboard (without a shift key)The guide, in particular, was an important improvement to address an issue with machines like the Remington and the Caligraph, where the typebars could get out of alignment as the machine was used.The “grasshopper” action is called such in reference to the unusual way the typebars move: they rest on the ink pad, then move down, and then up through the guide towards the platen. See this video for a demo on a Yost 4.The later Yost models (number 15 and 20) differ from the earlier machines: they are more modern front-strike machines and use a shift key. But they still preserve some major features of the earlier machines: a variation of the grasshopper mechanism a variation of the centering guide the ink padOn the 15 and 20, the typebars still rest on an ink pad. The modified “grasshopper” movement takes the types out towards the user, then forward again towards the platen through the centering guide. The guide is no longer a simple square as it was on the upstrike models, but rectangular to accommodate the types that contain two characters. The Yost 20 grasshopper mechanism mid-courseThe Yost Model 20 is the last Yost typewriter model. I don’t know if it is particularly rare, but it is certainly uncommon. When I added it to TWDB, it was the first entry of this model (soon after, someone added another entry).My instanceThe Yost 20 I bought was in great condition. It came with a beautiful base with slots for the four (now hardened) rubber feet. Here is one of the first pictures of it I took. The Yost 20 as I got itSome parts were almost attractively dusty. Decades of dustI shipped the machine to myself from Switzerland in two parts: first the machine and its separated carriage (the base travelled in a suitcase), and its cover in a separate shipment (see A tale of typewriter shipping and A typewriter shipping update). The Yost 20 coverAs I covered in one of my posts about shipping typewriters, one of the top panels suffered from scratches in transit (which was entirely my fault). You can see the damage on this picture, as well as the small paint loss and corrosion and generally dull original aspect of the panel. Shipping damageThis machine was made in Bridgeport, Connecticut, USA, as the decals at the back of the machine proudly state. The back decalsCleaning and restorationI started the cleaning following the usual method: removing all panels and other accessory parts blowing compressed air cleaning the inside with mineral spiritsI then polished the outside body of the machine, cleaned and polished the keyboard’s key caps and rings. The key tops are not made of glass, but, I think, of celluloid. Glass keytops can generally cleaned with steel wool, but steel wool would scratch celluloid tops. I just used instead Q-tips with Meguiar’s polish. The keytops still have some marks, and the metal rings are not as shiny as they could be, but it’s an improvement and I wanted to be careful. Three keytops are darker and browner than the rest: 3/* ù/% =/!I really don’t mind. They keyboard turned out beautiful. Close-up on cleaned keysI also removed the tab keys for cleaning. I tried to remove the underlying panel, but it seemed like other parts were attached to it and that it would be trouble to go further. So I cleaned it in place, which is not exactly ideal but got me most of the way. The tab keys holes and underlying panelI considered repainting the scratched top panels, but then decided to postpone that to a later time. I used a punch to flatten the deep dent a little, then polished the paint a little, did a few minor touch-ups, and then applied wax. It’s not new-looking, but I think it is acceptable and it makes the statement that it had history. The restored top right panelI applied the same process to the top left panel and the back panel. While the picture doesn’t show this well, there are still scratches and imperfections but all in all they look quite good. The top panelsShellacking the front decalThe decals in general are in excellent condition for the machine’s age: front, back, and paper table.However, the front panel’s paint and decal were very matte, and had signs of yellowing outside the decal. Everyone who has dealt with a Royal 5 (in particular) might know a case of this illness: the paint appears dirty and uneven with some yellow, grainy stuff around the decals. You cannot clean over decals too much: the golden color will go away to reveal silver, and eventually you will destroy the decals completely.But I had heard that that yellow stuff, on some machines at least, was shellac: that the decals were originally applied and then shellacked. For some reason, on the Royal 5 in particular, the shellac had a tendency over time to dry and become apparent and grainy.In any case, I started cleaning delicately the front panel, and then tried to apply some wax on one of the areas without the decal. But the result was bad: the wax only highlighted that non-uniform, grainy, yellow stuff. The following picture doesn’t quite show how bad it was. Yellowed, uneven front panel finishI had heard that one way to deal with the problem was to apply new shellac over and around the decals. In fact, I had had in mind to try this for a long time, on a Royal 5 as well as on an Underwood. So this was a great opportunity to finally try this, and I ordered shellac flakes and alcohol after reading and watching a bunch of videos on the topic. Shellac flakes and alcoholI dissolved the flakes to make my own “2 lb cut” shellac solution. Dissolved shellac flakesI tried applying mineral spirits to remove the wax I had partially applied. I don’t know if it had much effect, but it is supposed to dissolve it.I tried shellac first on a sanded 2x4 piece of wood, to get a feel for the product. In articles and videos, shellac is always applied to fairly large and flat wooden objects. Practicing on woodThen I went over the front panel. I started on the black part, then just went for it. After a couple coats, however, I noticed that the appearance was very uneven. First, scary coats of shellacI decided to keep adding coats, over several days, and then to wet sand down with 600 grit sandpaper. I wanted to have some degree of certainty that I wouldn’t start sanding the decals. I encountered only one issue, which was as I rubbed shellac with my applicator a little too hard over the raw decal at some point, and I removed a tiny bit of the golden color in a couple of spots. This is visible on the picture above. So later, I went even more carefully over the decal. As coats add up, this is quickly not a concern.After sanding, further shellac applications become smoother, as we can see here. A smoother surfaceI kept doing this over a couple of weeks, with a few rounds of sanding, to try to get the surface smooth, without holes. The following shows the result after a round of sanding. We can still see some low spots. Just after a round of sandingAt some point, I established that this was good enough. I just did a last coat of shellac, and let things settle and dry for a few days. The finish evened out pretty well. After one of the last coatsI remain worried about the toughness of the finish: at some point, after I thought the shellac was dry and hard, I pressed a little firmly on the front, and my fingers left imprints that wouldn’t go away. After that, I resanded and recoated. I am letting the shellac cure for a long time now before touching it, to increase the chances that this won’t happen again. But in any case, there is no real need to touch the front panel in regular dealing with the machine. I was careful not to touch the front when reinstalling the panel. The front panel after shellacThe result is quite shiny. There is no visible yellow grain. The slightly silvery spots that I damaged are almost not visible anymore, thanks to the added yellow color of the shellac. There are a couple dust spots visible, if you look: perfection is not of this world. But the good thing about shellac is that you could sand the top again a little, and apply more shellac - or just do that without sanding. The alcohol dissolves the shellac, so you can always add new coats.I consider myself satisfied with the result. The front panel after shellacI haven’t applied the same process to the paper table, which looks matte but ok. I suppose it could be done, and look awesome, or not. There is some slight risk, so for now I am leaving the paper table as is.Cleaning the carriageI had removed and disassembled the carriage for shipping. There is a carriage base, which slides on the carriage rails, with intermediary carriers with bearings. Carriage partsOn top, there is a removable carriage top, which just slides upward and out.I removed the platen and I cleaned everything (air, mineral spirits, wire brush). I polished the shiny parts. Shiny partsThen I reassembled the carriage. But I found an issue: it was very hard to rotate the platen, and paper wouldn’t feed. I then realized that two arms that hold the front feed rollers were not clearing properly. I tried to bend those arms a little, and that addressed the problem. The rollers arms need to clearThis is the reassembled top carriage. The reassembled top carriageCleaning the insideThe inside of the machine was black with dirt and oxydation. I cleaned with mineral spirits, but also used a wire brush. Interestingly, the metal showed or took a little yellow tint after that. I don’t know if that will stay or just oxidize again. I don’t think these parts were originally blued. The mostly cleaned insideAs of now, this looks pretty cool. Cleaned metal partsThe bell is not very visible, unlike with some other machines like the Underwood, but it looks better now. The cleaned bellThe ink padIn all Yost machines, the types, when not on their way to strike the paper and back, rest on an ink pad that has to be regularly re-inked.I took out the ink pad and support in the process of cleaning. The pad is made of three separate layers. The ink pad and supportI put everything back, and used, well, ink pad ink to re-ink the existing felt-like material. It took a while for absorption to work. It does seem to work to some extent, but there is no doubt that the material is old.Someone, in a forum, had pointed out that there is a lever to raise all typebars. At first I didn’t find it, as the lever was recessed, on the right-side of the machine, but eventually I did! Using this lever is necessary to properly re-ink the pad without making a total mess. The raised typebarsThe spring drum handleThe spring drum handle was loose. I am lucky I didn’t lose the part, as it was missing some kind of pin to attach it to the drum. I temporarily installed a part made of a paperclip. It seems to do the job but a larger diameter would be better and provide tighter clearance. The paperclip fixThe keyboard of the Yost 20The keyboard is a Swiss-French QWERTZ keyboard: it allows you to write French, but could also work for German. It is quite beautiful: The Yost 20 keyboardThe labels on the keys are in French “Majuscules” (Shift) “Majuscules Fixes” (Shift Lock) “Relâche de la marge” (Margin Release)One exception is the “Back Space” key that keeps it original English label. The left side of the Yost 20 keyboardThe following accented characters are available: é è ç à ùThose all pertain to French.In addition, a dead key includes: ^ ¨These two accents are also used in French (see “être”, “Noël”, etc.). Interestingly, numbers require shift, while the symbols are directly available.Conclusion and further workThis has been a little more work than I had initially expected, due to the whole shellacking process. But I learned a lot. I think the machine looks quite good now. Please check the photo album linked below for more pictures. The restored Yost 20 The restored Yost 20 front decal The restored Yost 20 keyboard The restored Yost 20 from the topThere are a few remaining tasks: I haven’t yet processed the base. It is in good condition, but needs cleaning. I will consider whether light sanding and shellac would be a good idea. The platen is rock-hard and uneven. It is not a particularly nice color or style, so I might yet replace it. The feed rollers would need replacing as well. The feet would definitely need replacing. However I don’t know if anyone has made compatible feet at this time. I need to try to rotate back the “M” key ;) Finally, I plan to include a typeface sample and video of machine in action.References Photo albums Yost 20 (191x) - Restoration in progress Yost 20 (191x) - Restored Yost 20 (191x) - Part 1 Yost 20 (191x) - Packing and shipping Related posts A tale of typewriter shipping A typewriter shipping update External references My Yost 20 gallery on the typewriter database (TWDB) Antikey Chop page on Yost 1895 Yost 4 demonstrating the grasshopper mechanism " }, { "title": "Restoring an IBM Electronic Selectric Composer - Part 1", "url": "/posts/restoring-ibm-electronic-selectric-composer-1/", "categories": "Typewriters", "tags": "", "date": "2024-03-28 17:30:00 -0700", "snippet": "IntroductionIn 2021, I wrote about my IBM Memory Typewriter project. See the following posts: The IBM Memory Typewriter Restoring an IBM Memory Typewriter - Part 1 Restoring an IBM Memory Typewr...", "content": "IntroductionIn 2021, I wrote about my IBM Memory Typewriter project. See the following posts: The IBM Memory Typewriter Restoring an IBM Memory Typewriter - Part 1 Restoring an IBM Memory Typewriter - Part 2As of March 2024, I haven’t yet completed the Memory Typewriter project. However, in 2023 I bought an IBM Electronic Selectric Composer! And just because it was new-to-me and exciting, and because I am more comfortable dealing with these machines compared to when I first got the Memory Typewriter, I decided to start working on it. The IBM Electronic Selectric Composer as I got itThe Electronic Selectric Composer is very similar to the Memory Typewriter. The following table illustrates how the machine fits into the lineup of IBM machines of the era: Machine Memory Separate Console Storage Announced Proportional System Selectric None No None 1961 No ball Mag Tape Selectric (MT/ST) None Yes Tape 1964 No ball Selectric Composer None No None Sep 1966 Yes ball Mag Tape Selectric Composer (MT/SC) None1 Yes Tape Sep 1966 Yes ball Model D Executive None No None 1967 Yes typebar Model D None No None 1967 No typebar Mag Card (MC/ST) None Yes Card Oct 1969 No ball Selectric II None No None Sep 1971 No ball Mag Card Executive None Yes Card Apr 1972 Yes ball Mag Card II 8K Yes Card Apr 1973 No ball Memory Typewriter (MT) 4K No Tape loop Apr 1974 No ball Electronic Selectric Composer (ESC) 8K No None Jan 1975 Yes ball Mag Card/A 6K Yes Card Sep 1975 No ball Mag Card Selectric Composer (MC/SC) 8K Yes Card 1977? Yes ball The main differences with the IBM Memory Typewriter are: more memory (8K vs 4K) no internal or external storage (no built-in tape loop, no external card drive) proportional spacing (or proportional “lettering”, as mentioned in a 1972 Mag Card Executive ad) ability to justify textThe last two features are, in fact, the whole point of the machine: the IBM Electronic Selectric Composer is, from the user’s point of view, an upgraded version of the IBM Selectric Composer from 1966, recognizable to its dials and justification indicator:2 The original 1966 Selectric ComposerCompare with the 1975 Electronic Composer, which looks more like a regular, although particularly wide, electric typewriter: The 1975 Electronic ComposerThe earlier Composer was entirely electromechanical, and required the user to write each line twice to obtain justification. The newer machine, having an electronic memory, allows the user to write each line only once, and then to simply replay the page to justify text. Both machines feature proportional spacing.3The market for the Composer (older and newer model) was that of cold typesetting. In fact these machines took a large part of the market from VariTyper.4ShippingI am grateful that the seller spent time packing the machine into a huge wooden box. The final package weighed 97 lbs, while the Electronic Composer itself weighs 59.2 lbs (26.8 kg)! However, the machine arrived with some damage: the three push switches on the left, as well as two toggle switches broke. Machine afer arrival Broken switchesSeeing this worried me, of course. The machine was delivered to me upside down, and while that, in itself, doesn’t fully explain the problem, I suppose that these switches are fairly fragile. Indeed, they were broken also on my Memory Typewriter 100 (which I haven’t worked on at all yet). Another Electronic Composer I saw on Reddit had two broken switches as well. Broken switches on the Memory Typewriter 100The good news is that I took some detailed pictures and did a first round of evaluation of the machine, and I didn’t find any other obvious damage. Another good news is that insurance paid for some of the damage!DatingThe first Electronic Selectric Composer came to the market in 1975. Although this machine has a couple of cable labels with the date 1975, the date on the power supply (PSU) states clearly “May 24 1978”. Unless that part was replaced, that probably sets the date of manufacturing of the machine to 1978. I also found a date of 1974 on the internal metal frame of the machine, but that is part of the metal casting. This part might be identical to the 1974 Memory Typewriter’s, and it could make sense that it was designed that year, but it doesn’t indicate a production date. So at this point I am going with 1978 as production date. The date on the PSUType elementUnfortunately, this machine came only with one type element (“golf ball”). Those are not compatible with the regular Selectric type elements. However they are compatible with the original Composer elements. IBM had a whole catalog of type elements for the Composer. I’d love to find more of those, especially if the machine ends up working. 5The element I have states “PR-11-M”. The type elementThis is what it means: Text Meaning PR Press Roman typeface 11 11 point M Medium weight The red arrow generally means 11/12 pt size.Initial rough cleaningHow does one get started on such a machine? The good news is that I already have some experience with two similar machines: the Memory Typewriter and the Mag Card/A.6 Neither of these machines work yet, but I have studied them and partly disassembled, cleaned, and started fixing them. I read parts of the service manuals, I know the general architecture of the machines, and I have a good idea of how they work. So I have some confidence about how to tackle them. This said, I am not a professional Selectric service person, very far from it, and if there are any issues with the Selectric parts proper, I have to ask for advice.The first thing to do with those machines is to take lots of pictures. You want to document the condition of the machine was before you do anything to it (partly to make sure you didn’t break more stuff!). It’s hard to commit this kind of things to memory, and it’s so easy to take pictures nowadays!The second thing to do is a general evaluation: is anything missing or broken? How much cleaning will be needed? Obviously machines can get dusty and dirty, and have all sort of things getting into them. But with these IBM machines specifically, there are two things to be aware of: IBM put in sound deadening material that, in absolutely every single case, disintegrates in ways that are not very pleasant. It’s the lucky case if it disintegrates and remains dry, but in many cases, it’s a gooey stuff. So all of that needs to be removed first, so you can avoid dealing with it when you actually work on other aspects of the machine. Crumbling foam Many typewriters don’t need much oil or grease, but Selectrics were lubricated with both. The problem with grease is that it can harden over time, and it will cause the machine to stop working. For this reason, many regular Selectrics don’t work when you find them. You don’t want to just turn on an old dirty machine without thinking. It is wise to do some cleaning first, then turn it on for a short period of time to see if anything is moving.In this case, after removing the top cover, I noticed that, as was the case for my Memory Typewriter, the two screws that hold the machine to its hinge on the left were missing. In this case, though, they were at the bottom of the case, and I was able to just screw them back. This is important so that the machine can be lifted on its stand. The hinge screwsThen I scraped the sound-deadening material, and I cleaned the machine with a vacuum cleaner and compressed air (making sure not to vacuum or blow away small parts). ScrapingThis is not the end of it, however, with a lot of dirt remaining in the machine, a lot of it some of that disintegrated material. Foam debris on everythingWhile cleaning, I found a few loose parts: bits of the broken switches a magnet, which I established was part of the end of tape sensor a spring, whose original location I think I determined later a wire, which is the “No Print” lever wire (thanks experts online!) The \"No Print\" lever wireAfter that, I disconnected the capacitor and the planar (electronics board). The disconnected capacitor Beautiful shift register memory on the planarI tried to quickly power on the machine. There are two power switches on this machine: one (broken) on the top left, and a toggle power switch, like on regular Selectrics, on the right.Turning on both, the power supply fan started running, and the motor also ran! Good news, although not too surprising, as Selectric motors are fairly robust!CapacitorIt’s very obvious, opening the machine’s cover, that there is a huge capacitor on the right! The capacitorIn fact, it is marked as follows: Warning! High Voltage Storage Capacitor Unplug machine from outlet and wait 30 seconds before disconnecting or reconnecting this capacitor from the power supply.I guessed that this capacitor was present to give the machine a chance to power the machine for a while in case of a power outage or the user inadvertently turning off the machine. I think that I was correct, based on a comment I found on YouTube as well as on a discussion thread on Facebook. The feature doesn’t appear to be documented in the manual, however.I wanted to know the specs of this capacitor, so I took it out of the machine. But the capacitor was stuck in that white housing. I couldn’t get it out at first, and didn’t want to destroy the housing or puncture the capacitor, which might contain PCBs.Sleeping on it, I finally managed to open it, as follows: I removed the yellow sticker with a plastic blade I drilled a hole at the top of the housing, carefully, so that air could come in from the top I used penetrating oil from the other side to loosen the capacitorFinally, I was able to get the capacitor out of the housing. The capacitor out of its housingIt is a Mallory 5200 µF polarized capacitor, and it is rated at 200 volts. It is beautiful in its silver casing, but those things do not tend to last forever. If the machine ends up working, I will probably plug in a new capacitor.I measured the voltage from the power supply going to the capacitor (with the capacitor disconnected), and it was 167 V. I also measured the resistor, also disconnected, and normally installed in parallel with the capacitor, at 161 KΩ. The resistor mounted on the capacitorPower supplyThis machine, like the other IBM electronic machines (but unlike the plain Selectric) has a sophisticated power supply (PSU). Again, it would be unwise to just turn everything on and hope for the best! If it’s dead or faulty, you want to know beforehand. This is partly why I initially disconnected the planar.This PSU appears to be almost the same as if not identical to the one in the IBM memory typewriters. It outputs a whole series of voltages for the electronics. It also has a separate connector for the machine’s AC motor.I measured all the voltages of the power supply against the service manual, as I did for the Memory Typewriter. I found that the voltages were all in range! Voltages as specified and measuredI also opened the PSU to clean it. The PSU boardInitial mechanical workThe carrier was stuck to the left. I managed to move it by running the motor, and activating the leadscrew solenoid by hand. Then I did some cleaning with mineral spirit.However, I noticed that the tilt tape fell off its wheel. The tilt tapeI asked advice about how to fix that as I don’t want to break the tape. I started by cleaning up a very dirty Selectric II that I had, so I could play with its tilt tape a little. I managed to go through the procedure, which consists in: rotating the type element (or rather the post holding it) by hand, which loosens the tape using a spring hook, I managed to grab and pull the tape, to get a feel for itI then did the same on the Electronic Composer, and I managed to get the tape back on the wheel. However, I noticed that, after manually triggering the cycle clutch solenoid a few times, the tape fell off the wheel again. I put it back again but this might have to be investigated further, although it hasn’t happened since then.The broken toggle switchesAs mentioned initially, the machine has a few broken switches: three push switches on the left, as well as two toggle switches.I have a parts Selectric II which I figured I might be able to use to steal the toggle switches from, if the toggles were compatible. And indeed they are! The replacements are not the correct color, and in addition the Composer’s On/Off switch has an extra marking in the middle which the replacement doesn’t have. But mechanically, they are identical. This will work for now.I took out the switches from the parts machine and cleaned them up. Cleaning the replacement switchesRemoving the broken part was easy: remove two C-clips, and wiggle the bottom part out. I checked that the button was fiting. Fitting the partPutting the parts back was a little harder and I had to unscrew the metal plate holding all the switches to gain some clearance. Getting clearanceThe switch is now in place. The switch in placeYou can see how the tab CLR/SET toggle works: there is a permanent magnet on the metal arm, and when pressing the toggle causes it to swing past one of the two reed switches, which can then detect the action. Unlike with most typewriters, here even the tab positions are set electronically. I find this very neat! I put a drop of grease on the sliding area. The tab CLR/SET toggle of the ComposerHere is what’s left of the tab CLR/SET switch assembly in the donor Selectric II. The same area of the parts machineThe power switch was even easier to change, as there was no clearance issue and just one C-clip. Here the toggle is mechanically connected to the actual power switch in the machine, like on regular Selectrics. The new power switch in the ComposerI haven’t attempted to fix the other switches yet.The transmit blockOut of curiosity, I removed the transmit block, which is made of two parts: a PCB with 7 reed switches and 18 resistors a purely mechanical part with the magnets, which slide as the keyboard is pressedAs I suspected, both parts needed cleaning. Transmit block PCB Dirty transmit block magnets assemblyThe bottom of the keyboard is full of grease with dirt. That will need serious cleaning. Grease and dirt under the keyboardHere are the clean parts: Clean transmit block bottom Clean transmit block topThe sliders move easily. Sliding the magnetsI put this back in place, but I might have to remove it again when cleaning the keyboard. I noticed small cracks in the plastic so I’ll have to be careful. It might be a good idea to reinforce the plastic with some glue or epoxy.More cleaning of the bottom caseI managed to peel off the front adhesive, which was annoyingly sticky to the touch. It took a little while. The bottom is now clean enough I think. The bottom caseCleaning under the keyboardI removed again the transmit block, and I also removed the block with the solenoids so I could do proper cleaning. To do so is a little harder than the transmit block: disconnected power cable removed cable ties disconnected 2 wires disconnected 1 wire on the connection block finally, remove the 2 screws Disconnecting the power cableThe block remains connected, but can be moved a little to the side so that cleaning is possible.I asked online about whether the bails should be regreased. The answers were split: some say, as the IBM service manuals mention, that you should grease the “filter shaft flutes”, ahd lightly grease the bails where they contact the interposers. But there shouldn’t be too much grease.There is where I should mention a dumb mistake: I put a gloved finger near the operational shaft while it was running. The glove got caught and the machine stopped abruptly. I turned off the power immediately. I was able to remove the glove by cutting it out, but I was lucky: although the carriage return had stopped working, I managed to figure out quickly how to fix it (there was a slightly bent part). Morality: don’t put your (gloved) fingers near moving parts!Left switch assemblyI decide to have a look at the left switch assembly, which is the one with the broken push switches. I removed the assembly, which is held by two screws. The assembly is connected to the machine by 4 wires. The left switch assemblyFigured out that the switches could be opened by bending metal. Here is the neat result of the full disassembly: The left switch assembly disassembledSwitches: 2 2-positions switches custom switches each has a pair of sliding metal contacts power switch 2-positions moves what looks like a stock switch The 3 buttons have their stems broken in a very similar way. The plastic is just fragile. Now the question is how to fix them. Just gluing or expoxying will not suffice. It is imperative to reinforce the stems, probably with metal. The springs are strong. Possibility: drill very small hole in the center, insert epoxied or superglued small metal part. Have to disable the springs while this sets.Making the carrier move smoothlyAs mentioned above, I managed to activate the leadscrew, however it was a little sluggish in some spots. I cleaned more, and used steel wool to remove possible irregularities on the shaft. It might have helped, but I am not entirely sure. This might have to be revisited.Powering the electronicsI reconnected the planar, with the hope that the electronics would show some sign of life! The planar reinstalledWhen I manually triggered the shift magnet, I could space, hit carriage return, and use the tab function. The tab stopped the leadscrew when hitting the rightmost position! I managed to type some characters, and the escapement moved, although not always reliably. Eventually, though, it stopped working entirely, and I couldn’t get the shift cam up anymore.However, I discovered that if I turned the motor off and then on again, I could get the machine into a semi-operable state. There were still some issues though, like some letters decoding or printing wrong. Additionally, the on/off light turned off after a while, which is unexpected, but it didn’t seem to affect the rest of the machine; I would expect it to stay on all the time.Then, I found out what was causing the problem! I noticed that the Shift Feedback Switch board was askew, and the shift arm was pushing or touching it when in uppercase mode. Straightening it out didn’t help, but then I noticed that the Shift Feedback Switch reed switch glass was actually broken! The broken reed switchLuckily, the Memory Typewriter contains the exact same part, intact, so I borrowed it. After replacing it, I found that I could shift more reliably. However, there are still some issues lingering. Spacing still rotates the ball, and some letters continue to print incorrectly.Troubleshooting the electronicsI took note of most misprinting letters: Letter typed Letter printed e j y ; or y u o or u p q ] f h w or h l 7 ? shift activated z g 6 6 or 0 - a = no action I analyzed the issue using the “Selectric composer font chart”. The chartThe issue seemed to be with rotation only. I concluded that the issue was with R5. “The negative 5 rotate latch rotates the typehead five units in the clockwise or negative direction”. So R5 was activated in cases it shouldn’t be!I tried the following: disconnecting R5 from the transmit block (no change) removing the transmit block PCB and putting it back (still no change) measured the resistors: 1.25 kΩ/1.58 kΩ (one to +8.5V +12V, one to GND) checked the movement of the magnets, which seemed ok measured the voltage of R1, R2, R5 at rest on the transmit block: result: 8.5 V in all cases, which seems rightSo at this point, I am a little stuck. I need to check further that R5 link.Temporary conclusionI have made some progress: determined that the machine was in pretty good shape after all; did the initial cleaning; determined that the motor and PSU work; fixed two broken toggle switches; documented the capacitor; checked that some electromechanical functions work, by activating the relays by hand; put back the planar for a test of the electronics; determined that there was a broken reed switch and replaced it; established that there is life in the electronics; but found an issue related to the R5 signal.The next steps include: figuring out the issue with R5; fixing the remaining broken switches; greasing/oiling some moving parts; fixing and putting back the acoustical hood and paper rest.The first one of these issues is, of course, major, but there is hope.Here is the belly of the machine as of March 2024: The machine as of March 2024See alsoFull photo albums: IBM Electronic Selectric Composer (1978) - Part 1 IBM Electronic Selectric Composer (1978) - Restoration in progressThe ongoing work on the Memory Typewriter: The IBM Memory Typewriter Restoring an IBM Memory Typewriter - Part 1 Restoring an IBM Memory Typewriter - Part 2On the typewriter database (TWDB): 1978 IBM Electronic Selectric Composer 1969 IBM Selectric Composer 1969 IBM Magnetic Tape Selectric Composer I learned recently that the MT/SC has core memory as part of its electronics! However, it is internal memory for the microprogram, escapement tables, registers, and buffers for running the justification algorithm, not text memory that is accessible by the user. &#8617; I have since obtained an electromechanical composer as part of an MT/SC system! &#8617; Between the original Selectric Composer and the Electronic Composer, IBM introduced the Magnetic Tape Selectric Composer, which combined a slightly modified Selectric Composer, a large tape drive console, and electronics integrated within a desk. This combination removed the need for typing each line twice to obtain justification, but it required a lot of hardware, including a dedicated recording station. &#8617; VariTyper is a company and line of machines I plan to write about separately. &#8617; I have since obtained, with another machine, 18 more elements. However, I am still interested in finding more Composer type elements. &#8617; The Mag Card/A is another machine that I must write about separately as well! &#8617; " }, { "title": "Restoring a TeleVideo TS-800A Terminal", "url": "/posts/televideo-800a-terminal/", "categories": "Technology", "tags": "", "date": "2023-10-04 08:00:00 -0700", "snippet": "IntroductionConcurrently with my work on the 1979 TeleVideo TVI-912, I acquired a TeleVideo TS-800A. The terminal in its gloryThe full name of the device is “TeleVideo TS 800A Satellite User Sta...", "content": "IntroductionConcurrently with my work on the 1979 TeleVideo TVI-912, I acquired a TeleVideo TS-800A. The terminal in its gloryThe full name of the device is “TeleVideo TS 800A Satellite User Station”. In the early 1980s, TeleVideo started building CP/M computers. Some were standalone, but the 800A has the particularity of having no local drives: neither hard drives, nor floppy drives. Instead, the 800A downloads its OS over an RS-422 port, which can go up to 10 MBit/s (although I don’t know how fast the 800A actually supports 1). This, therefore, requires a central TeleVideo system to download the OS as well as access remote drives and printers. Other models did come with floppy and other local drives.From the manual: The TS 800A is a tabletop computer that contains: A Z80A microprocessor 64K of RAM memory A 4K EPROM for diagnostics An integral terminal with the capabilities of a Model 950 The microprocessor within the TS 800A will be referred to as the internal processor. All I/O ports operate through this internal processor, enabling you to use all standard CP/M function commands. The integral terminal has a nonglare, tiltable screen and detached Selectric-style keyboard for optimum user comfort. Deluxe terminal features such as special graphics, protected fields, visual attributes, and programmable function keys provide additional flexibility.Unsurprisingly, the terminal itself is more sophisticated than the TVI-912 (which was TeleVideo’s first model). For example, it has a status bar at the bottom, and allows switching from green on black to black on green. The above describes it as compatible with the TeleVideo 950.Since using the machine as a computer requires figuring out an undocumented protocol,2 in the short term I will only care about using it as a terminal, even though getting the CP/M part to work would be really cool!Initial conditionI bought the terminal online, which was a gamble, but it arrived mostly cosmetically intact. The seller said that the terminal should turn on and show something on screen, but when I tried doing so, nothing happened on screen. The terminal did emit a satisfactory beep, indicative of a good main board, however. My first worry was that something dramatic might have happened to the CRT during shipping, but the tube filament was lighting up. There was also a worrying rattling noise inside when moving the machine around!I started by taking “before” pictures. The terminal as I got itThere was a sticker on top: The stickerThe top case was not properly set (or got dislodged during shipping): The top caseThere was a historical, but ugly, marking on the side of the keyboard: The markingDatingThe terminal was probably manufactured in 1983, as the inside of the case is stamped 1983.1.22 (or 1983.11.22?): Date stampThe manual I found online is dated 1982.Getting startedOpening the terminal is easy, with 4 large screws under the machine. The power supply board and the video control board look almost identical to the TVI-912’s. But here the CRT and the boards are attached to a pretty nice and sturdy metal frame inside the machine. It’s really pretty cool looking! Here is a picture I took later in the process, after removing the main board: The metal frameI quickly found that the rattling noise was caused by 2 loose screws inside the case. I don’t know where those should go, if anywhere, but I was relieved to see that the sound was not caused by something more serious.You can slide out the main board only after removing the screws that hold the frame to the bottom of the case, and lifting the frame a little. You’d think that this wouldn’t be necessary, but I couldn’t see any other way to slide the board out.I took some detailed pictures of the main board (and realized after looking at them that I should have done some more cleaning of the board and chips before). You can see all of them here, but here are some highlights. The main board at an angleOne interesting part is that you can see a Z80A CPU (made in Italy): The Z80A CPUAs well as the MOS 6502: The MOS 6502 CPUThe Z80 is clearly for the CP/M computer, while the 6502 is handling the terminal. In the TVI-912, there was an Intel microcontroller instead of a full-fledged CPU: specifically, a 8035, which is an 8048-family MCU that doesn’t have on-chip ROM/EPROM, but uses external ROM/EPROM instead.The back of the board has connectors for RS-422, the keyboard, a printer, and RS-232. The connectorsCleaning and initial testingI did some basic cleaning, and then connected the main board again. The main board connectedTo my surprise and happiness, when I turned on the machine, the screen turned on! The cause of the initial malfunction might have been a loose connector inside, who knows. I performed the keyboard combination to start the self test, and it passed, showing the characters with all the modes! Unlike with the TVI-912, where you need to short two pins on the keyboard side to start the test, here you activate it with the keyboard: SHIFT-SET-UP followed by 1. The self testFor the sake of it, I desoldered and tested the non-polarized capacitor of the video board, as that capacitor was dead in my TVI-912. However, it measured fine here so I just put it back.Keyboard and caseUnlike the TVI-912, where the keyboard is integrated in the terminal (following the example of the older ADM terminals in particular), here it is separate from the main body of the machine (following the VT-100, in particular, which this terminal resembles a lot). The keyboard contains an 8048 microcontroller, here branded NEC JAPAN, not Intel. The 8048As expected, the keyboard was filthy inside. Dust and dirtI removed the top and bottom case of the keyboard to clean the parts properly. This entailed also removing the speaker and cable. Bottom of the case Cleaning of the case topThe switches look identical to the TVI-912’s. Unlike with the TVI-912, I didn’t desolder the keyboard switches. I did remove most of the keytops, however, although a few were stuck and, since I didn’t want to break them, I left them in place and cleaned them in place. The keytops mostly goneBut I cleaned most of the keytops with Simple Green and water. The keytops cleanedI put back the keytops. Putting back the keytopsThe keyboard looked much better after that process. The keytops back onThe keyboard completely cleaned: The keyboard cleanedThe keyboard and the top case have signs of yellowing. I am not sure if retrobriting would work, but to be fair, it’s pretty good as it is.I also used Hoppe’s #9 to remove the marking on the side of the keyboard. It worked really well!I cleaned the case using detergent and water. I removed the sticker using Goo Gone and a plastic scraper, and used Hoppe’s #9 to remove a few marks.I completely removed the metal frame so I could clean the bottom of the case.I also cleaned the power supply board a litle, as well as the main board.ConnectingI checked the DIP switches settings by comparing them to the description in the manual. I also configured the display to be green on black instead of black on green as it was initially (either on purpose or by mistake). I then performed the self test again. The result of the self testI also connected the terminal to my computer with the same adapter that I had used for my TVI-912. The adapterResultYou can check the entire photo album, but here are a few pictures of the cleaned terminal. Here is the side of the keyboard where the marking was: Almost perfectly clean keyboard sideThis is a really good-looking terminal if you ask me: The terminal, cleanedAnd here from another angle: The terminal, cleanedFurther workThe terminal appears to work really well, but as always, there are possible next steps.My kids say that the monitor makes a high-pitch noise, which I can’t hear! Old ears… I should try to record the sound and check its frequency. What could it be, however? An old capacitor?UPDATE 2023-10-07: I did a measurement of the ambient noise, and there is indeed a very clear peak (inaudible for me!) at around 16.2 kHz when the terminal is turned on. I used my Blue Yeti connected to my iPhone (as I couldn’t see that peak using the internal iPhone microphone) and an app called Spectrum. A 16.2 kHz peakIn addition, the screen takes a while to stabilize. Some image instabilityLike for the TVI-912, I’d like to play a little more with the terminal, like using it with BASIC or WordStar on the Altair-Duino.It would of course be interesting to dig into the computer function, with all the work that this entails. Pat Finnegan has done a lot of work on this, and there is even source code on GitHub.See also TS-800A pictures TeleVideo TS-800A (1983) - Restored TeleVideo TS-800A (1983) - Main board TeleVideo TS-800A (1983) - Restoration in progress TeleVideo TS-800A (1983) - Part 1 TVI-912 posts The TeleVideo TVI-912 terminal - Part 1 The TeleVideo TVI-912 terminal - Part 2 The TeleVideo TVI-912 terminal - Part 3 This article seems to indicate that the transmit clock is 800 KHz. &#8617; It appears that Pat Finnegan managed to reverse-engineer the protocol and load an OS on similar TeleVideo machines. See this videos TeleVideo: Systems No One Cares About, Brought Into the 21st Century | Vcfmw 2019 and TeleVideo Rises Again: Recreating a Lost Machine | Vcfmw 16 (2021), as well as the following blow posts: TeleVideo Systems Part V - MmmOST Introduction, TeleVideo Systems Part VI - MmmOST Protocols, and TeleVideo Systems Part VII - Almmmost replacement for MmmOST. &#8617; " }, { "title": "The TeleVideo TVI-912 terminal - Part 3", "url": "/posts/televideo-912-terminal-3/", "categories": "Technology", "tags": "", "date": "2023-07-27 17:10:00 -0700", "snippet": "BackgroundSee also: The TeleVideo TVI-912 terminal - Part 1, where I gather background information about the TeleVideo TVI-912 terminal, as well as my initial cleaning and testing of the terminal ...", "content": "BackgroundSee also: The TeleVideo TVI-912 terminal - Part 1, where I gather background information about the TeleVideo TVI-912 terminal, as well as my initial cleaning and testing of the terminal The TeleVideo TVI-912 terminal - Part 2, where I fix the video control board and memory and manage to ge the terminal workingRAM IC socketsThe next thing I wanted to do was to replace the memory chips’ sockets. For some reason, these chips show the most signs of corrosion. Now I could have left things as they were, but figured installing new sockets would be a neat upgrade. So I proceeded to do just that, opting for machined sockets.I figured, while I was at it, that I would also replace the unused 4 extra sockets. Those are designed to hold a second screen page. This was an optional feature, and these sockets were unpopulated on my machine. But if I ever wanted to try the upgrade, new sockets would be good here.Desoldering was a little painful. The good part is that the sockets easily come apart in the process, and I had to just pull out the pins one by one. Desoldering in progressOnly one of the sockets was black, while the other seven were white, and there were traces of flux under that specific socket on the bottom of the board. I suspect that this socket had already been replaced in the past. LeftoversAfter desoldering, I cleaned the board with distilled vinegar and then alcohol - the former to try to remove some of the corrosion on the top. Cleaning the boardThe board looks quite good after this. After cleaningThe process of soldering the new sockets was quick and easy. New sockets!However, while putting back the memory chips, the pin of one of the original ones broke. The pins show a lot of corrosion, with plating peeling off. I am keeping that chip for now as a spare, as it could be fixed if needed, but I put in one of my 3 “new” spare chips in the machine. Broken pinThe ICs in their new sockets look pretty good! Quite radCRTI originally didn’t have to take out the CRT. But since I had removed that spring for derusting, I had to put it back, and it was hard to do so correctly with the CRT attached to the top case. So I had done it quickly but not perfectly, and I wanted to come back to it to properly secure the spring.So I removed the CRT from the case, which is easy with to nuts at the top. I did this after, again, discharging the anode, and this time I definitely had a nice “pop” (or “zap”). The CRT outside of the caseThis also allowed me to properly cleaning the glass. The front of the CRTI reattached the spring correctly. Spring fasteningFinally, I put the CRT back. CRT back in placeKeyboardThe last big part to handle was the keyboard. It worked, at least in part, but it was dirty.The keyboard is made of a PCB, individually-soldered switches, and a large metal plate - like modern “mechanical” keyboards. In the video series on YouTube already mentioned, the author removes all keycaps with a keycap puller, and then desolders all switches for in-depth cleaning! I gave that a quick try removing the keycaps with a keycap puller. Trying keycap removalInspired that video, I proceeded to: Remove all keycaps Desolder all switchesRemoving the keycaps went ok, except that I ended up breaking the inside of two of them. That part appears fragile and I went a little hard or too quickly. You can see the sticky dust underneath. Dirty keyboardFor desoldering, I used my hand solder pump. This made the process longer and more painful than with an electric pump, but it worked. In order to pull out the switches from the plate individually, you have to push the two side tabs. I devised a little helper for that. An extra handI struggled a little with some individual switches and I had to reapply heat. In general, you don’t want to apply too much heat to components, including switches, so I tried to be careful. While desolderingThe PCB was dirty underneath the switches. More dirtI then cleaned the PCB entirely with soapy water, then distilled vinegar (to lightly remove corrosion), and finally alcohol to remove old flux. The PCB looked pretty good after that. After cleaningThe PCB bears the date of 12-78, which points to December 1978. December 1978I also cleaned all the switches. Pile of dirty switchesI didn’t want to immerse them, so I cleaned each of them by hand with a damp microfiber cloth. They look pretty good after cleaning. Clean switchesI measured a few of the switches, but not all of them. Of course, in retrospect I should have tested all of them, see below!Then I started resoldering the switches. Getting startedI kept only two switches in their original position: the space bar switch, and the caps lock switch, which happened to be black. I tried to do a good job soldering. Soldered switchesOnce done, I proceeded to test the keyboard. Alas, some keys didn’t work! I identified two problems: The ribbon cable was faulty and caused some of the issues. Playing a little with the cable solved that, but it would be worth replacing the cable and/or connectors. Some switches still didn’t work after that. I desoldered two of them, measured them, and indeed they didn’t work even out of the PCB!I don’t know why those switches didn’t work: I should have systematically measured them before desoldering them, but that was too late for that. In addition, I didn’t put the switches back necessarily to their original location. I figured I had little to lose and applied contact cleaner inside. I doesn’t look like you can disassemble those switches, so I let the cleaner seep through on the side of the switches’ stem. Luckily, after activating the switches a bunch of times they eventually started working!They might have been bad in the first place, possibly due to corrosion or dust inside, or the heat I applied for desoldering and soldering might have caused the problem, I don’t know. I am just glad that they work now. I identified two more switches with issues and applied contact cleaner in place without desoldering. I don’t think things are perfect but the keyboard works well enough now. Debugging the keyboardFinally, I got all keys working, although I think that the “3” on the numeric pad is a little sluggish, and 2 switches produce two characters if you press the key down very slowly. More cleaning might help with that, who knows. TypingNow I had to tackle the broken keytops. Two were damaged while removing them, and a third one was damaged while I was debugging the keyboard.I first tried superglue. But as soon as I pressed the key on the stem, it broke again. So I resolved to use JB Weld Clear, and to fill the space inside the keytop around the round part. Surely this will hold until the end of times! So I did just that. JB Weld ClearThe main issue was to remove leftover superglue from the inside of the cross. I ended up using an X-Acto knife to do that. It eventually worked and I was able to press the keytops down onto their stems.Now, honestly, I can’t say whether it was wise or not to embark on that whole desoldering/resoldering process. I considered cleaning underneath the keys a necessity, but there might have been other ways. This was just the clearest way to proceed. But in any case, I should have measured and tested all the switches beforehand as well as after desoldering, to understand better whether my process caused new issues with the switches or not.StickersThe TVI-912 has metal “stickers” in the back to label the DIP switches and buttons. When I got this terminal, one of them was peeling off, and two of them had fallen off, but they had been neatly packed in a ziploc bag, and so I had them. Some of the \"stickers\"I cleaned all of them with Goo-Gone, and scraped off the peeling laminate. CleaningFinally I glued them back. Back in placeMisc stuffCleaned schematicsI produced a colorized and slightly cleaned version of the 5 pages of schematics! I used the Super Resolution function of Pixelmator Pro before getting the documents printed. This smoothes the original black and white scans to a good degree. Page 2 of the beautiful schematicsOriginal manualI managed to buy an original manual to go alongside the terminal. The original manualThis is nice, even though, as discussed in my first post, there are already several scans of this manual available online. I might yet scan this one at high-resolution to add one more option.Restored terminalThe terminal looks very good now. Front viewI don’t get tired of the neat CRT chip. The CRT5027Here is a view of the fully open “clamshell”1 case.2 The clamshellThe iconic profile of the early TeleVideo terminals. ProfileThe teletype-style keyboard. Teletype-style keyboardNext stepsROMsThere are already ROM dumps online, but I’d like to dump my 3 ROMs for posterity and to compare. You never know, there can be some difference, including bug-fixes. If I do this, I might replace the ROM sockets, we’ll see. http://www.bitsavers.org/pdf/televideo/912/firmware/ http://www.peel.dk/Televideo_920/ https://www.planetemu.net/rom/mame-roms/tv910 (Model 910)It would be fun to reverse-engineer the firmware! I tried feeding the ROMs to a disassembler, and something comes out, but I am sure there would be a lot of work to do to make sense of it. Example of disassemblyCP/M and moreI’d like to play with the terminal with CP/M on the Altair-Duino, and also try to connect the terminal to my PiDP-11, another neat kit.I’d also like to play with software aspects. The manual describes how you can set the terminal to move the cursor, output inverse video, underline, etc. It’d be neat to explore the relatively limited capabilities of the TVI-912, directly or via terminfo/ncurses.Further workIt would be good to do the following: investigate why the 9600 bauds mode doesn’t seem to work fix or replace the keyboard’s ribbon cable consider light paint touch-ups on the case top, as there are chips consider making a cover for the back of the terminal, around the RS-232 connector, as I am pretty sure there must have been such a cover originallySee also The TeleVideo TVI-912 terminal - Part 1 The TeleVideo TVI-912 terminal - Part 2 Photo album: Televideo TVI-912 terminal (1979) - Part 1 Photo album: Televideo TVI-912 terminal (1979) - Part 2 Photo album: TeleVideo TVI-912 (1979) - Restored Update 2023-10-04: I have since learned that the design of the 912 was inspired, not to say copied, from that of the iconic Lear Siegler ADM terminals. &#8617; I noticed that the later TVI-910 has a much smaller main board, taking about half the size of the case. &#8617; " }, { "title": "The TeleVideo TVI-912 terminal - Part 2", "url": "/posts/televideo-912-terminal-2/", "categories": "Technology", "tags": "", "date": "2023-07-25 21:21:00 -0700", "snippet": "BackgroundSee also: The TeleVideo TVI-912 terminal - Part 1, where I gather background information about the TeleVideo TVI-912 terminal, as well as my initial cleaning and testing of the terminal ...", "content": "BackgroundSee also: The TeleVideo TVI-912 terminal - Part 1, where I gather background information about the TeleVideo TVI-912 terminal, as well as my initial cleaning and testing of the terminal The TeleVideo TVI-912 terminal - Part 3, where I complete the restoration of the terminalThe bottom line of the previous post: although the terminal did power on and beeped, showing that there was good life in the main control board, and the CRT also showed some signs of life, the terminal didn’t display anything.Video control boardI was advised to look at the video control board. It is located in the top case, on the right. To remove it, remove the connectors, as well as (carefully) the small board with a socket that connects to the CRT tube. Finally, I also removed the wire going to the CRT’s anode, protected by a rubber cup.I followed the common advice of discharging the CRT tube by shorting the anode to ground with a screwdriver connected with a wire to the tube’s frame. My CRT was probably already discharged, as I hadn’t turned it on in a while. In any case I didn’t hear any pop. The video control boardThe usual culprits could be the electrolytic capacitors. They didn’t look great here, but I was told that mostly what this is glue, not a leak. The capacitors on the power supply board clearly are held with some kind of glue, although the color is different on this board. Bi-polar capacitor and transistorThe Q302 transistor didn’t look that great either. Now, unsurprisingly, the datasheet for this C2233 transistor states “designed for use in TV horizontal deflection output applications”. Good! This part is no longer made, but there are some NOS transistors on eBay, in case a replacement is needed.I decided to remove the heat sink on which 3 transistors are screwed so I could clean around. Heat sink removedI then removed the larger capacitors. Interestingly, one of the larger capacitors is a bi-polar electrolytic. The other two are polarized, as is the case of most electrolytic capacitors. I ordered replacements for all three. The 3 electrolytic capacitors to replaceI desoldered the C2233. I don’t have a transistor tester, but I quickly tested it with my multimeter’s diode tester. I am getting 0.5 V between base and emitter as well as base and collector in one direction, while I am getting nothing the other way. So the transistor was not entirely bust (in fact it was still good). Capacitors and transistor removedFirst run of the self testWhile waiting for the replacement caps, I checked the manual, which describes the self test feature: connect the DB-25 connector’s pins 2 and 3 short a jumper next to the keyboard connectorThe terminal will run the self test, and then beep when done. The screen should show a pattern of characters. I had the video board disconnected when doing this, so couldn’t see the result, but the terminal beeped after a few seconds which was encouraging! Connecting pins 2 and 3 of the DB-25 RSR-232 connectorSince I had the terminal in loopback mode, I tried CTRL-G again, and this time it worked!Bottom case and derustingThe bottom case was full of dust and dirt. I removed the keyboard, control board to clean it in depth. The bottom case, still dirtyI also removed the transformer to clean underneath it. Cleaning in progress, with the transformer unscrewedThere was rust on the washers of the transformer, and I Evapo-Rusted that, as well as the screws, and the 110/220 screw on the bottom, as well as the metal bolts for the hinges. Evapo-RustThe CRT spring also got the Evapo-Rust treatment. More Evapo-RustThe hardware looks better after derusting. Derusted hardwareAnd so does the spring. Derusted spring back in placeI also cleaned the glass of the CRT tube. Clean glassThis is a view of the terminal during cleaning. Work in progressRemoving the main control board allowed me to see the bottom of it. It has a solder mask, unlike the top! Bottom of the main control boardIt’s a beautiful board, without any trace of damage, by virtue of being on the bottom and well protected from dust. Notice the four yellow bodge wires. Bodg wiresThe transformer is quite heavy at 2.147 kg (4.73 lbs)! Weighing the transformerCleaning the top caseThe top case got light Simple Green treatment. It is made of some kind of plastic, like the bottom case, but it is painted. The sticker in the back went away easily with Goo Gone. Removing stickersThere were ink stains, and other stains, on the paint, and most of it went away with patient application of Hoppe’s #9. Dissolving old ink stainsThere are still some stains, and for now they will remain, but it’s better than before. Much cleaner case topTrying the new capacitorsI soldered the 3 new capacitors on the video board. I was surprised at how small the new bi-polar electrolytic capacitor was! In any case, after putting things back together I turned on the terminal, with some angst. Curiously the first time the terminal beeped longer! I think I turned it off and then on, and then it showed something on the screen! The new capacitors had done the trick! Progress on the screenHowever, that was not the end of the story. While, something showed on screen, there was some corruption. The cursor moved, characters typed too, but incorrectly in some places. I found out that only one area of the screen was working correctly. Could it be that only one out of the four RAM chips worked? One area is workingI was advised in a forum that those RAM chips tended to fail, and that the sockets could also be bad. I took out the 4 RAM chips. The 4 TMS4045 memory chipsI put them back, but the problem persisted.Building a RAM testerI figured that I should test the RAM chips, but how? The principle is simple: iterate over the address range, write all 16 possible data values, read them back, and compare the values. You can, of course, do more sophisticated tests, but any write/read test will be good as a start. The chips are simple: 10 address lines 4 data lines chip select write enableI figured I would use a Raspberry Pi Pico (RP2040-based) as I have one at hand. Writing a simple C program to do that is pretty simple. The tester A memory chip being testedI calculated that the software simulation will be slower than the minimum timings of the RAM chips, but again, it’s ok for a basic test.I thought about a potential issue: the RAM chips are 5V chips, while the RP2040 is a 3.3V chip. However, it turns out that the RP2040 has some 5V tolerance, and so level shifting was probably not going to be needed. I took the risk.I wrote the program, then ran it very slowly just with LEDs and then disconnected the data LEDs and put one of the RAM chips. My test reported many failures! Then I put the other chips, and they all passed. I concluded that I had one failing chip, and 3 good ones (I had guessed the opposite). But I could not rule out other issues, like the sockets or something else. Passing RAM failing RAMI am quite happy that I was able to write a basic tester so easily (and I showed it off to friends too). I might write a ROM reader too later.Replacing the memory chipI ordered replacement chips on eBay. I picked the 9114 chips (AM9114DCP to be exact), supposed to be 100% compatible, as chips with the original markings were significantly more expensive. In this case, the chips came in a set of 4, which would give me some spares just in case.Once I got the memory chips, I tested one in my tester, and it passed. So I used it along with the other 3 original chips. The terminal worked! Success on screen!I ran the self test again and this time I could see the full test pattern on the screen! Result of the self testTalking to the Altair-DuinoNow that the terminal worked, I had to connect it to something. I wanted to try connecting it to my Altair-Duino first. If you don’t have an actual original Altair or a modern recreation, this is the next best thing: it’s a wonderfully-made kit.But first, RS-232 fun! The terminal has an old-style female DB-25 RS-232 connector. My Altair-Duino has a female DE-9 connector. I had to order a DB-25 to DE-9 adapter and a cable.The connection didn’t work at first. I went through the Altair-Duino configuration for the serial port, many times, but to no avail. I started having doubts that my serial port on the Altair-Duino was even selected or properly connected.I had also ordered a USB-to-serial adapter. In fact, I first ordered a Sabrent-branded one, but it turns out that it’s hell to make it work on the Mac, so I returned it and instead got an adapter with another chip which has built-in drivers on the Mac.I proceeded to connect my Mac, via CoolTerm, to the Altair-Duino, and it worked! So I now knew that my Altair-Duino serial port was working properly. 1Confident about the Altair-Duino side, I managed to connect the TVI-912 to the Altair-Duino: one issue was that it worked at 4800 bauds, while it didn’t work at 9600 bauds (the highest speed on this terminal). It would be good to figure out why at some point. First connection to the Altair-DuinoLoading BASIC on the Altair, I ran a test program. BASIC!Here is the test setup on the bench: TVI-912 and Altair-DuinoPower supplyEven though the terminal was now working, there were still a few steps. First, the power supply board. I started by taking it out again and cleaning it. The power supply board before cleaningThen I wanted to test the three large capacitors on that board. The larger capacitorsI decided to desolder them. Before desolderingIt wasn’t easy because the leads of the capacitors were bent down on the board, presumably for mechanical stability. While desolderingBut it eventually worked. After desolderingI started the process of reforming them. For the 16V capacitor, this was easy as I have my HP E3615A 20V power supply. The HP power supplyI followed the steps, starting at a low voltage and allowing at most about 2.5 mA, all the way to 16V in 1-2V steps. I definitely noticed that it took time for the current to come down to zero at each step, but after the process, much less time - which is exactly the idea of reforming electrolytic caps. Measuring the currentI followed the process as well for the 35V caps, but only up to the maximum voltage I could produce, that is, 20V.I didn’t have a working capacitance meter when I started this, so I didn’t measure the caps before. But I did after, and it turns out that the two large caps measure great, in fact they hold a little more than the 3300 μF they boast. The 4700 μF cap, on the other hand, was significantly below. It worked well enough, but I decided to replace that one. The new capacitor is a little smaller, but it fits in those holes. I’d have had trouble replacing the other two due to the layout of the holes, so it turned out well. The caps back in place, including the new 4700 μFI then replaced the power supply board in the machine.Next stepsThere are a few more steps to go through to consider the project complete, including: consider replacing some IC sockets cleaning the keyboardYou can read about this in The TeleVideo TVI-912 terminal - Part 3.See also The TeleVideo TVI-912 terminal - Part 1 The TeleVideo TVI-912 terminal - Part 3 Photo album: Televideo TVI-912 terminal (1979) - Part 1 Photo album: Televideo TVI-912 terminal (1979) - Part 2 Photo album: TeleVideo TVI-912 (1979) - Restored I had previously only connected my Altair-Duino directly to a VGA monitor and USB keyboard. This is a neat feature of the kit, which has this little optional board which emulates a VT-100 terminal. &#8617; " }, { "title": "The TeleVideo TVI-912 terminal - Part 1", "url": "/posts/televideo-912-terminal-1/", "categories": "Technology", "tags": "", "date": "2023-05-10 11:21:00 -0700", "snippet": "IntroductionI recently won a computer terminal at a local auction. I bid on it because I had been hoping to find a vintage computer terminal for a while, so I could connect it to my Altair-Duino or...", "content": "IntroductionI recently won a computer terminal at a local auction. I bid on it because I had been hoping to find a vintage computer terminal for a while, so I could connect it to my Altair-Duino or PiDP-11 kits. This one looked cool, I thought I would not win the auction, and then I did!1See also: The TeleVideo TVI-912 terminal - Part 2, where I fix the video control board and memory and manage to ge the terminal working The TeleVideo TVI-912 terminal - Part 3, where I complete the restoration of the terminal The terminal as I got itEsthetically, I find the terminal good-looking with its curved body. It’s very different from the iconic DEC VT100, which is of the same era, but there is nothing wrong with liking different styles.2This instance bears the marking “TeleVideo TVI-912”, which is of course the brand and model number. I didn’t know anything about TeleVideo terminals before this acquisition, but that changed quickly!BackgroundTeleVideo the companyWikipedia has a page about TeleVideo. The company was based in San Jose, California3, and made terminals until about 2011 when it definitely folded. It seems that the company was founded in 1975, although this reference mentions that “TeleVideo Systems, Inc. was born in March of 1979”. This other reference mentions 1975, while the official web site, which is only a leftover page, mentions “35 years in business” as of 2011, which points to a date closer to 1975 than 1979. It might be that the company started in 1975, but was renamed or reincorporated in the following years.Dating and pricing of the 912 modelThe TeleVideo TVI-912 was one of the first models made by the company. It came out in 1978 or 1979: This terminals wiki page mentions 1978 and supports this by referencing a Computerworld article announcing the device from September 4, 1978, which I cropped below: 1978 Computerworld article This vt100.net page mentions 1979. This page also mentions 1979: The TVI-912, introduced in 1979, the same year TeleVideo was founded, was one of TeleVideo’s earliest terminals, preceded only by the TVI-910. It supports a 96-character ASCII upper and lower case alphabet, displays 24 80-character lines on screen, and weighs in at 30 lbs. It supports 9 data rates on RS232 serial interfaces, ranging from 75 to 9600 baud (bits/second) with half-duplex and full-duplex conversation and block transfer modes. The manuals I found (see below) bear a copyright of 1979 at the earliest. The control board of my instance (see further below) shows a date of 1979 (2-79) as revision date. The control board also shows a copyright of 1978 for the ROMs.Based on the article referenced above it is certain that the device was announced in late 1978, but it might not have been really on the market until 1979.The price announced was $749, which translates into $3,580 in 2023. In other words this would be the price of a fairly high-end personal computer today, like a top of the line 16-inch Apple MacBook Pro.DocumentationThere is a lot of documentation about this terminal online. The following sections list what I found.TeleVideo Operators Reference Handbook (1979)This is for the following models: TVI-912B and TVI-920B TVI-912C and TVI-920CThis manual has 36 pages including covers, and a copyright date of 1979. You can find it on Archive.org.There are a couple of versions, if not more, of this manual. Operators Reference HandbookOperating instructions (1979)This is for the following models: Model 912 Model 920This has exactly the same table of contents as the previous manual, and is also dated 1979, but it has only 19 pages. I haven’t compared the content with the other manual in detail. Operating InstructionsTeleVideo Terminal Maintenance Training Manual (March 1983)This manual has 558 pages! To be fair, 98 of those pages are manufacturer spec sheets for components. This appears to cover all the terminal models up to the March 1983 date of publication: 910, 912, 920, 925, 950, and 970. It includes full schematics of the terminals! TeleVideo Terminal Maintenance Training ManualHere is one of the pages of the schematics for the 912, showing the microcontroller: First page of the schematics“The Value Leaders” marketing brochureThis is an 8-page marketing brochure, where we learn about some features of the terminals up to model 950, including some that requires digging intom including: “true block mode” “typewriter tabbing”Now this makes me want to find a 925 or 950 terminal! Look at these beauties! The Value Leaders Model 912/920 in the brochure“Compare Smarts. Compare Prices.” marketing brochureThis is a 6-page marketing brochure specifically about the 912 and 920 models. It is dated 1980. It has a lot of information about the terminals, including a comparison between the 912 and the 920 (variants B and C). Compare Smarts. Compare Prices.Other resourcesThere is a video series on YouTube, mostly about cleaning a working TeleVideo 912. In particular, the author completely disassembles the keyboard, including desoldering all the key switches for in-depth cleaning. I wouldn’t have considered going that far without seeing this video.Turning it onI took the risk of turning on the terminal. The good news is that it beeped right away! The bad news is that the screen only showed some indication of life over a vertical area in the middle of the screen. This told me that: maybe the control board was working, at least to some degree but the electronics controlling the CRT might have issuesLater, I also tried CTRL-G, which is the code for the “BEL” character, which is supposed to beep, but nothing happened. However, I think I might need to configure the RS-232 interface to loop back for that to have any chance to work.Can the terminal be fixed? That’s what I hope to figure out eventually.Opening it upI opened the terminal: two screws in the front unlock the top of the terminal, which then swivels on its hinges in the back.The CRT remains in the top case, with the terminal’s power supply on the left, and the video control board on the right. The CRT is braced by a rusty spring: The CRT springI took a look at the control board. It is a beautiful large board, but it looked very dirty, with signs of corrosion. The dirty main control boardHere is a close-up of the main video chip, before any cleaning: The main video chipI blew some air inside the case and on the board. I also did a first pass at cleaning the board with isopropyl alcohol. There was no change in behavior after that, unsurprisingly. But I took more detailed pictures of the terminal. Here is the terminal’s two parts: The open terminalHere is the back of the terminal. The RS-232 port is visible, as well as configuration DIP switches, a contrast button, the power button, and a fuse. I believe that there should be a cover over the connector area, and if so it is missing. Instances of the terminal could have a printer port as well, but this one doesn’t have it. Some of the labels had fallen off, but they were stored in a small ziploc bag attached to the terminal. The back of the terminalThe keyboard of this 912 terminal has 84 keys in the “teletype” layout. Documentation shows that there were two main layout options: “teletype” layout, for models “B” (912B) “typewriter” layout, for models “C” (912C) The \"teletype\" layout The \"typewriter\" layoutThese options might not have been available from the start. Indeed, my terminal doesn’t show a “B” or “C” suffix.Model 920 was identical to the 912 except that it had, in addition, function keys, edit keys, and transmission keys. It, too, came in a “B” or “C” version matching the “teletype” or “typewriter” layouts. The \"teletype\" keyboard of my 912The board looks nicer after a basic cleaning. The board after cleaningI recognized the video output and power supply input on the board. I disconnected both, and measured the voltage on the input connector, with values close to: -12 V +5 V +12 VThis means the power supply is in decent shape. Here is a picture of it, attached to the upper part of the case: The power supplyThe other side of the upper case consists of the video control board: The video control boardI note that the terminal’s serial number appears in multiple places, and it is consistent: 79061208. Can we infer from that series of digits a production date of June 1979? Or week 6 of 1979? It would make sense! Comparing with serial numbers of other similar terminals could help validating the format.The serial appears: on the back of the device on the CRT on the power supply on the video control boardThe main control boardAfter cleaning the board an the main ICs, I looked up the references of the main chips, and found the following (also confirmed by the schematics): Chip Description Intel 8035 8-bit MCU (microcontroller unit) SMC CRT5027 CRT Video Timer and Controller VTAC SMC COM2502 UART 2 × Intel 2111A 256 × 4 SRAM A3 2KB ROM (probably the character ROM) A49 4 KB ROM A50 ROM 4 × TMS4045 1 K × 4 SRAM So the terminal has 256 bytes of SRAM for the program, with 64 bytes of internal RAM as well in the 8035, for a total of 320 bytes of RAM. That’s not much to work with!UPDATE 2023-05-12: The ROMs have marking that could be dates: the PCB itself says © 1978 next to each of the two main ROMs ROM 13: “7849” which could be week 49 of 1978 (so December 1978) ROM A49: “7913” which could be week 13 of 1979 (late March 1979) ROM A50: “7908” which could be week 8 of 1979 (February 1979)UPDATE 2023-05-11: In addition, there are 4 × TMS4045 chips, mounted on sockets, for a total of 2 KB of SRAM for the display. This makes sense as 80 columns × 24 lines = 1920 characters, or just short of 2 KB. Another optional bank of 4 chips is available, but unpopulated on this board. This can add support for a second page, per the documentation.The rest of the chips consists mainly of 7400-series TTL chips. In the 1978 Computerworld article announcing the terminal, there was a claim that the terminal used “one-third the number of integrated circuit components of comparable terminals.” How many ICs were present in the VT100, for example?I annotated the picture of the board with what I found. The main board, with annotationsThe CRT chip, in particular, is quite beautiful, although it too shows signs of corrosion. On a couple of pictures I found online of the 912/920 board, the chip is a regular black plastic package. Here we have what is probably a ceramic package, with golden pins and a golden cover (but then how is it that it appears corroded?). This might be an earlier version of the chip. The CRT chipIt’s interesting that the terminal uses a fairly simple microcontroller. I thought it might have used a Z80 or similar microprocessor, but apparently a much simpler MCU was enough to drive the system. The DEC VT100, for comparison, used an Intel 8080 CPU. The Intel 8035 MCUReading up on the Intel MCS-48 family of microcontrollers, it turns out that these were often used in keyboards, including the original IBM PC keyboard (which, of course, came out after this terminal, in 1981). A Philips derivative was used in Philips’s first CD player, the CD-100. In short, this was a very popular microcontroller family.The 8035 is a ROM-less version of the microcontroller: there is no mask ROM or EPROM on the chip, and the ROM has to be external, as is clearly the case with the TeleVideo 912. An Intel manual is available (396 pages), dated July 1978: The Intel MCS-48 manualHere is a picture of the main ROMs and the UART: The ROMs and UARTI found that there are dumps of ROMs online, although I don’t know if they match my terminal exactly. It could be interesting to read and reverse-engineer the code! The third ROM (actually the first one, called A3) is a character ROM, I think - that is, a ROM containing the bitmaps (7x10, from the marketing brochures) of the characters that can be displayed on the screen.Next stepsThe goal is to figure out what’s wrong with the terminal. I think the next step consists in hooking up an oscilloscope and figure out what kind of signals we are getting at various points on the board, in particular the video output. This should allow us to determine, first, whether the issue is with the CRT board or the control board (it could be both!). I wouldn’t be surprised if the terminal has multiple issues given the corrosion that is visible.A quick scan of the service manual shows some troubleshooting procedures, and indicates that a particular transistor is responsible for the horizontal scan. That will be a place to probe.See also The TeleVideo TVI-912 terminal - Part 2 The TeleVideo TVI-912 terminal - Part 3 Photo album: Televideo TVI-912 terminal (1979) - Part 1 Photo album: Televideo TVI-912 terminal (1979) - Part 2 Photo album: TeleVideo TVI-912 (1979) - Restored To be fair, I was the only bider on this item. and it turned out that, with that terminal, came a CompuPro System 8/16, and that was a great surprise. But that’s story for later. &#8617; I’d love to find a VT100 for a reasonable price, although I am not particularly hopeful. &#8617; Although addresses in Sunnyvale and Santa Clara also appear in the documentation, indicating that the firm moved during its lifetime. &#8617; " }, { "title": "Yamaha Clavinova CLP-280 felt and rubber contacts replacement", "url": "/posts/fixing-yamaha-clavinova-clp-280-felt-contacts/", "categories": "Technology", "tags": "", "date": "2023-01-19 19:52:00 -0800", "snippet": "The symptomsRecently, I started feeling that the touch of our 15-year-old Yamaha Clavinova CLP-280 in the mid-range was different: the responsiveness of the keys was not good anymore, and different...", "content": "The symptomsRecently, I started feeling that the touch of our 15-year-old Yamaha Clavinova CLP-280 in the mid-range was different: the responsiveness of the keys was not good anymore, and different from the lower and higher ranges. In addition, a couple of keys occasionally made a clacking sound. The Yamaha Clavinova CLP-280Given what I know about the CLP-280, I figured that there might be two different things at play: The rubber membranes (“rubber contacts”) that I had observed in my first repair might have some wear. The felt that dampens the keys might have lost shape as well, explaining the clacking sound.The partsI was eager enough to try to fix the problem that I ordered a set of replacement membranes and replacement felt. I found the replacement parts on eBay as those are no longer sold by Yamaha. However, those are OEM parts. These parts appear to be generally for the GH3 (“Grade Hammer 3”) Yamaha keyboards, and are not specific to the CLP-280.I got a full set of membranes, as there are three different lengths: 1 × 5-key membrane to the left side of the keyboard (VCZ74400/VCZ7440) 6 × 12-key membranes in the middle (VCZ74300/VCZ7430) 1 × 11-key membrane to the right side of the keyboard (VCZ74500/VCZ7450) 5-key membrane 12-key membranes 11-key membraneThe felt is called “stopper” or “upstop felt” (V8468201). Label of the felt packageThe repairLike last time, I started by opening the top of the piano by removing the 3 screws in the back and removing the top cover. I could see the problem immediately: the felt had detached in the middle portion of the keyboard! Well, in retrospect, I should have done that step first! Inside of the pianoThe next step was to remove the keyboard from the piano, as I did last year. This is neither hard nor risky, although it is a little time-consuming. The piano without its keyboardIn this picture you can see where the felt detached from the rest of the keyboard. Wavy feltThe first task was to remove the old felt entirely. I didn’t think it was reasonable to try to glue it back, as one layer clearly had outlasted its life. The film with the glue was a little hard to remove from the plastic of the keyboard in places, but I used: a plastic razor blade scraper to remove the parts that stuck a hair dryer to soften the glue in the rest of the felt Plastic scraperThis went very smoothly.I then proceeded to remove the 3 PCBs (printed circuit boards) that are attached to the keyboard. I had to remove the screws that hold each PCB in place. The PCBs then easily come off the keyboard, and the rubber membranes will either stay stuck to them, or stay on the rest of the keyboard. I carefully took them out, blew compressed air on them to clean them, and numbered them before storing them away in the original plastic bag containing the replacement membranes, as I thought that the old ones might actually be quite ok, especially the ones that had less use (not in the middle of the keyboard).Putting them back is a little tricky, as you want them to fit perfectly in the slots in the keyboard before placing the PCBs on top of them and screwing them back, perfectly aligned. For this, I used the same method I did last time: I put the keyboard quasi vertically on its side, which let me position the membranes in place so they don’t fall, and then putting the PCBs back. Membranes installationI installed the felt without any problem. The glue was quite strong, to the point that if touches the plastic it might be almost impossible to get it out without damage. So proceed carefully!This done, I put the keyboard back in the piano, and then tested the keyboard. To my relief, the responsiveness of the keys was back to normal, and the clacking sound was gone (as I expected). I only had to put back the top of the piano.The resultThe keyboard now sounds like new. I am very happy with the result, and even though I might not actually have had to replace the membranes, doing so should extend the life of the keyboard, so it’s all good. You can hear the result here.MoreRead about my two previous repairs: Fixing a Yamaha Clavinova CLP-280 Fixing a Yamaha Clavinova CLP-280 pedal" }, { "title": "Fixing a Yamaha Clavinova CLP-280 pedal", "url": "/posts/fixing-yamaha-clavinova-clp-280-pedal/", "categories": "Technology", "tags": "", "date": "2022-11-14 23:15:00 -0800", "snippet": "The problemLast year, I fixed my Yamaha Clavinova CLP-280. But recently, I encountered a new problem: the damper pedal started working erratically. At first, I wasn’t sure it was a problem with the...", "content": "The problemLast year, I fixed my Yamaha Clavinova CLP-280. But recently, I encountered a new problem: the damper pedal started working erratically. At first, I wasn’t sure it was a problem with the piano: could it be that I was not pressing the pedal all the way? But after a while I became sure that it was actually an issue with the pedal. So of course, I decided to investigate. The Clavinova CLP-280PE keyboard with the potentiometerDiagnosticThe first thing to do was to look at the pedal mechanism. I laid the piano on its back (it’s heavy!). The piano on its backThis allowed me to remove the 8 screws that hold the pedal assembly. Top of the pedal assembly Bottom of the pedal assemblyIt is connected to the electronics with a cable attached with a connector. Cable and connectorTo my surprise, the damper pedal, unlike the other two pedals, is connected to a 10 kΩ potentiometer. The use of a potentiometer is so that the piano can simulate half pedaling. I hadn’t paid attention to that feature of the piano until now!Given the absence of any other obvious damage, I immediately suspected that the potentiometer must have gotten worn or dirty due to use. The damper pedal potentiometerI checked the availability of the part online: either just the potentiometer, or the potentiometer with its small PCB assembly. The good news is that similar parts are available on eBay. The bad news is that they are fairly expensive: with shipping, I ended up paying about $30. But I figured that it was worth trying, and I ordered the part.Replacing the partI disconnected the connector and removed the cable ties so I could handle the pedal assembly on my workbench.The new part appears to be an original Yamaha part. Both the new and old parts are 10 kΩ potentiometers of the ALPS brand, soldered to a small PCB. The old part indicates “607G”, while the new part indicates “645G”. I don’t know what those values mean.I loosened the nut holding the original potentiometer to its bracket, and also loosened the two screws holding the bracket in place. I then desoldered the small PCB from the larger PCB, and was able to take out the presumably failing part. New and old partsI then soldered the new part in place, which went smoothly, taking care of securing the parts properly. The new potentiometer assembly installedI plugged back the connector and after a quick test that things were working, I installed new cable ties, screwed back the pedal assembly and put the piano back to its vertical position.ConclusionLuckily, my original guess appears to have been correct, and the pedal now works well again! Had that not been the case, I might have tried ordering an entire pedal assembly, one of which was for sale for about $150. But I am glad I didn’t have to do that.So this is another happy repair story, and my CLP is still going strong!See alsoRead about my other CLP-280 repairs: Fixing a Yamaha Clavinova CLP-280 Yamaha Clavinova CLP-280 felt and rubber contacts replacement" }, { "title": "A typewriter shipping update", "url": "/posts/typewriter-shipping-update/", "categories": "Typewriters", "tags": "", "date": "2022-08-27 23:12:00 -0700", "snippet": "IntroductionIn a previous post, I covered the shipping of seven boxes of typewriters in 2021. This year, I shipped another three boxes. Here is my report on this new experience.The boxesBox 1The fi...", "content": "IntroductionIn a previous post, I covered the shipping of seven boxes of typewriters in 2021. This year, I shipped another three boxes. Here is my report on this new experience.The boxesBox 1The first box packed a Victor 3 typewriter from the 1910s. This machine was shipped within Switzerland first. It was crated, as I had asked the seller to use special care for packing (and to pay a little more for that), and it survived the local shipment perfectly. The Victor 3 just before shippingBecause this is not a typewriter one finds every day, I wanted to pack it particularly well. Learning from my 2021 experience, I didn’t use bubble wrap or packing peanuts. Instead, I mainly used styrofoam. 1I prepared the machine first by: removing the bulk of the carriage removing the return lever on the carriage, based on advice I receivedI then cut a 4 cm-thick styrofoam board to size and placed the machine on it, pushing down so the feet would sink into the styrofoam.I tied the carriage release levers to avoid any pressure on the escapement. Tying up the carriage releaseI packed all spaces inside the open-framed machine with crumbled newspaper so that nothing would move. This included underneath the keyboard. I also covered the machine with soft paper to protect the machine’s exterior from contact with the styrofoam.Then I added styrofoam boards and smaller blocks all over: sides, front, back, and over the keyboard. I finished with thick styrofoam boards above the whole machine, and placed all of that to fit snugly in the box. Inner box almost entirely packed upI had decided to double-box from the get go. I also followed what I did in the past for the Smith Premier 5, and built a frame, in the outer box, using plywood at the bottom and 4 posts screwed in the corners. On that base, I placed another 2 cm board of styrofoam. The frame in the outer boxThen I put the first box in, and padded the sides with more styrofoam. I had a few books I wanted to ship as well, so I padded them and placed them on two of the sides, sandwiched between styrofoam and the inner box. Box within a boxFinally, I screwed the top plywood board. Plywood topI reinforced all the outer box’s corners, and more, with reinforced tape. The reinforced package ready to shipBox 2Box 2 was a different challenge. Last year, I shipped my Yost 20. The nice but large typewriter base was packed in a suitcase that flew with us. But the machine’s cover was too large, and I couldn’t figure out how to ship it.This year, I decided to take care of it, but the challenge remained: how to find a box large enough? The store only had one box that was large enough: a special box designed to move clothing. It was way too tall, but the width and depth of the box were perfect. So I bought that, and proceeded to cut the extra parts of the box I didn’t need to shape my own box.Here again, I used a plywood base, 4 posts, and a lot of styrofoam.However, I didn’t want to just ship the cover as it’s obviously empty inside, and it weighs only about 7 lbs (just over 3 kg). So I filled the inner space with a portable typewriter (which didn’t have a case) and a Facit mechanical calculator.You might notice on the picture below that the typewriter is wrapped in bubble wrap, which I said I wouldn’t use. Laziness mostly accounts for this! I had already previously wrapped that machine, and I figured that the styrofoam below and above would be enough. In addition, the bubble wrap had already deflated to some degree. There was a risk that the bubble wrap would deflate fully and cause unwanted movement inside the big Yost cover, but it seemed fine, and I took the risk not to rewrap it. Piling up the two machinesI shaped the styrofoam to approximate the inner contours of the Yost 20 cover. The insideI protected the cover with paper, and filled the gaps with styrofoam. Filling the gapsHere again, I added a few books where there was space, and then packed everything tight. Full boxFinally, I screwed the top plywood board. I was getting the hang of this! Finishing the boxBox 3In box 3, I placed two portable typewriters, a Hermes 3000 cover, and some more books. I used plywood, but no posts, assuming the rigidity of the portables’ boxes would be sufficient. I know I said I wouldn’t use peanuts but I sprinkled a few leftover ones on top. The portables' boxHere are boxes 2 and 3 ready to go (with the exception so some more reinforcement tape added just after). Almost ready to shipThe resultBox 2Box 2 arrived after 20 days. It was in decent shape, much better than last year’s boxes. I suspect that the tape reinforcements really helped. Box 2 just after arrivalOne corner of the top plywood board had broken, without consequences. Broken cornerBut the contents of the box was in perfect condition, and that’s what matters!Box 3Box 3 arrived after 22 days. I noticed that the box was a little compressed. This is obviously the box without the wooden posts. Box 3 just after arrivalHere the top plywood board cracked. Cracked plywoodThe packing peanuts I had put inside proved useless again, in that they were completely flattened. Luckily, I hadn’t truly relied on them and here again, the contents were in perfect condition. I definitely won’t put any such packing peanuts next time.The fact that the box was evidently compressed, and the top plywood cracked, indicates that there was a lot of weight put on the box at some point, as well as other conditions that I don’t even want to think about. Next time, it might be a good idea to complete the inner frame with the 4 posts, as I did for the other two boxes. It’s actually just a few more minutes of work to cut and screw those in, and the material is inexpensive.Box 1If I had to choose one box to save among the three, that would have been the box containing the Victor typewriter! Yet while I had shipped it first, I received boxes 2 and 3, but the box containing the Victor was missing in action. The last tracking update I had was that it reached US customs on the East Coast. After that, weeks passed without any update.So I started worrying, and in fact, I lost some sleep over it. One reason I was particularly worried was that I realized after having shipped the box that, while it had all the customs papers affixed in a pouch, it didn’t have an actual shipping label! The post office didn’t tell me anything at the time, although they noticed the issue for the other two boxes, which did get shipping labels. But the first box was already gone by then.To my delight, I finally got a tracking update: the box would be finally delivered to me, after 35 days in transit! I suspect that the lack of label might have caused the additional delay. Luckily, the delivery address was in the customs papers, and there was an extra tracking barcode on the box. In any case, USPS figured it out. What a relief!The box wasn’t in bad shape at all! The Victor 3's boxI found the contents in perfect condition: the top and bottom plywood boards were in the best shape so far, and the inner box was pristine. Carefully pulling out the Victor 3The styrofoam and double-boxing had done their job! The cosy interior where the Victor 3 spent over a monthConclusionThe Victor 3 is now on the workbench, slowly getting cleaned and very lightly restored. The Victor 3 on the workbenchThe Yost 20 cover is safe, although I plan to leave it alone for now. The Yost 20 coverI think that I can claim 100% success in this year’s shipment! I am especially happy with the Victor 3, while at the same time the other two boxes travelled safely as well. This gives me confidence that, should I need to ship a particularly precious typewriter again, I will be able to do so.Shipping typewriters, even heavy standards, can be done safely. But you have to deeply care about the process, and you have to be ready to spend time and money. In this case, I spent hours packing, and I estimate that I spent about USD 40 in packing materials for each of the three boxes.I hope again that this will be helpful to others! I don’t really like styrofoam: it decomposes into small bits, is not biodegradable, and can cause harm in the environment. But it’s easy to find, affordable, and a great shock absorber. &#8617; " }, { "title": "A tale of typewriter shipping", "url": "/posts/typewriter-shipping/", "categories": "Typewriters", "tags": "", "date": "2022-04-19 22:57:00 -0700", "snippet": "IntroductionIn July 2021 I shipped 7 large boxes containing typewriters from Switzerland to the US. In total the boxes contained 15 typewriters: 12 portables in their cases 3 “antique” standards ...", "content": "IntroductionIn July 2021 I shipped 7 large boxes containing typewriters from Switzerland to the US. In total the boxes contained 15 typewriters: 12 portables in their cases 3 “antique” standards (large desktop machines) 6 of the 7 boxes ready to go (Hermes Baby for scale)The problemVintage typewriters, while robust when used for their intended purpose, are also fragile: cast iron frames can break, platen knobs can shatter, paper tables can bend, carriages can move and break escapement wheels, delicate paint and decals can scratch.Typewriters are typically heavy: a portable typewriter weighs typically around 15 lbs/7 kg, while a standard (desktop) will weigh up to 50 lbs/23 kg.1 If you have ever held in your hands one of these machines, imagine just dropping one from about 3 ft/1 m to the floor: it’s not hard to imagine catastrophic damage resulting from such a fall - and even more so if the machine doesn’t fall flat.I knew, for having seen lots of examples of destroyed typewriters in online forums, that they need to be really well protected, and that carriers are extremely rough when shipping boxes. It’s very clear that packing must be done with very special care and that the worst should be expected during transit including drops, throws, boxes stored and carried upside-down or sideways, boxes piled on top of each other, etc.The packingOriginally, typewriters were packed at the factory and shipped well protected in wooden crates. It would be inconvenient and very expensive to crate a regular typewriter for international shipping (although that might be needed in some rare cases). But the good news is that you don’t need to go to such extremes.I had (or thought I had) an idea of what to do based on forum posts and videos: use the right packaging materials make sure moving parts (in particular the carriage), well, cannot move don’t allow anything to move inside the box protect the machine on all sides double-box if possible assume the worst possible handling, including drops/throws, upside down boxesI found packing materials at a chain called Hornbach, which is essentially a clone of Home Depot (but with more packing supplies, apparently), including large cardboard boxes, packing tape and packing peanuts (more on these later). Some packing materialI also found polystyrene boards at a place called Coop Brico-Loisirs. Polystyrene boardsThe shape and size of the boxes was dictated by: the type of machines I wanted to ship the cost of shippingThe Swiss Post prices shipments for large boxes by increments of 5 kg. For standards, clearly only one could fit in a large box. For portables, 3 could fit. I reached the following split: 3 under 20 kg boxes for the 3 standards 4 under 25 kg boxes for the 12 portablesIt was possible to ship up to 30 kg in a box, but I didn’t have the need and the box would have to have been very sturdy to handle the extra weight.I realized that putting 20-25 kg of content in a single cardboard box would be a risky bet. The box would need some rigidity, I thought. I found out that you could order from Coop various materials cut to size online. So I got some plywood boards cut to the size of the bottom and top of the cardboard boxes. They would form a solid base onto which I would place packing material, and would also prevent damage coming from the top. Plywood basePortables got an extra treatment: I made sure all carriage locks were engaged, used packing tape to disengage carriages in a couple of cases, and to stabilize things. I put crumpled newspapers inside the cases to ensure that nothing would move inside. I also used packing tape to hold cases closed in case the locking mechanism failed.I built a sandwich in each cardboard box: plywood board foam board portable cases (vertically) more foam on the sides and packing peanuts to fill all voids plywood board on topI used extra tape to make sure the box would not open no matter what.The boxes I had chosen have handles, which I reinforced. I also made sure the handle holes were backed by cardboard.The standards worried me, as they didn’t have the extra protection afforded by the portables’ cases. For the Smith Premier 5, in particular, I built a frame within the box to ensure more rigidity. I modified the cardboard box to set it up on its side as I needed it wider rather than taller. Wooden frameThe inside got fully padded. Frame within its box with peanutsI added another polystyrene board to protect the side. Polystyrene boardWhen all that was done, I just shipped the boxes.Things that went wrongThe boxes’ trip to the US took between just over 3 weeks for the first one to just over 4 weeks for the last one to arrive. A long time was spent in customs according to the tracking. Remember, this was still in solid COVID-19 pandemic time. But all the boxes arrived, in an interestingly random order.When I saw the first box I was immediately worried. It arrived in worse condition than I had even expected! One box as it arrivedThe other boxes were not better. But the good news is that the machines arrived without catastrophic damage (no broken frames or other significant damage), even though there were issues. Among portables: Erika 11: I noticed a bent carriage release lever, which might have happened during transit. This was very minor and easy to fix and the machine now looks like new. S.I.M.: The left ribbon spool was bent. This happened because the spool cover was loose! This should be easy to fix. Torpedo: The case’s wooden board broke off in the front. The case was probably already weak or even damaged before shipping.So all in these were really minor things which possibly could have been prevented with some more immobilization inside the respective boxes, but maybe not even that.There were more serious issues with the standards: Yost 20: The machine got scratches on one of the top panels. I had packed the carriage separately in bubble wrap. The bubble wrap completely deflated, and the carriage rack scraped against the top panel, causing dents and scratches. This was completely preventable. Courier: I noticed a slightly bent wayrod. This large rod must have protruded a little too much, and pressure on the box got to it. Smith Premier 5: The machine got many dislodged rods. This is a pain as those are hard to put back. But I don’t think anything else bad happened. I suppose that vibrations/drops during transit caused that. Scratches on the Yost 20 The Smith Premier 5 got troubleSo while there was annoying damage here, hopefully it all can be fixed.Lessons learnedExamining the damage and condition of the packing material upon arrival, I conclude the following: Don’t use bubble wrap, which didn’t do its job and deflated in transit. Don’t use biodegradable packing peanuts, which flattened and didn’t regain their shape. Better protect parts so they can’t get in contact with each other. Better immobilize loose parts like spool covers. Definitely reinforce the boxes with strong packing tape as the cardboard will suffer. Probably keep using plywood as reinforcement, as I think that helped (although I cannot be certain).Next time, I plan to use polystyrene and/or polyethylene boards and possibly pool noodles. I might use a different type of peanuts if I find them. Double-boxing should really be considered for standards, but the difficulty is to find the right box sizes.ConclusionIt was risky to do a first large shipment all in one go without much experience. I think that overall I got lucky but my next shipments will be better. Most of the machines arrived in good condition, including this beautiful 1946 Hermes Media: 1946 Hermes Media after refurbishingAs well as this stylish 1954 Erika 11: 1954 Erika 11I hope this helps you if you plan to ship typewriters! Some machines are even heavier. For example my IBM Memory Typewriter weighs close to 58 lbs/26 kg, while the Remington Bookkeeping Machine Model-23 clocks in at 69 lbs/31 kg. &#8617; " }, { "title": "Fixing a Yamaha Clavinova CLP-280", "url": "/posts/fixing-yamaha-clavinova-clp-280/", "categories": "Technology", "tags": "", "date": "2021-11-07 05:15:00 -0800", "snippet": "The problemOver the last few months our Yamaha Clavinova CLP-280, which we bought around 2007, had developed issues: some keys, starting with A3, but then also G3, and then a couple of other keys, ...", "content": "The problemOver the last few months our Yamaha Clavinova CLP-280, which we bought around 2007, had developed issues: some keys, starting with A3, but then also G3, and then a couple of other keys, would sound at the maximum volume even when just pressed softly. Initially the issue would mostly go away after the first few minutes of the instrument being turned on. But more recently it started persisting, being more random, and essentially made the instrument unplayable. The Clavinova CLP-280PE (\"polished ebony\")DisclaimerIt’s common sense but probably has to be said:The Yamaha Clavinova is an electric device. Some parts inside are live with 110V. So make sure you disconnect the power cord before doing any work, and if you have to plug the piano while open don’t put your fingers in the wrong spots! It’s probably better to do this only if you have some experience with electric and electronic devices already. Also, if you put things back together incorrectly don’t blame me! You've been warnedTrying thingsI had already used compressed air between the keys, thinking it might dislodge dust or other debris that might cause the problem. But that didn’t seem to achieve any results.So I decided to have a look inside. I remembered that when I moved the piano once 11 years ago I had separated the top from the bottom, and I thought that might be a necessary prerequisite as I couldn’t see a way to open the top otherwise. Removing the entire top of the pianoBut it turned out not to be necessary! In fact, the top opens by removing 3 screws at the top from the back, and then sliding the top cover towards the front. Then you can remove the top cover and see inside. You have to disconnect 3 cables for speakers and microphones as well. I found out by chance and then a video confirmed that as well. Remove just the top coverI looked inside, cleaned with compressed air as things were a little dusty, but that didn’t do anything to fix the issues. I even found a dime resting on one of the speaker boards! But that wasn’t the cause of an actual issue either.In addition, while trying the piano again, I noticed that the A#3 key was moving too much laterally, and while doing so was making noise. It was the only key like this one the keyboard. Was this a new issue? Or maybe I hadn’t noticed it before? I still don’t know.Not that it matters but here you can see the main board. There are some Samsung as well as Yamaha chips. The main boardEven with the top removed I could only see the back of the keyboard and nothing obviously problematic there. I also couldn’t see an obvious way to go further, and I was almost ready to contact Yamaha service centers to see if fixing a 14-year-old digital piano was a possible thing. I put the piano back together.Going furtherBut then I found a couple of videos online about replacing Clavinova keys, including removing the entire keyboard, and that encouraged me to go further (as did my wife!). It seemed like it wouldn’t be that difficult after all since others had done it without too many issues along the way.So one day later I opened the piano again and did further disassembly: I removed the sliding keyboard cover. You do this by removing the 2 small covers on the rails on both sides. This allows lifting the back of the cover through. Then you rotate the cover a little so that it can come out of the rails. Opening in the rails I unscrewed the front panel which holds the buttons, LCD, and more. There are 4 metal supports, each with 2 screws. There is also a screw holding a cable which I removed, and one screw on each side of the piano. I also disconnected the connector on the left, leaving all the other ones connected. Then I just folded the panel towards the back, letting it rest on other elements. Front panel metal support screws I removed the two wooden blocks on each side of the keyboard. Each is kept in place with a single screw. The right-side block also holdes the power button. I am not sure that this step was strictly necessary. I removed the screws that hold the keyboard in the back. There are 9 main identical screws (I think) and 2 secondary wood screws. I disconnected the keyboard from the electronics. The keyboard connector is in the middle Once this is done you can push the keyboard a little towards the back and then lift it out of the piano! The piano without its keyboardThe keyboard’s electronicsI put the keyboard on the floor to examine its condition. I did find some dust, hair, and small debris there. Was that causing the issue? Possibly. Dust and debrisBut I decided to go even further and to remove the three connected electronic boards or PCBs (marked “L”, “M”, and “H”) that hold the sensors for each key. Those are towards the front of the keyboard, which makes sense as that’s where the keys have the most travel. The \"L\" (\"low\") PCBYou do this by flipping the keyboard on its back and removing all the screws, then pulling out the PCBs carefully. I also disconnected the connector going to the middle (“M”) board. I could see right away dust and debris. Dust and debris on top of the membrane More dust and… an insect?The keyboard membranes will come out as well but that’s ok. I was careful not to mix them up, touch them inside, or let them gather more dust. PCBs and the membranesThe keyboard parts that activate the membrane keys also had dust and some small debris. I vacuumed and used compressed air on everything. More dust and stuffHere is how the keyboard bottom looks with the boards removed. Bottom of the keyboardHere you can see how the membranes make contact with the PCB. All appeared clean, and so I didn’t even use my contact cleaner. Clean contactsBut I did dust with compressed air all the membranes, top and bottom, carefully.Removing and fixing keysI wanted to figure out why the A#3 was causing problems. One of the videos I watched mentioned that you couldn’t just take a black key out: you first had to remove the two white keys around it.I wasn’t sure whether the “knife” method, shown in a video, would work. But looking at the leftmost key of the keyboard it looked like it should: indeed, a black plastic tongue acts as a spring to hold the key in place. Here you can see more closely how the key is held in place in the back. The leftmost key's plastic spring/tongueAnd here how it’s held in place in the front (with some visible green grease). The leftmost key's frontNote that since this is the CLP-280, the body of the white keys is made of wood. This is a nice touch and one reason we bought this specific model back then. Wooden keyI removed the leftmost key by pushing the plastic tongue by hand, to get a feel for it. The key came out easily. The leftmost key removedFor the other white keys, push down carefully with a narrow blade such as a knife until you can pull the white key toward you. Once white keys are out, black keys between them can be pulled out as well. The \"knife\" methodSo I removed the 2 black keys and the white keys around them first. White and black keys removedThe reason I took out two black keys was so I could compare them. And I did notice a difference: the gray plastic part, that should stay on its post, was missing from its post. A differenceIt was stuck inside the key. The gray part withing the keySo I put it back and then the key behaved like the others.Putting the keys back is not hard: Hook the key to the metal spring. Pull toward the front. Guide the key to let it slide into the back and front slots.That’s it!Note that after that I noticed that one of the black keys wasn’t properly inserted and had some front-to-back movement which was causing noise. I took it back out and redid the steps and that fixed it.Now I had to put back the keyboard contacts. You don’t want to just lay them in and put the PCBs on top. I wanted to make sure they were positioned correctly. For this, I put the keyboard vertically (or almost) so that the keys were not in “down” position as that would make it harder to position the membranes. Use gravity! I placed all the membrane first. The membranes in positionThen I carefully inserted the PCBs, making sure they were ligned up. There are white marks that must match plastic slots. The PCBs in positionFinally, I put the screws back. One of the screws holding the PCBsDon’t forget the connector. The keyboard connectorReassembling the restOnce the keyboard was back together I gave it some more compressed air and placed it back in the piano cabinet. I connected it and turned on the piano: success! The loud keys problem didn’t occur and the A#3 key was perfect as well!So I put everything else back together: I screwed the left and right wooden blocks. The left wooden block I screwed the keyboard in its final position. The keyboard is back in place I reinstalled the front panel. I used the opportunity to clean the red felt alongside the keys from underneath with a lint roller. Cleaning the felt I put back all connectors. I put the keyboard cover back on its rails. Finally, I replaced the top cover. And voilà!ConclusionI am glad that this simple cleaning and fixing appears to have addressed the issues. While this is not a new digital piano, it’s a beautiful instrument in its “polished ebony” (“PE”) version. It would be a shame if it was inoperable.I must say that this digital piano is well-built and easy to service once you know the order in which to remove the assemblies. The main issue I see is the availability of parts: everything is custom and if Yamaha cannot provide a part, or if you can’t find it on eBay, you are probably stuck. Luckily in this case I didn’t need to replace any parts. The piano back in operationLet’s see if the issue is gone for good over the next few weeks and months.ResourcesHere are a couple of online videos that helped me with my repair: How to Remove and Clean Piano Keys in a Yamaha Clavinova How to repair a Yamaha Clavinova CLP 860 with a loud and/or silent key(I also found a couple of other videos that applied to older Clavinovas but they turned out not to be relevant to the CLP-280.)Finally, here are all the pictures I took during the process: Clavinova CLP-280 - Repair in progressSee alsoRead about my later CLP-280 repairs: Fixing a Yamaha Clavinova CLP-280 pedal Yamaha Clavinova CLP-280 felt and rubber contacts replacement" }, { "title": "Restoring an IBM Memory Typewriter - Part 2", "url": "/posts/restoring-ibm-memory-typewriter-2/", "categories": "Typewriters", "tags": "", "date": "2021-10-03 09:45:00 -0700", "snippet": "IntroductionI previously wrote about my IBM Memory Typewriter and the first installment about its cleaning and restoration. In this post, I describe the continuation of the cleaning of the machine....", "content": "IntroductionI previously wrote about my IBM Memory Typewriter and the first installment about its cleaning and restoration. In this post, I describe the continuation of the cleaning of the machine. This is still a work in progress as of October 2021.The ribbon mechanismThe ribbon mechanism was very dirty and at first I couldn’t remove the ribbon cartridge. FilthLuckily the service manual has detailed instruction about the ribbon mechansim and how things fit together. Ribbon mechanism removal instructionsStill, I had to pull out the cartridge in an unorthodox way! It turned out that the swing arm on the ribbon mechanism was the part causing problems. It was completely stuck. I decided to take everything apart for in-depth cleaning. Cleaning the ribbon mechanismThe parts came out really clean. The ribbon mechanism after cleaningUnlike the regular Selectric, this ribbon mechanism also has a a reed switch and magnet to detect the end of the ribbon! Here is what the manual says: The end of ribbon feature stops playout prior to the end of the ribbon. When the machine stops, the operator has the option of changing the ribbon at that time or resuming playout one line at a time until the copy is complete or the end of the ribbon is reached. When the end of ribbon mechanism is active, the machine will stop each time a carrier return is read. The end of ribbon mechanism incorporates a sensor which senses the amount of ribbon remaining on the supply spool inside the ribbon cartridge. Tue sensor operates through a slot in the bottom of the ribbon cartridge and is held down (inactive) by the unused ribbon on the supply spool. When the diameter of the ribbon on the supply spool falls below a certain point, the sensor will snap up into its active position. In this position, the lower extension of the sensor, which has a magnet attached to it, will rotate against a reed switch circuit board, causing the switch to close. With the switch closed, the machine will operate in the LINE mode and will stop whenever a carrier return code is read from the card.At first I thought that this was over-engineered, but in fact this makes sense for a machine that is able to print an entire page out of memory. The \"ribbon end\" reed switch and magnetThe type element had a broken tab, which is 100% certain to happen on elements with the metal hinge. I got it out following instructions in this video. Bookface Acad 72 10 CPI type elementI found the broken tab inside the carrier! Not that it helps, because you can’t really glue it back.More coversBelow the ribbon mechanism, things were pretty scary. GunkThere is a plastic accordion “print shaft cover” which I detached. AccordionThis part required cleaning. But I don’t know how good it’s going to look in the end. I might have to consider replacing it. Cleaning the accordionUnderneath, there are actual print shaft covers. Those are metal, unlike the plastic ones of some Selectrics! I removed those easily and cleaned them. Print shaft coversThe paper pan and feed rollers also got the same treatment. Paper pan and rollersI removed two more covers, including one for the fuses. More coversCleaning the mechanical partsI wondered whether I should disassemble more of the machine to clean it. I was advised to clean things in place. I put rags to absorb liquids just in case, as I really don’t want liquids to reach the planar, and I used mineral spirits and a toothbrush to loosen grime and grease. I used compressed air to get the stuff out. It’s a slow and tiresome process, which I did with a headlight to see what I was doing. Here is an example of what I have to deal with. GunkHalfway through the process, I tried the machine again. Things on the carrier appear to move much better.Cable bundlesI note some markings on cloth labels attached to cable bundles. First label:WHITEAKER CABLE CORP.ASSY. NO. 1466720E.C. NO. 582452DATE: 1974Second label:The 582785 number could also be 582765.WHITAKER CABLE CORP.ASSY. NO. 1466002E.C. NO. 582785DATE: 7-11-1974Third label:WHITEAKER CABLE CORP.ASSY. NO. 1466002E.C. NO. 582699DATE: 1974For one thing, this confirms the 1974 date! MarkingsThe planar and its supportI decided that I should remove and clean the planar even as I wasn’t done cleaning the rest of the machine. This provides better access for cleaning the machine. I wanted to make sure I didn’t damage it, for example by spraying solvents on it by accident. I wanted to clean it.Removing it is very easy. It was designed to be removed and swapped if anything goes wrong with it. Remove the connectors, a couple of screws, and that’s it! The planar removedThis clearly provides better access to the motor and other mechanical parts. The AC motor after removing the planarNow the planar is a thing of beauty. It is full of custom, unfortunately undocumented IBM chips. The planar would deserve its own post, but I’ll mention here that we identified the memory chips. It is pretty clear that these chips are shift-registers, and that each of those probably holds 4,000 (or maybe 4,096) bits of data. 7 chips provide 4,000 (or maybe 4,096) 7-bit characters or codes, which is the advertised memory capacity of the machine. The 7 memory chipsThe memory chips are all labeled as follows:2707872IBM 98CX253292011 I94Note that the IBM Electronic Composer, a machine in the same lineage is the IBM Memory Typewriter, and which boasts 8000 characters of memory, happens to have 14 such chips.The planar is attached to a polycarbonate (maybe?) back. It had some soundproofing or insulation, which was all crumbling. I removed what I could, but it left a hard residue. The planar backing and its ugly glue residueI removed the metal and plastic hardware. Parts from the top of the frameRemoving this residue was not easy. I didn’t want to damage the plastic. I tried various cleaners and solvents, including Simple Green and Goo Gone, which did nothing. In the end, I found that Hoppe’s #9 was slowly softening the residue. I could apply it, and, using a plastic blade, scrape it a little. ScrapingIt took many passes over the course of one week to finally get all of it out. If you look closely and with the right light you will still see some scratches, but overall it’s a beautiful part! The resultThe planar is attached to its support with brackets. BracketNote the air guide, which connects to the fan in the power supply, and which ensures that air reaches the planar. Air guideThe result is pretty neat. The assembly all cleanIn the following picture you can see the memory chips at the top. View including the shift-register chipsThe planar bears several numbers: “E 4290 006” on one end of the planar “075507” on the other end of the planar “018524” on the air guide (sticker) “1466300 D” and “1466405” on the support (stickers)I don’t know what they mean. Could some of the stickers be IBM service stickers?The transmit blockThis is the part that “reads” the keyboard. The transmit blockonce you remove the PCB, you can see that it consists of seven magnets and seven reed switches. The magnets are activated mechanically. The magnetsThe board with the reed switches was very dirty, no doubt in part due to my own cleaning of other parts of the machine. Dirty reed boardI cleaned it a little, but some black residues remain. Cleaner reed boardConclusion so farHere is a picture of the bottom of the machine as of September 2021, with the planar and power supply off. The machine's bottomI made a lot of progress, but I am not done yet. Here are tentative next steps: finish cleaning the mechanical parts apply grease appropriately reassemble and reinstall the ribbon mechanism reinstall the planar check the power supplyI mention the power supply because I took it out to take pictures, and I am now worried that if something went wrong with it, it could fry the planar. I am wondering what kind of crowbar system I could put in place to protect the planar in case something goes wrong.Hopefully, with the ribbon mechanism and the rest of the machine cleaned, I will be able to test actually printing on paper!More Blog post: The IBM Memory Typewriter Blog post: Restoring an IBM Memory Typewriter - Part 1 Photo album: Pictures before restoration Photo album: All pictures of the restoration" }, { "title": "Restoring an IBM Memory Typewriter - Part 1", "url": "/posts/restoring-ibm-memory-typewriter-1/", "categories": "Typewriters", "tags": "", "date": "2021-10-03 09:45:00 -0700", "snippet": "IntroductionI previously wrote about my IBM Memory Typewriter. In this post, I describe the initial troubleshooting and cleaning of the machine. I am also publishing the second installment at the s...", "content": "IntroductionI previously wrote about my IBM Memory Typewriter. In this post, I describe the initial troubleshooting and cleaning of the machine. I am also publishing the second installment at the same time. This is still a work in progress as of October 2021. The machine before restorationThe coversThe machine has “top” and “center” covers, as the service manual calls them. They have to be removed to access the inside of the machine. The covers were not fully closed when I got the machine. I don’t know yet if they are missing screws or latches. But in any case the inside was filthy! Not really pretty insideThe tilt supportUnlike the regular Selectric, you don’t take the machine fully out of the case to service it. Instead, it is equipped with what I called a kickstand, and which the service manual calls “tilt support”. This allows lifting the main body of the machine so you can access underneath. This doesn’t include the power supply and the tape loop, which are separately attached to the bottom of the case.I wasn’t sure how hard I should push up the body of the machine, or where to hold it while doing so. The machine weighs 57.8 lbs (26.2 kg) and the main body is a good part of that weight. I pushed slightly, then figured I needed to unscrew a metal part underneath (called the “retainer” in the manual) before putting the stand up and then screw again to secure the kickstand. This way you won’t get your head or fingers crushed if it fails! The \"kickstand\"The process was harder than it should have been, because the left hinge was missing 2 screws. I found them at the bottom of the machine, but they didn’t hold properly. I put a temporary fix in place so that the body would rest on the hinge. The temporary screws to hold the hingeInitial cleaningI scraped, brushed and vacuumed the disintegrated foam. I also moved the power supply to the side for easier cleaning. It was held in place with a single screw. Then I also used an air compressor to blow out dust. Cleaning in progressThe machine was in much better shape after these initial steps! Much cleaner underneathThe power supplyBefore anything else, I wanted to test the power supply separately. AC and DC connectors and fusesThanks to the service manual, all the expected voltages are known. They are: +24V -12V +5V -5V -5V for the tape loop +8.5V DC connector voltagesI disconnected the AC and DC connectors, then opened the power supply to clean it a little and blow compressed air. It was a little dirty but otherwise looking good. When I tested it, all the voltages checked!I also checked the AC connector on the AC motor, and it was good. The AC voltage on the motorI later took better pictures of the power supply. The enclosure is made of some sort of plastic covered with a sort of gray (conductive?) crinkle paint. The power supplyThis is the bottom of the PCB, with a clearly indicated separation between the high-voltage and low-voltage areas. The power supply PCBThis power supply appears to be complex, and I suspect it contains some pretty custom IBM chips as well. This is probably due to the large number of different voltages required. A complicated thing!While taking pictures, I grabbed the power supply in the wrong way, and bent one of the transistors. I bent it back a little, and I hope this is not permanent damage, but I will check the voltages again before connecting power. Luckily, if it’s just a transistor, there should be an available replacement in case there is a problem with it. TransistorThe AC motorThe first obvious issue with the machine was that the AC motor didn’t run. This is the motor that runs all the mechanical functions of the machine, exactly like with a Selectric. I tried powering it up again and confirmed that it was stuck. Looking closely, I could tell that the motor was trying to rotate, but just couldn’t. So I had to try to figure out where things were stuck.I acquired a hand cycle tool from Clark Hinson via eBay. These are newly-made versions of a standard IBM tool, which allows you to “cycle” the machine without the motor. This allows you to control and visually inspect everything that’s happening when the machine goes through a keyboard cycle.The IBM Memory Typewriter has a built-in extension shaft to account for the wider size of the machine. This part was at the bottom of the machine when I found it, and someone online correctly pointed out its likely use. The hand cycle tool and its extensionYou can’t turn too hard or the tool will break, so I had to be careful. Rotating by hand didn’t work at first. I applied mineral spirits on some parts that looked like they could be stuck. Still no progress. I also tried to help by trying to move other parts while using the hand cycle tool. Then I decided to power the machine on to get some help from the motor, while I used the hand cycle tool. And it worked! Things started to run reasonably smoothly!I should say that I broke my first hand cycle tool. At a later time, I had the motor running with the tool still attached, and a piece of clothing caught it. The tool broke very quickly. Luckily I managed to get it out of the extension shaft.Debugging the cycle clutchAs things started moving and turning, I pressed a key. And to my delight, I saw the selection magnets, under the keyboard, activate! This meant that: The key selection was captured by the reed switches. The signals were sent to the planar. The planar was sending back signals to the magnets.While this might not be very complex logic, it meant that the planar was working to some degree, which was fantastic news! The selection magnetsHowever, after that, nothing would happen. The magnets would remain selected and that was it.What is supposed to happen is that the cycle clutch magnet is supposed to activate, which is supposed to get the machine to “cycle”: that’s the mechanical process whereby the cycle shaft turns and cause the type element to position itself to the right character, etc. The clutch magnetI took what was essentially a shot in the dark, and put two additional washers to adjust the distance of the plate that holds the cycle clutch magnet. And it worked! The cycle clutch started working fairly consistently! Additional washer Additional washer and the cycle clutch magnetI thought at some point that this big orange resistor was dead, but apparently not. I suspect that it should eventually be replaced as it looks in bad shape. I established that it should probably be same as the tape loop resistor (which is marked 430 Ohms). I took it out, measured it, and it was 450 Ohms. Good guess! I suspect that it’s a 5W part. The LED resistorSome stuff works!Once this was fixed, I was able to show that quite a bit of the machine was working. It couldn’t print yet due to gummy parts, but I showed that it could record and replay! I shot a quick video showing my progress. You can tell that I was excited.Even the bell worked at the end of the line. And that bell, mind you, is entirely controlled by electronics! The magnet-activated bellConclusion so farThis first round of troubleshooting gives me hope that the machine can work again properly. But there is a lot more left to do.More Blog post: The IBM Memory Typewriter Blog post: Restoring an IBM Memory Typewriter - Part 2 Photo album: Pictures before restoration Photo album: All pictures of the restoration" }, { "title": "Sam Harris interviews Balaji Srinivasan", "url": "/posts/balaji/", "categories": "Link Blog", "tags": "", "date": "2021-09-07 22:21:00 -0700", "snippet": " I recently listened to the entire 4-hour interview of Balaji Srinivasan by Sam Harris. I was mainly struck by how poorly someone with a resume as impressive as Balaji’s (Stanford, A16z, etc.) c...", "content": " I recently listened to the entire 4-hour interview of Balaji Srinivasan by Sam Harris. I was mainly struck by how poorly someone with a resume as impressive as Balaji’s (Stanford, A16z, etc.) conveyed his worldview and (presumed) theses. I came out of the experience not knowing what to make of that multi-hour apparent confusion. Is Balaji a visionary? Or is he under a weird spell of techno-utopia that can’t see its own shortcomings? Or something else?Now this impression might be partly due to the fact that I was not familiar with Balaji’s ideas and work before that podcast. But this reminds me of something that Stephen Wolfram (fairly arrogantly) said. Paraphrasing: if I can’t understand what you are trying to explain, maybe the issue is on your side. 1This is not to say that there is absolutely nothing interesting in this mostly one-sided conversation, even for the newcomer. Mostly, the interest to me consists in the number of unanswered questions that it raises. For example, on top of my head: Is there truly a path from centralized to decentralized that consists in developing parallel institutions? Is it possible or desirable that everybody will become an “investor” (directly or indirectly)? If Bitcoin is going to be the digital gold, is that desirable, and what problems does this solve? Isn’t the idea that science can be entirely codified in machine-readable and executable data and/or code something unachievable? Does “knowing math” (compared maybe with having a fairly logical mind) matter that much in politics?And so on.This means that I will probably have to dig into Balaji’s blog post archive one of these days! I think that this might have been in this podcast with Lex Fridman &#8617; " }, { "title": "The Hermes Baby (1961)", "url": "/posts/hermes-baby-1961/", "categories": "Typewriters", "tags": "", "date": "2021-08-28 13:41:00 -0700", "snippet": "IntroductionI bought this 1961 Hermes Baby with serial 5875948 in Switzerland in February 2019. It became number 58 in my collection. This was my first “Baby”, and it was technically my fifth Herme...", "content": "IntroductionI bought this 1961 Hermes Baby with serial 5875948 in Switzerland in February 2019. It became number 58 in my collection. This was my first “Baby”, and it was technically my fifth Hermes. 1 Hermes Baby (1961)The Hermes Baby was introduced in 1935 and it was manufactured all the way to the 1970s in various iterations. To say that it was a successful engineering design is an understatement.This early 1960s version matches in style the famed “curvy” Hermes 3000 that so many typewriter enthusiasts now fight for: smooth Hermes green paint, green keys, and fairly curvy too, although Hermes introduced that body shape in the 1940s already. In 1963 the body would become more angular again, and the 1966 “boxy” revision of the Hermes 3000 would also share the more angular design.This machine features a Swiss-French keyboard. Note the dieresis (tréma) and circumflex dead key, as well as dedicated “é”, “è” / “ù”, “ê”, and “à” keys. There is also a “ç” on top of the number 3 key. This keyboard can be used for French, but also for German. Swiss-French keysWithin the right wing, there is a vendor tag from “Office Moderne - Mme E. Olivier et M. Rudaz SION”: Vendor tagI used the machine in the summers of 2019 and 2021 in Switzerland. In use in 2021I enjoyed using the machine, even without any cleaning or adjustments. I don’t have much experience with so-called ultraportable typewriters, but I have tried a Skyriter rebrand, the Tower Chieftain III, as well as an Olivetti Lettera 22 rebrand, the Sears Diplomat, and those are much less solid than the Baby. I might have to try more ultraportables to know for sure, but so far the Baby is my favorite. 2The huge benefit of ultraportables is, of course, their small size and weight. For example this Baby weighs just over 8 lb (about 3.7 kg) including the case. Compare: Machine Without Case (lb) Without Case (kg) With Case (lb) With Case (kg) Tower Chieftain III (Skyriter) 7.6 lb 3.4 kg 9.7 lb 4.4 kg Hermes Baby 1961 8.1 lb 3.7 kg 8.2 lb 3.7 kg Sears Diplomat (Lettera 22) 8.4 lb 3.8 kg 11.0 lb 5.0 kg Hermes 3000 1967 14.0 lb 6.3 kg 16.8 lb 7.6 kg Hermes Ambassador 3 25.0 lb 11.3 kg N/A N/A Olympia SG1 38.0 lb 17.2 kg N/A N/A Cleaning the machineI only recently took the machine with me to California alongside another Hermes Baby from 1951. This machine mostly needed cleaning and a few small fixes. I removed the body panels, as I always do when possible. The machine just sits on the bottom plate and simply comes out of it once the panels are removed. CleaningI vacuumed and blew (air compressor) the soundproofing felt, but didn’t feel it absolutely required replacing. That might still happen at a later time. Then I went through what is now the usual process: removing all the body panels using the air compressor to blow out dust and eraser shavings cleaning the inside and segment with mineral spirits cleaning the body and panels with Simple Green lightly polishing all the smooth body panels cleaning the platen cleaning and lightly polishing the platen knobs cleaning the keyboard lightly waxing the body panels for a little extra shine and protectionTwo of the tiny feet were missing, and the other two were crumbling. Crumbling footI replaced them with black rubber washers. Another color might be better, but again that’s not too bad and easy to change. I first hesitated regarding the orientation but decided to have the concave side of these washers pointing away from the machine’s bottom. New washers for feetCleaning the caseThe case needed special attention. It was originally very grimy. Grimy caseHowever, at some point - I really don’t know when - it also got a bunch of blue ink stains. Grime and ink stains!Luckily almost all of this went away with: Simple Green Hoppe’s #9 (this took care of the ink stains) Meguiar’s Ultimate CompoundI used Meguiar’s on the top of the case as well as the bottom. This helped mostly with the bottom of the case, where the slightly abrasive compound removed more grime (and probably a tiny layer of paint).Finally, I used Renaissance wax on the case and bottom for protection and a subtle shine. Bottom plate with marks of use but shinyThe case still has scratches and scuffs, but it is clean and I am happy with the result! The case in its glory!FixesBesides cleaning, the machine needed a few small fixes.First, it was missing its right-hand platen knob. I was lucky enough to be able to buy a NOS knob (one of his last) from Jacques Perrier (Mr. Hermes in Switzerland). It’s now installed and the machine looks complete! The NOS right-hand knobSecond, during travel, I had put bubble wrap around each of the two Hermes Babies I was carrying, just in case. Bubbled upI had the two machines in a plastic bag. I put the bag on a chair at some point and everything fell on the ground. This Baby’s handle took a hit: it got pushed out a little and deformed the guide inside the case. I used a plastic punch to shape that back, as well as a little dent on the case where the handle had deformed the case a little.Third, there was not enough tension on the ribbon spool when the ribbon was winding on the right side. The left spool was essentially free, which means the ribbon would be loose and smudge the page.I tried to bend a little the flat spring that pushes on the wheel underneath the spool. This seems to have helped a little but is probably not enough. But I also didn’t want to break that spring. When the ribbon winds towards the left, I am not getting any smudges. This typeface sample was obtained that way. 1961 Hermes Baby typeface sampleFourth, the right-hand wing cover was not latching the right way. I pushed forward the little loop that pushes the ribbon away from the wing on the right. Then the wing wouldn’t latch at all. I formed it a little so it would latch, and I repositioned the two small plates that allow adjusting the wings latches relative to the front of the case. This is now a little better.Fifth, the back panel was bent around the screw that holds it in the middle. Bent back panelThe body panels are fairly thin and it was no problem straightening that part a little. Straightened back panelConclusionI am really happy with this Hermes Baby. It is now clean and very pretty. I don’t think I will use it that much to type with at home, because there are superior options (including the Hermes 3000). But I will contemplate taking it with me when I leave the house.More TWDB entry Photos before cleaning Photos during cleaning Photos after cleaning More photos after cleaning “Technically” because I hadn’t really been able to work on, or even try any of them except my Hermes 3000, number 38, bought the previous summer, and which I really like. &#8617; Still, let’s face it: this is way inferior to an Hermes 3000, or a Royal QDL, or probably most regular-size portables - not even talking about standard (desktop) machines. &#8617; The Ambassador is actually really light for such a huge machine due to its aluminium frame. &#8617; " }, { "title": "The MacBook Air M1", "url": "/posts/macbook-air-m1/", "categories": "Technology", "tags": "", "date": "2021-05-17 22:43:00 -0700", "snippet": "IntroductionI’ve had a 10-core iMac Pro for over 3 years now. It’s a superb machine with a beautiful 27” 5K display. Its thermal design is excellent and even when the fans run, they tend to be pret...", "content": "IntroductionI’ve had a 10-core iMac Pro for over 3 years now. It’s a superb machine with a beautiful 27” 5K display. Its thermal design is excellent and even when the fans run, they tend to be pretty silent, unlike the Intel-based MacBook Pro. The machine has been very reliable. (Also, Apple has announced that they are discontinuing it.)For travel this summer I will need a laptop. One of my kids has been using my “older” MacBook Pro with butterfly keyboard during the pandemic’s distance learning. That machine has been pretty good as well, except for the terrible keyboard, which luckily I have only rarely had to use.So I ordered a MacBook Air M1 with 16 GB of RAM and 512 GB of storage. I would never have bought a MacBook Air in the past for tasks that include software development, due to the abysmal performance compared to other Apple machines. But the M1-powered machines are different. Rendering of the Apple M1A first benchmarkAs a quick benchmark, I ran a Scala compilation and packaging task from my work project. What I am testing here is the package command running from scratch (after deleting all target directories), without any artifact downloads. This is very CPU-intensive task (Scala compilation tends to be on the expensive side), but also happens to touch lots of files. Here is the result (lower is better): 2017 iMac Pro Xeon W 2020 MacBook Air M1 111 s 92 s In short the MacBook Air M1 is roughly 20% faster at this task.Apples to ApplesIntuitively, this result is not surprising given what we have known about the M1 Macs over the last few months, and the fact that I am comparing to a 3-year-old machine. 1 On the other hand, the iMac Pro has 10 cores 2 and 32 GB of RAM, and the performance of Intel CPUs has barely budged in 3 years, so I could have been surprised either way.But it is pretty impressive when you think that the MacBook Air does this without a fan and within a 10 W CPU thermal envelope. To be fair, I am not sure what the exact numbers are for the MacBook Air, in particular the split between the CPU (or SoC) and the rest of the computer. Apple does say: 10 watts (the thermal envelope of a MacBook Air)So I am taking this as an upper bound for the SoC. For comparison, here are some power consumption numbers from other Macs, provided by Apple: Model Idle Max 2017 iMac Pro Xeon W 64 W 370 W 2018 Mac Mini i7 19.9 W 122 W 2020 Mac Mini M1 6.8 W 39 W The difference in power usage is staggering. An M1-powered MacBook Air will barely warm up even during a serious compilation.The MacBook Air is also a relatively low-end machine for Apple, price-wise: the iMac Pro was a $5,000 machine, while the MacBook Air is a $1,450 machine in my configuration. There are differences, of course: larger monitor, SSD, and RAM count for something. Even if I bump the SSD to 1 TB to match the iMac Pro, the MacBook Air would be $1,650 (there is no 32 GB RAM option for the MacBook Air yet).Software installationI transferred my main installation from my iMac Pro (which I still use, of course), including apps. However, out of the box, Rosetta was not installed and I was not even prompted. In any case, I had to reinstall some apps I use often, including Google Chrome, IntelliJ, and a few others. I want these apps to be native anyway.Homebrew didn’t work at all, and it seemed like a fresh install was recommended in any case. So I uninstalled and reinstalled it completely.I used SDKMAN! to install the Java JDK as well as sbt. I first installed Java from Azul, but I failed to install sbt with Homebrew. It turns out that sbt includes native code as well for OS integration! 3I struggled a little to update my local Jekyll installation (which powers this blog), but switching to rbenv and telling it to use Ruby 3.0.0 appears to have been enough to solve the issue.At this time, I am running software such as 1Password 6, the Plex player, Google Backup and Sync, Evernote, and Marked 2, via Rosetta.I have also started using Docker, which now supports the arm64 CPU architecture of the M1 macs, as well as emulation of the Intel CPU architecture. However, Docker does not recommend emulation and says that there are limitations. I have managed to run MySQL using the mysql/mysql-server package natively with the arm64 architecture.ConclusionMy rough initial benchmark, and the fact that I have been able to install all the software that I need so far including native versions of key applications, confirms that the M1 should rock for my software development use cases.I now own a much cheaper, quieter, cooler, and less power-hungry computer, which happens to be also significantly faster than my iMac Pro. All it needs is a little more RAM (although I have not yet had an issue with the 16 GB capacity) and a larger monitor to truly surpass it.I am looking forward to seeing how it behaves over the next few months, and I can’t wait for the “Pro” versions of the CPU to come out soon in new higher-end iMacs and laptops. Then my iMac Pro will be ready to move on - although there is no real hurry as it still performs very well, if about 20% slower (and significantly hotter) during compilations. In addition Xeon processors, even when fresh out of the fab, are always slower in single-thread performance compared to their non-Xeon Intel counterparts. This was the case with the Xeon W in the iMac Pro. &#8617; The Scala build does have some level of parallelism due to using multiple modules (subprojects) and tasks (compilation, packaging, assets processing, and Scala.js compilation and optimization). &#8617; SDKMAN! looked like a joke at first, but it appears to be widely used and even recommended as a way to install not only Java but sbt by the sbt project itself. &#8617; " }, { "title": "The 1960 Royal FP &quot;special order&quot;", "url": "/posts/royal-fp-special-order-1960/", "categories": "Typewriters", "tags": "", "date": "2021-05-04 21:45:00 -0700", "snippet": "IntroductionI bought this machine right after the start of the Bay Area “shelter-in-place” order related to the COVID-19 pandemic back in April 2020. Since we were all actually sheltering at the ti...", "content": "IntroductionI bought this machine right after the start of the Bay Area “shelter-in-place” order related to the COVID-19 pandemic back in April 2020. Since we were all actually sheltering at the time I couldn’t go pick it up immediately. Friends kindly helped get the machine to me, and I eventually got my hands on it in November 2020, where it got to sit in our garage. Recently, just over a year after its purchase, I decided to process it. This was motivated in part because somebody in the Facebook ATI group reminded me that these are supposed to be great machines. I figured that it was as good a time as any to see for myself. Royal FP (1960)I rarely get machines that are truly usable out of the box (even though there was no box here). This machine was not in bad condition, but it had the typical dust that makes you not want to touch it too much, and certainly not put it inside your house and use it. So I gave it the basic treatment, which includes: removing all the body panels using the air compressor to blow out dust and eraser shavings cleaning the inside and segment with mineral spirits cleaning the body and panels with Simple Green lightly polishing all the smooth body panels cleaning the platen cleaning and lightly polishing the platen knobs cleaning the keyboard lightly polishing the chrome lightly waxing the body panels for a little extra shine and protection replacing the ribbonThis expedited process took me about 2-3 hours. 1 During cleaningSpecial orderThis Royal FP has a serial starting with “FPS” which indicates a “special order” machine. The serialIn this case, what’s special about it is the international keyboard layout, with diacritics and even one dead key. Of special interest to me, this keyboard is good for French (only the rare “ç” is missing), as well as Italian. The international keyboardFeaturesThe large footprint of the machine surprised me a little. It is deep, as you can see on the following pictures! I don’t have a good picture of it, but there is a lot of empty space under the carriage in the back, but that space is fully enclosed by the machine anyway. This won't fit everywhereThe machine requires special Royal spools. These are large plastic spools which are necessary to trigger the ribbon reverse. Bottom of a spoolInterestingly, this system is a descendant of the system introduced with the upstrike 1894 Remington 6! 2 A Remington 6 spoolThe original ribbon had a loop on each end to hook up to bar in each spool, but you can also just attach a regular ribbon. Top of an installed spoolThe ribbon selector is uncommonly situated on the right side of the machine. I find that this is not a bad placement in practice. The ribbon selectorThere are scratches in the back, which appears to be a common problem, and a few other scratches and dents. The letters “OPC” or “OPF” are lightly engraved in the paint on the back of the left side. Scratches in the backOtherwise, the machine is in good condition cosmetically, especially from the front, which matters the most. A flattering viewI really like the look with the fancy red “Royal” badge in the front. Pushing it pops up the spool cover. The \"Royal\" badgeThe machine has a distinctive 1950s/1960s style, while the heritage of the Royal 10 is obvious with the (covered) side openings. The side coversBased on the sticker under the carriage, this machine was used at the University of California. University of CaliforniaThe machine in actionBesides the “FPS” for “special order”, the Royal FP also came with the prefix “FPP” for Pica and “FPE” for Elite, according to TWDB. My FPS happens to feature an Elite (12 CPI) typeface, which I tend to prefer to Pica. Here is a typeface sample. Typeface sampleI have now typed a few journal pages with it, and it’s very solid! The machine will not budge when typing, thanks to its weight and large rubber feet. The carriage is not exactly light, but that’s something I would expect for such a large machine. The action is not the lightest but it’s pleasant. Unsurprisingly, it reminds me of my Royal KHM, which I think is a little lighter to type with, although without trying several instances of a given model it’s hard to tell for sure. I should really put them next to each other and compare more closely. Royal KHM (1938)ConclusionThis Royal FP is probably not a machine I will display at the center of my collection. Although in fairness I think it looks quite good, there is still a sort of office feeling to it. This is a machine designed to be used. It’s a writer’s machine. It’s what you use when you need to get work done and don’t want to be bothered by little annoyances. So far I haven’t found any issues with it. I think that I will use it regularly for writing my journal and the occasional letter.More My Typewriter Database gallery Pictures after cleaning Pictures during cleaning My Reddit post (with close to 100 upvotes!) myoldtypewriter’s wonderful post about her FP I manage to listen to podcasts during a good portion of the time. &#8617; I don’t think the Remington 2 had this system, but I might be incorrect. Please let me know! &#8617; " }, { "title": "Turning off lazy image loading", "url": "/posts/lazy-image-loading/", "categories": "Technology", "tags": "", "date": "2021-02-18 13:15:00 -0800", "snippet": "When switching to my new blog setup, which is based on Jekyll and the Chirpy theme, I wondered why things jittered around when paging down a long post with images. Similarly, using the “End” key to...", "content": "When switching to my new blog setup, which is based on Jekyll and the Chirpy theme, I wondered why things jittered around when paging down a long post with images. Similarly, using the “End” key to reach the end of the page and then going back up was weird. Finally, printing a blog post or saving it as a PDF was not showing all the images!I discovered that there has been a fad about lazy image loading in web development in recent years. JavaScript libraries such as Lozad.js help you do that, and this Jekyll theme includes that library by default. The theme first replaces &lt;img&gt; tags to have blank placeholder images, and then as images show in the viewport when the user scrolls, the JavaScript actually loads images.Why go through all of this? Apparently to save bandwidth on page load, as well as some other unverified benefits. Yes, it’s “smart”, but not all the way through because it comes at the cost of damaging the user experience in many ways. I don’t think it’s worth the price and therefore I disabled the built-in lazy image loading.One way to improve on this would be to have not only blank placeholder images but to have placeholders with the correct width and height. This would avoid the jittering but still it wouldn’t fix the printing/save to PDF problem. Maybe there is another solution to that specific problem, such as the native loading=\"lazy\" (which at this time is not supported by Safari), but which would allow the browser to load all relevant lazy images before printing.Some sites do this better than others. For example iFixit, which makes heavy use of images in their repair guides, uses lazy image loading. However all images have the same predefined size and no jittering happens when scrolling. But if you try to print a guide or export it as PDF, guess what: most of the images won’t appear unless you have patiently scrolled down the page first.At this point I can only see this as another mostly misguided fad in web development. There might be valid use cases for high traffic sites, but I suspect that this benefits mostly sites which throw a lot of unwanted stuff at the user anyway. For a personal blog post there is really no reason to enable this and damage the user experience." }, { "title": "Chick Corea has passed away", "url": "/posts/chick-corea/", "categories": "Link Blog", "tags": "music", "date": "2021-02-12 11:40:00 -0800", "snippet": "From Chick Corea’s web site: It is with great sadness that we announce that on February 9th, Chick Corea passed away at the age of 79, from a rare form of cancer which was only discovered very rec...", "content": "From Chick Corea’s web site: It is with great sadness that we announce that on February 9th, Chick Corea passed away at the age of 79, from a rare form of cancer which was only discovered very recently. Chick CoreaI saw Chick Corea in 2019 in Montreux with my wife, dad, brother and sister-in-law. It was the first time I saw him live. Montreux Jazz Festival Chick Corea concert ticketIt was a beautiful concert. Chick was so cool and at ease. The members of his bands looked up to him in a way that reminded me of how Miles’s band members looked at Miles. He was one of those legends that have so much history behind them that they can only attract respect. I remember checking his age before the concert, only then realizing that he was about 78, and being impressed. He looked healthy, energetic, and at his best.I know Chick’s music from his work with Miles in the late 1960s and early 1970s. You can see him with Miles at the 1970 Isle Of Wight Festival for example. I also have his album Eye of the Beholder which I really like." }, { "title": "The IBM Memory Typewriter", "url": "/posts/ibm-memory-typewriter/", "categories": "Typewriters", "tags": "", "date": "2021-02-04 00:00:00 -0800", "snippet": "See also the following related posts: Restoring an IBM Memory Typewriter - Part 1 Restoring an IBM Memory Typewriter - Part 2 Restoring an IBM Electronic Selectric Composer - Part 1 The IBM Mag...", "content": "See also the following related posts: Restoring an IBM Memory Typewriter - Part 1 Restoring an IBM Memory Typewriter - Part 2 Restoring an IBM Electronic Selectric Composer - Part 1 The IBM Magnetic Tape Selectric Composer - Part 1 The IBM Magnetic Tape Selectric Composer - Part 2BackgroundI recently picked up an IBM Memory Typewriter that otherwise would have been scrapped. 1 Many thanks go to the kind soul who tipped the Golfballtypewritershop group and allowed me to pick it up locally! The IBM Memory TypewriterI already own several IBM typewriters in various conditions, and even an IBM Electronic Typewriter 75 (see below), but I was not familiar with the Memory Typewriter. However, it appears to be a very interesting machine, as we will see. First, just look at how it looks like under the hood! The IBM Memory Typewriter with covers offMaybe the most impressive part is the electronic board (called the “planar package” in the IBM service manuals) in the back, with lots of IBM chips. 2 The \"planar package\"Condition of the machineThere is no doubt that the machine is in rough condition! Needless to say, it doesn’t quite work.When turning it on, the power supply fan and one light turn on, but the AC motor doesn’t. It should turn on immediately after power on, like on a regular Selectric.There is some damage to the top cover: one part has broken off on the right side, and one is missing on the left side. The left platen knob is also missing. The good news is that these parts are not necessary to the good working of the machine. The bad news is that there is probably bigger fish to fry!The inside of the machine is filthy. It’s typical for the soundproofing foam to disintegrate into a sort of goo in Selectrics, but there is also a lot of dust and debris in there. However, there is no immediately visible damage - but I noticed two screws and a short metal rod lying at the bottom of the machine! That will need investigating.UPDATE: I was kindly pointed out that this shaft is the hand-cycle tool extension! So that’s a slight relief.Gathering informationManualsThe Golfballtypewritershop group was very helpful to get started. Through this group I was able to get a copy of the service and diagnostic manuals for this machine. They contain an incredible amount of very useful information.So what’s special about it? Well, the IBM Memory Typewriter is essentially an IBM Selectric typewriter with an important addition: the ability to record text both in solid-state memory and on a built-in magnetic tape, and to play it back. In short, this was one of the first word-processing machines. This makes it all the more tempting to get this machine to work! Here is an excerpt from the service manual. IntroductionIBM’s sitesWhile for many typewriters you can find a wealth of information online these days, it’s definitely not the case with the Memory Typewriter. The machine is mentioned in IBM’s The typewriter: an informal history: The typewriter with a memory In 1974, the introduction of the IBM Memory Typewriter enabled typists to complete their work with a minimum of time and effort. Built into the typewriter is a memory which stores everything typed and allows the operator to recall and revise previously typed material. The memory is activated whenever typists begin keyboarding and because it works in conjunction with the typewriter’s special correction system, typists can record all work at “rough draft” speed. The memory is capable of storing up to 50 pages of copy which can be played back in error-free form at 150 words per minute. The IBM Memory 100 Typewriter, with a 100 page built-in action file, was introduced in 1977There is also a chronology in IBM’s IBM typewriter milestones. Here are some relevant entries: 1969: Mag Card Selectric Typewriter announced 1973 (April): IBM Mag Card II Typewriter announced (“Its electronic memory holds up to 8,000 characters.”) 1974: IBM Memory Typewriter rolled out 1975 (January): IBM Electronic Selectric Composer launched 1977 (March): IBM Memory 100 Typewriter debuts 1978: The IBM Electronic Typewriter 50 and 60 (“the first electronic typewriters”)It’s unclear, based on this only, which machine first had an “electronic memory”. Was it only the Mag Card II in 1973? Or did the 1969 machine already have such a memory?Checking the “Adjustment Parts Manual”, which covers all Mag Card and Memory typewriters, it appears that the Mag Card also had a “planar package”. This suggests that there is a line of machines that share a similar electronic system with the planar package in the back. It would make sense, of course, for IBM to not redesign everything from scratch. Adjustment Parts ManualYouTubeI also found, on YouTube, a 2013 video from Switzerland showing a Memory Typewriter printing its test track, which is recorded on “secret” track 51 of the machine. That machine looks in fantastic condition, and no wonder: the description says it was in use until 2011, and then “fully overhauled” in 2012.That video also clarifies the following points: March 1974 announcement date “MOSFET shift register” memory tape density of 800 bits per inch price of 16,000 Swiss Francs (CHF) in the 1970sPricing of the Memory TypewriterBased on that YouTube video, let’s try to estimate the original price point of this machine.Using online currency tools, in 1974, 1 USD was about 3 CHF. 1 USD in 1974 is about 5 USD in 2021. So I infer a price of about 5,300 USD in 1974, 3 which would be more than USD 25,000 in year 2021 currency! The machine might well have been more expensive in Switzerland than in the US, but it was certainly a very expensive machine.This explains why few of these machines are around: they were way more expensive than the regular Selectric, which itself was not a cheap machine.Dating of this instanceThe model was introduced in March 1974 and was probably produced for a few years. What year exactly is my instance? I haven’t located the serial number yet. There is a marking on the power supply cover that says “Aug 2 1974”. This would put a lower bound on the date to August 1974. But of course that specific part might have been made then, and the rest of the machine later.For now I am considering this to be a “1974 IBM Memory Typewriter” and I will revise this if more information is available.Layout of the Memory TypewriterThe Memory Typewriter contains the following notable functional blocks: power supply mechanical keyboard printer planar package tape loop Layout of the IBM Memory TypewriterThe tape loop is built-in. It is a wide (almost 2 inch-wide) tape, which can hold 50 tracks each containing 4000 characters. You select a track with a rotating dial. The tape loopThe planar package contains a 4000-character memory.Memory Typewriter vs. Electronic TypewriterIn 2020, I bought a 1980 IBM Electronic Typewriter 75 locally, out of curiosity and again to save the machine from possible destruction. That machine doesn’t work either. IBM Electronic Typewriter 75But how is the Electronic Typewriter related to the Memory Typewriter? If the 1978 “Electronic Typewriter” is “the first electronic typewriter”, how come there is so much “electronics” in the Mag Card Typewriter and Memory Typewriter?Part of it is marketing and branding. Another aspect is that the Electronic Typewriter appears to have less mechanical parts and more modern electronics, including a processor board. The keyboard too, while still mechanical (but with 6 selection switches), is not quite like the Memory Typewriter’s. As a start, you can compare the following layout with the layout of the IBM Memory Typewriter above. Layout of the IBM Electronic Typewriter 75A hybrid machineThe IBM Memory Typewriter is a hybrid machine: it contains a lot of mechanical parts, and at the same time has a large electronic part.For example, the keyboard appears almost unmodified compared with a regular Selectric. It remains truly mechanical, with moving keylevers and interposers. It interfaces with the electronics using reed relays. 4 The mechanical keyboardConversely, the printer part is of course a mechanical unit, but activated from the electronics using solenoids and electromagnets.One of my initial questions after obtaining the machine was whether there was a way to use the machine in a purely electromechanical mode, like a Selectric, and the answer is no: the machine requires the electronics in order to operate. Even if you use the machine in “typewriter mode”, the signals go through the electronics. So if the planar package is bust, the machine won’t work.Operation of the Memory TypewriterI can’t operate the machine right now since it doesn’t work, but a few interesting bits come to light from the service manual: You can operate the machine in multiple modes: Typewriter mode, where you type and the machine prints immediately. The same, but while also storing characters in memory. Save the memory to one of the 50 tape tracks. Read one of the 50 tape tracks to memory. The machine has basic text editing features, including: Backspace both erases the character on paper with the correction tape and removes the previous character from memory. You can delete a word or a line in memory. You can automatically underscore a word. You can automatically center text on a line. A “smart” decimal tabulator backspaces automatically until you press the decimal point. This is a pretty good list for an early 1970s machine!Next stepsI am not a Selectric technician but this machine appears daunting and is probably one step up for most such technicians. Still, it would be incredible to make this machine work. Can that be done? I am tentatively laying out the following initial steps: Perform a basic clean-up of the machine. Check why the AC motor doesn’t run. The service manual provides steps for this. See if the electronics appear to do something after that. If not, check the service manual for more steps. Consult with a Selectric repair person, especially for the mechanical part.Does that sound like a plan?More IBM Memory Typewriter TWDB entry 5 Photo album IBM Electronic Typewriter 75 TWDB entry 6 Photo album This machine has become number 140 in the collection, by the way! &#8617; It would be interesting to have the schematics for that. Unfortunately, those are not present in the IBM service manuals. &#8617; The pricing range is confirmed in a comment to that video saying that a US brochure had it priced at USD 4,900. &#8617; One could argue that these were true “mechanical keyboards”, unlike today’s mechanical keyboards named so just because they have individual switches! &#8617; The first entry on TWDB for the IBM Memory Typewriter! &#8617; The first entry on TWDB for the IBM Electronic Typewriter 75! &#8617; " }, { "title": "The Remington 12 (1924)", "url": "/posts/remington-12-1924/", "categories": "Typewriters", "tags": "", "date": "2018-12-09 23:18:00 -0800", "snippet": "One Underwood and two Royals: in April 2017, I was clearly missing another big typewriter brand! So when I saw a Craigslist ad for a Remington 12 which looked in beautiful condition, I jumped on it...", "content": "One Underwood and two Royals: in April 2017, I was clearly missing another big typewriter brand! So when I saw a Craigslist ad for a Remington 12 which looked in beautiful condition, I jumped on it. This became machine number 5 1 in the collection. Remington 12 (1924)The remington 12, made from 1922 to 1943, is a successor to the Remington 10, the first front-strike machine that Remington started producing in 1908. 2The 12 shows its ancient heritage from the Remington family: It has vertical ribbon spools, a design coming directly from the upstrike machines introduced more than 40 years earlier. The same goes for the right-hand carriage return lever, which made more sense for the upstrikes with their left-hand handle to lift the carriage.On the other hand, the 12 takes standard width ribbons and, like the late model 10s (as opposed to the early model 10s), it has a modern segment. But unlike the 10 which had an open frame, the body of the 12 is fully enclosed by metal panels. The two side panels have cute little doors to access the ribbon spools. The right-hand side doorI didn’t have much to do on this machine. I did not attempt to remove the carriage, but I removed all the panels, cleaned the inside, including a PB Blaster and mineral spirits round, cleaned the types, and used a black sharpie to touch up some areas of the body. It could use some new feet and a new platen: the current rubber is in good shape but very hard.I particularly like the 5 red tab keys on this machine. The key tops are in great condition. The tab system, which the Remington 10 had already, is nice because you can directly jump to a tab position by pressing the corresponding key, instead of having to press multiple times. This comes at the cost of more mechanical complexity, with a clever system at the back of the carriage to grab the right tab stop depending on the specific tab key pressed. I am missing, unfortunately, 3 of the 5 tab stops in the back. The 5 red tab keysThe Remington 12 is not a very rare machine, but I just love it and it is now one of my prized machines, proudly displayed in my house. Pretty viewMore: My typewriter database gallery Public photo album In the meanwhile, I also obtained a fairly cheap Underwood 5, which is machine number 4. But that machine was really not in good condition and I quickly decided to set it aside. &#8617; All the Remington machines before the 10 were upstrike machines, from the Sholes and Glidden to the Remington 6/7/8/9. &#8617; " }, { "title": "The Royal 5 (1913)", "url": "/posts/royal-5-1913/", "categories": "Typewriters", "tags": "", "date": "2018-11-13 22:53:00 -0800", "snippet": "After two typewriters in good condition obtained in April 2017, I was ready for something else for machine number 3. I found on eBay a 1913 Royal 5 1 and I decided to get it. Shipping was about the...", "content": "After two typewriters in good condition obtained in April 2017, I was ready for something else for machine number 3. I found on eBay a 1913 Royal 5 1 and I decided to get it. Shipping was about the same as the price of the machine itself, but I just liked the look of the machine and the idea of a challenge!Indeed, this machine was not great when I got it: the carriage was very rusty, the internals were extremely filthy, a platen knob was broken, and the letter “E”’s glass was shattered. It was missing the draw band and a rubber foot (the other 3 feet were in bad shape). It didn’t work at all. When I got it and took the first pictures, I thought that there was some beauty in its degradation, but I just couldn’t let it stay this way! Rusty and dusty Royal 5 (1913)Soon after receiving the machine, I started cleaning it. I removed the carriage (which was fairly easy after my experience with the KHM), dunked it into Evapo-Rust, removed all the panels, used PB Blaster to clean the inside, etc. I also made my first mistake: while cleaning the exterior, I made some of the decals worse. Live and learn! But to be fair, they were covered in grime and shellac and whatnot, which appears to be typical for Royal 5s.In October 2017, I cleaned the keys, which look surprisingly good now, and sanded the space bar, whose paint was flaking. I plan to keep the wood look, as I think it looks pretty good. I might coat it if I can figure out how.At the same time, I realized that the carriage was missing its feed roller entirely! That’s something I hadn’t noticed at all when acquiring the machine. But, checking pictures, there was no doubt: the machine had been missing that part since the beginning. No matter how well I would clean it, it wouldn’t work without that feed roller. So I put the project on a break.In May 2018, thanks to the magic of a Facebook group and a kind donor, I obtained a set of spare parts for Royal 5 which happened to include said feed roller, platen knobs (one of the original ones was broken), and even a screw which I was missing! So I had all the parts needed to fix the machine!And so, on a nice day in August 2018, the machine typed again! I even installed some new rubber feet and made a new typebar rest with felt. Now, it doesn’t type perfectly yet. The carriage is a bit wobbly. With shift lock, the carriage gets stuck about halfway through the line. I am not sure if increasing the spring tension will help. But even with these issues, it is possible to type a page pretty nicely. I have already used the machine to write several daily journal entries. The 1913 Royal 5 typing again!I for one find this machine quite fascinating. Its flat look is striking, of course, but the way the keys slide through the keyboard panels and pull the typebars is also unique. It is relatively simple mechanically but rock-solid: think that a cleaning and replacing a couple of broken parts was enough to make it type again - in two colors, and even with a tabulator! The Royal 5 keyboardThis said, this Royal 5 is not what I would call “restored” yet. There are a few things I would like to do: Restore the “E” key. I made an acrylic replacement for the broken glass and printed a neat “E” letter, so I am almost there. Repaint the two panels that cover the basket. Those had some rust originally, and the paint started flaking while cleaning. I tried some replacement panels that I got with the lot of spare parts, but those don’t quite fit for some reason! It might have been possible to salvage the original ones, but I decided instead to repaint them. I have already stripped the panels of their paint (which means that they have started to rust again). After painting, ideally, I should reproduce the pinstripes. Clean the paper table. I only dusted it so far. I need to be careful here, as the decal is in reasonable condition. Replace the bail rollers. The rubber on this machine is bad in general, but these rollers are badly cracked and need replacing. Maybe I should bite the bullet and replace all the rubber. Repaint the panels under the keys. Here too some paint has flaked and rust is taking over. I’d like to repaint these panels, which means removing all the keys! Some people have done it, but it’s not exactly quick. Restore some of the decals and pinstripes. Those on the right side and front of the machine are in bad shape.I hope to have updates on the progress of this restoration soon!More: Royal 5 (1913) - Restoration in progress Royal came up with their Royal Standard (later rebaptized No. 1) in 1906, and improved on it with the Royal 5 in 1910. These machines are sometimes called “flatbeds” because of their distinctively low profile. It appears that people (or businesses) didn’t exactly love the look and, starting with the beautiful Royal 10 in 1913, the company started making machines that looked more like other successful machines on the market like the Underwood or the Remington. &#8617; " }, { "title": "The Royal KHM (1938)", "url": "/posts/royal-khm-1938/", "categories": "Typewriters", "tags": "", "date": "2018-10-16 15:31:00 -0700", "snippet": "After the Underwood 6 from 1936, there was an good chance I would look into getting another typewriter. So this one came up on eBay, and I noticed that it didn’t sell and that the seller, while not...", "content": "After the Underwood 6 from 1936, there was an good chance I would look into getting another typewriter. So this one came up on eBay, and I noticed that it didn’t sell and that the seller, while not exactly local, was not very far. So I contacted him and asked if he would be willing to keep the machine for me. That’s how I got machine number 2 in my collection in April 2017: a 1938 Royal KHM, fairly priced. We took a small family road trip to get it. Royal KHM (1938)The KHM probably has the best action of all the machines I have so far. Royal got this part right really early on. Machine from other big brands like Underwood and Remington don’t come close during this period of time (the 1930s). The KHM is a workhorse and a real pleasure to type with. Also, it’s a basket shift, which means that the shift key is easier to use.Based on my smooth experience removing the carriage of the Underwood 6 for cleaning, I tried doing this with the Royal. But I learned that not all typewriters have a carriage that comes out easily. I persisted and managed to get it out and back in, with difficulty. It did make cleaning much easier, but I wouldn’t recommend going through this unless really necessary. Adjusting the carriage after putting it back is not exactly easy either. I have since learned that the common wisdom about carriages is “Don’t remove the carriage unless absolutely necessary.” In some cases though, like with early Underwoods, it is so easy that this wisdom shouldn’t apply. 1The Royal KHM is a successor to the Royal 10, another classic typewriter known for its side windows - yes, glass windows on the sides! The KHM doesn’t have windows but has two panels which can be removed easily. The panels protect the interior of the machine from dust and give it a fairly modern look. In general I like the look of the KHM, including the smooth black paint and the distinctive ribbon covers on top.Some keys (“6”, “E”, “R”, “T”, “I”, “O”, “L”) clearly got replaced on this machine during its lifetime: they are white instead of yellow, and convex instead of concave. The keyboard with replaced keysThe left ribbon cover is missing a part so it doesn’t lock properly. I do need to fix an issue with the right margin release. I am also considering putting on new decals - which I have already bought. It seems typical that these machines lose their decals after a while. I think that with new decals well applied, the machine will look amazing.More: My typewriter database gallery Public photo album The carriage is held in a very similar way on the Royal 5 and 10. You also have two ball bearings, which you don’t have on the Underwood. But if I remember well, it was extra difficult on the KHM for some reason. &#8617; " }, { "title": "The Underwood 6 (1936)", "url": "/posts/underwood-6-1936/", "categories": "Typewriters", "tags": "", "date": "2018-10-12 14:23:00 -0700", "snippet": "In April 2017 I bought my first typewriter: a classic Underwood 6 from 1936. It was actually advertised as an Underwood 5, which would have been even more classic, but I liked the machine and went ...", "content": "In April 2017 I bought my first typewriter: a classic Underwood 6 from 1936. It was actually advertised as an Underwood 5, which would have been even more classic, but I liked the machine and went for it.Since then, I have accumulated a small collection of typewriters, ranging from the 1890s to the 1980s. I thought I would do a little write-up on some of those machines. 1So I am starting with this same Underwood 6 from 1936, machine number 1 in my collection. I spent $100 on it via Craigslist (I would push for less today) but I don’t regret spending this much as the machine is really in great condition and it types really well.In general, it is good to buy large “desktop” typewriters (standards, as they are called) locally, since shipping them is risky as sellers often don’t know how to pack them well. Many typewriters get damaged in transit this way. Underwood 6 (1936)This is a direct descendant of the mythical Underwood 5, the first truly modern typewriter which set the standard for how typewriters should look like for decades. Like the 5, it features an open frame: you can see the inside of the machine and there is only a panel in front. This is nice if you have an engineer’s mindset, but of course that means that the machine can gather dust more easily. It looks a little bit more modern than the 5, without the fancy decals of the early 5s, for example. But the decal on the paper table of the Underwood 6 is really beautiful, as are the green and black keys.The machine is a carriage shift, which means that shifting to uppercase is more tiring than with newer machines: you have to lift the entire carriage up with your little fingers using the shift keys. It’s fine with a bit of practice. Other than that, typing on this machine feels pretty good to me, and I typed many pages on this machine.Underwoods in general have a great design and are very robust, so it’s no wonder they sold millions of them in the end. It is easy to remove the carriage and to access the inside, 2 so they are good beginner machines if you want to clean in depth or tinker a bit. I love that the bell is visible on the side, and the 6’s tab system is quite nice.I didn’t have to do much on this machine: a good cleaning, new rubber feet bought online, and a new ribbon (I was so excited to receive the ribbon I had ordered for the machine online!).As for issues, the color selector is hard to adjust perfectly so that the red doesn’t bleed (this seems typical on Underwoods). The workaround consists in just using a black ribbon or the black part of a two-color ribbon on this machine. Also, the left margin is a little bit lazy, but it’s not a big problem. Finally, I would still like to bend back the seal on the left into shape.Overall this is one of the favorite machines in my collection and I am really happy to have it.More: My typewriter database gallery Public photo album Only a subset of those are truly working and in display condition. The others need work. &#8617; It is not easy to remove the carriage of many typewriters, including Royals and Remingtons. &#8617; " }, { "title": "Scala on Tessel 2", "url": "/posts/scala-on-tessel-2/", "categories": "Programming", "tags": "hardware, iot, scala", "date": "2016-04-26 09:16:00 -0700", "snippet": " Tessel 2 and its relay moduleWhat is Tessel 2?Tessel 2 is a Wi-Fi-enabled development board programmable in JavaScript with Node.js. The first units shipped this month. There is a lot that I li...", "content": " Tessel 2 and its relay moduleWhat is Tessel 2?Tessel 2 is a Wi-Fi-enabled development board programmable in JavaScript with Node.js. The first units shipped this month. There is a lot that I like about Tessel 2: It is high-level. JavaScript and Node.js greatly lower the barrier of entry since there are so many developers familiar with these technologies.1 It works out of the box. Take the device, plug it, push some JavaScript, and it does its magic! There is no need to install your own Linux distribution or additional software. It is autonomous. Thanks to its powerful hardware2, built-in Wi-Fi and Node.js, it runs independently from other computers or even cables (except for power). It is open. The Tessel 2 software and hardware are open source. In fact, Tessel is not even a company but “just a collection of people who find it worthwhile to spend [their] time building towards the Tessel Project mission.”3It short Tessel 2 seems perfect for playing with IoT!From JavaScript to ScalaAs soon as I got my Tessel 2, I followed the tutorial to get a basic hang of it, and that went quite smoothly.But my plan all along had been to use Scala on Tessel 2. You might know Scala primarily as a server-side language running on the Java VM. But Scala also compiles to JavaScript thanks to Scala.js, and it does it spectacularly well.So I set to do something simple like toggling relays, but in Scala instead of JavaScript. Here are the rough steps: setup a Scala.js sbt project write an app calling the Tessel LED and relay module APIs run sbt fullOptJs to compile the Scala code to optimized JavaScript run t2 run target/scala-2.11/tessel-scala-opt.js to deploy the resulting JavaScript to TesselAfter I figured out a couple of tweaks (scalaJSOutputWrapper and .tesselinclude), it just worked! Here is the code:object Demo extends js.JSApp { def main(): Unit = { println(s\"starting with node version ${g.process.version}\") val tessel = g.require(\"tessel\") val relayMono = g.require(\"relay-mono\") val relay = relayMono.use(tessel.port.A) relay.on(\"ready\", () =&gt; { println(\"Relay ready!\") js.timers.setInterval(2.seconds) { relay.toggle(1) } js.timers.setInterval(1.seconds) { relay.toggle(2) } }) relay.on(\"latch\", (channel: Int, value: Boolean) =&gt; { println(s\"Latch on relay channel $channel switched to $value\") if (value) tessel.led.selectDynamic((channel + 1).toString).on() else tessel.led.selectDynamic((channel + 1).toString).off() }) }}Notice how I can call Tessel APIs from Scala without much ado.4 When used this way, Scala.js works like JavaScript: it’s all dynamic.5Types and facadesBut a major reason to use Scala instead of JavaScript is to get help from types. So after that initial attempt I wrote some minimal facades6 for the Tessel and Node APIs I needed. Facades expose typed APIs to Scala, which allows the compiler to check that you are calling the APIs properly, and also gives your text editor a chance to provide autocompletion and suggestions. You can see this in action in IntelliJ: Code completion in IntelliJHere are the minimal facades I have so far: node.scala tessel.scalaAlong the way I realized that working on facades is also a great way to learn APIs in depth! This is the resulting code (which you can find on github):object Demo extends js.JSApp { def main(): Unit = { println(s\"starting with node version ${g.process.version}\") val tessel = Tessel() val relayMono = RelayMono() val relay = relayMono.use(tessel.port.A) relay.onReady { println(\"Relay ready!\") js.timers.setInterval(2.seconds) { relay.toggle(1) } js.timers.setInterval(1.seconds) { relay.toggle(2) } } relay.onLatch { (channel, value) =&gt; println(s\"Latch on relay channel $channel switched to $value\") if (value) tessel.led(channel + 1).on() else tessel.led(channel + 1).off() } }}As you can see, it’s not very different from the dynamic example, except that I now get help from the editor and compiler.Why do this, again?Now you might argue that in both cases the code looks more or less like JavaScript, so why go through the trouble?It’s true that, superficially, JavaScript and Scala look very similar in these examples. But underneath there is Scala’s type system at work, and this is for me the main reason to want to use that language.This said, there is more, such as: Immutability by default. I like this because it helps reduce errors and works great with functional programming idioms. Collections. Scala has a very complete collection library, including immutable collections (but you can also use mutable collections). Functional programming. Scala was designed for functional from the get go and has some pretty neat functional programming third-party libraries too.And I could go on with features like case classes, pattern matching and destructuring, for-comprehensions, and more. But I should also mention a few drawbacks of using Scala instead of JavaScript: Harder language. Scala is a super interesting language, but no matter how you look at it, it is a bigger beast than JavaScript. Executable size. Scala.js has an amazing optimizer which also strips the resulting JavaScript from pretty much any unused bit of code7. Still, you will likely have resulting files which are larger than what you would get by writing JavaScript by hand. So expect your app to yield uncompressed JavaScript files in the order of a few hundreds of KB (much smaller when compressed). Tessel doesn’t seem to have any issues with that so far, so it might not be a problem at all, but it’s worth keeping an eye on this as Tessel doesn’t have Gigabytes of RAM. Compilation step. There is a compilation and optimization step in addition to publishing the software to Tessel. For my very simple demo, this takes a couple of seconds only. For larger projects, the time will increase. Now this is very manageable thanks to sbt’s incremental compilation, and if you consider that pushing a project to Tessel can take several seconds anyway, I would say that right now it’s not an issue.So who would want to program Tessel in Scala? Probably not everybody, but it’s a great option to have if you already know the language or are interested in learning it, especially if you are going to write large amounts of code.What’s next?I plan to continue playing with Tessel 2 and Scala. The next step is to try to do something fun (and maybe even useful) beyond blinking LEDs and relays! This trend is definitely in the air. Read for example Why JavaScript is Good for Embedded Systems. &#8617; Tessel 2 is fairly beefy compared to an Arduino board, for example: it features a 580 MHz CPU, built-in 802.11 b/g/n Wi-Fi, and 64 MB of RAM and 32 MB of Flash. You can add more storage via USB. &#8617; From Code of Conduct/About the Tessel Project/How to Get Your Issue Fixed. It is all the more impressive that they managed to make and ship such cool hardware and software. &#8617; There is one exception, which I had missed in an earlier version of this post, which is access to JavaScript arrays. If you only rely on dynamic calls, you have to cast to js.Array[_], or use the selectDynamic() method. Here I chose the latter way. Things look nicer when you use facades. &#8617; Under the hood, this is thanks to Scala’s Dynamic support. &#8617; Scala.js facades are lot like TypeScript declaration files. &#8617; Also known as DCE for Dead Code Elimination. &#8617; " }, { "title": "Generalized type constraints in Scala (without a PhD)", "url": "/posts/generalized-type-constraints-in-scala/", "categories": "Programming", "tags": "scala", "date": "2015-11-17 09:47:00 -0800", "snippet": "IntroductionNot long ago I stumbled upon the signature of the flatten method on Option:def flatten[B](implicit ev: A &lt;:&lt; Option[B]): Option[B]I don’t know about you, but I knew about implicit...", "content": "IntroductionNot long ago I stumbled upon the signature of the flatten method on Option:def flatten[B](implicit ev: A &lt;:&lt; Option[B]): Option[B]I don’t know about you, but I knew about implicit parameter lists, implicit resolution, and even type bounds. But this funny &lt;:&lt; “sad-with-a-hat” 1 operator 2 was entirely new to me!Smart people 3 have written about it years ago, but it’s clear that we are talking about a feature which is not well-known and poorly documented, even though it is available since Scala 2.8. So this article is about figuring out what it means and how it works.The following deconstruction turns out to be fairly long, but even though &lt;:&lt; itself may not be useful to every Scala programmer, it touches a surprisingly large number of Scala features which most Scala programmers should know.What it does and how it’s usefulIf you search the Scala standard library, you find a few other occurrences of &lt;:&lt;, in particular: on Option: def orNull[A1 &gt;: A](implicit ev: Null &lt;:&lt; A1): A1 on Traversable (via traits like GenTraversableOnce): def toMap[K, V](implicit ev: A &lt;:&lt; (K, V)): Map[K, V] on Either: def joinRight[A1 &gt;: A, B1 &gt;: B, C](implicit ev: B1 &lt;:&lt; Either[A1, C]): Either[A1, C] on Try: def flatten[U](implicit ev: T &lt;:&lt; Try[U]): Try[U] You notice that, in all these examples, &lt;:&lt; is used in the same way: there is an implicit parameter list, with a single parameter called ev the type of this parameter is of the form Type1 &lt;:&lt; Type2The lowdown is that this pattern tells the compiler: Make sure that Type1 is a subtype of Type2, or else report an error.This is part of a feature called generalized type constraints. 4 There is another similar construct, =:=, which tells the compiler: 5 Make sure that Type1 is exactly the same as Type2, or else report an error.In what follows, I am focusing on &lt;:&lt; which turns out to be more useful, but just know that =:= is a thing and works in a very similar way.The why and how of this feature is the subject of the rest of this article! So for now, let’s take this as a recipe, a trick if you will, while we look at how this can be useful in practice.Let’s start with flatten on Option:def flatten[B](implicit ev: A &lt;:&lt; Option[B]): Option[B]What does flatten do, as per the documentation? It removes a level of nesting of options:scala&gt; val oo: Option[Option[Int]] = Some(Some(42))oo: Option[Option[Int]] = Some(Some(42))scala&gt; oo.flattenres1: Option[Int] = Some(42)This doesn’t make much sense if the type parameter A of Option is not, itself, an Option-of-something. So what should happen if you call flatten on, say, an Option[String]? I see two possibilities: The flatten method returns None. The compiler reports an error.The authors of the Scala standard library picked option 2, and I think that it’s a good choice, because most likely calling flatten in this case is not what the programmer intends. And lo and behold, the compiler doesn’t let this pass:scala&gt; val oi: Option[Int] = Some(42)oi: Option[Int] = Some(42)scala&gt; oi.flatten&lt;console&gt;:21: error: Cannot prove that Int &lt;:&lt; Option[B]. oi.flattenSo we have a generic type, Option[+A], which has a method, flatten, which can only be used if the type parameter A is itself an Option. All the other methods (except orNull which is similar to flatten) can be called: map, get, etc. But flatten? Only if the type of the option is right!One thing to realize is that we have something unusual here: a method which the compiler won’t let us call, not because we pass incorrect parameters to the method (in fact flatten doesn’t even take any explicit parameters), but based on the value of a type parameter of the underlying Option class. This is not something you see in Java, and you have probably rarely seen it in Scala.Looking again at the signature of flatten, we can see how the recipe is applied: implicit ev: A &lt;:&lt; Option[B] reads “make sure that A is a subtype of Option[B]”, and, since A stands for the parameter type of Option, we have: in the first case “make sure that Option[Int] is a subtype of Option[B]” in the second case “make sure that Int is a subtype of Option[B]”Obviously, Option[Int] can be a subtype of an Option[B], where B = Int (or B = AnyVal, or B = Any). On the flip side, there is just no way Int can be a subtype of Option[B], whatever B might be. So the recipe works, and therefore the constraint works. 6To get the hang of it, let’s look at another nice use case , toMap on Traversable:def toMap[K, V](implicit ev: A &lt;:&lt; (K, V)): Map[K, V]Translated into English: you can convert a Traversable to a Map with toMap, but only if the element type is a tuple (K, V). This makes sense, because a Map can be seen as a collection of key/value tuples. It wouldn’t make great sense to create a Map just out of a sequence of 5 Ints, for example.Similar rationales apply to the few other uses of &lt;:&lt; in the standard library, which all come down to constraining methods to work with a specific contained type only.In light of these examples, I find that applying this recipe is easy, even though the syntax is a bit funny. But I can think of a few questions: Can’t we just use type bounds which I thought existed to enforce this kind of type constraints? If this is a pattern rather than a built-in feature, why does &lt;:&lt; look so much like an operator? Does the compiler have special support for it? How does this whole thing even work? Is there an easier ways to achieve the same result?Let’s look into each of these questions in order.Question 1: Can’t we just use type bounds?Lower and upper boundsType bounds cover lower bounds and upper bounds. 7 These are well explained in the book Programming in Scala, so I won’t cover the basics here, but I will present some perspective on how they work.As a reminder, lower and upper bounds are expressed with builtin syntax: &gt;: and &lt;: (spec). You can read: T &gt;: U as “type T is a supertype of type U” or “type T has type U as lower bound” T &lt;: U as “type T is a subtype of type U” or “type T has type U as upper bound”A puzzlerLet’s consider the following:scala&gt; def tuple[T, U](t: T, u: U) = (t, u)tuple: [T, U](t: T, u: U)(T, U)My tuple function simply returns a tuple of the two values passed, whatever their types might be. Granted, it’s not very useful!What are T and U? They are type variables: they stand for actual types that will be decided at each call site (each use of the function in the source code). Here both T and U are abstract: we don’t know what they will be when we write the function. For example we don’t say that U is a Banana, which would be a concrete type.If we pass String and Int parameters, we get back a tuple (String, Int) in the Scala REPL:scala&gt; tuple(\"Lincoln\", 42)res1: (String, Int) = (Lincoln,42)Now let’s consider the following modification, which is a naive attempt at enforcing type constraints with type bounds:def tupleIfSubtype[T &lt;: U, U](t: T, u: U) = (t, u)I know, it’s starting to be like an alphabet (and symbol) soup! But let’s stay calm: the only change is that instead of specifying just T as type parameter, we specify T &lt;: U, which means “T must be a subtype of U”.The intent of tupleIfSubtype is to return a tuple of the two values passed, like tuple above, but fail at compile time if the first value is not a subtype of the second value.So does the newly added constraint work? Do you think that the compiler will accept to compile this?tupleIfSubtype(\"Lincoln\", 42)Before knowing better, I would have thought that the compiler: would decide that T = String would decide that U = Int see the type constraint T &lt;: U, which translates into String &lt;: Int fail compilation because obviously, String is not a subtype of IntBut it turns out that this actually compiles just fine!How can this be? Is the constraint not considered? Is it a bug in the compiler? A weird edge case? Bad language design? Or maybe, with T &lt;: U, the U is not the same as the second U in the type parameter section? This can quickly be proven false:scala&gt; def tupleIfSubtype[T &lt;: V, U](t: T, u: U) = (t, u)&lt;console&gt;:7: error: not found: type V def tupleIfSubtype[T &lt;: V, U](t: T, u: U) = (t, u)So the two Us are, as seemed to make sense intuitively, bound to each other (they refer to the same type).The answer to this puzzler turns out to be relatively simple: it has to do with the way type inference works, namely that type inference solves a constraint system (spec).What happens is that yes, I do pass String and Int, but it doesn’t follow that T = String and U = Int. Instead, the effective T and U are the result of the compiler working its type inference algorithm, given: the types of the parameters we actually pass to the function, the constraints expressed in the type parameter section, and, in some cases, the expression’s return type.If I write:scala&gt; def tuple[T, U](t: T, u: U) = (t, u)tuple: [T, U](t: T, u: U)(T, U)scala&gt; tuple(\"Lincoln\", 42)res3: (String, Int) = (Lincoln,42)then yes: T = String and U = Int because there are no other constraints. But when I introduce an upper bound, there is a constraint, and therefore a constraint system. The compiler resolves it and obtains T = String and U = Any:scala&gt; def tupleIfSubtype[T &lt;: U, U](t: T, u: U) = (t, u)tupleIfSubtype: [T &lt;: U, U](t: T, u: U)(T, U)scala&gt; tupleIfSubtype(\"Lincoln\", 42)res4: (String, Any) = (Lincoln,42)We can verify that the resulting types satisfy the constraints: 8 String is a String of course Int is a subtype of Any String is also a subtype of AnyPhew! So this makes sense. It’s “just” a matter of understanding how type inference works when type bounds are present.In the process we have learned that &lt;: and &gt;:, when used with abstract type parameters, do not necessarily produce results which are very useful, because the compiler can easily infer Any (or AnyVal or AnyRef) as solutions to the constraint system. 9Question 2: Why does &lt;:&lt; look so much like an operator?Lets dig a little deeper to understand how &lt;:&lt; works under the hood. Here is a simple type hierarchy used in the examples below:trait Fruitclass Apple extends Fruitclass Banana extends FruitParameter lists and type inferenceLet’s start with a couple more things you need to know in Scala: Functions can have more than one parameter list. Type inference operates parameter list per parameter list from left to right.In particular, an implicit parameter list can use types inferred in previous parameter lists.So let’s write the solution, without necessarily understanding it fully yet:def tupleIfSubtype[T, U](t: T, u: U)(implicit ev: T &lt;:&lt; U) = (t, u)This function has two parameter lists: (t: T, u: U) (implicit ev: T &lt;:&lt; U)Because type inference goes parameter list by parameter list, let’s start with the first one. You notice that there are no &gt;: or &lt;: type bounds! So: T is whatever specific type t has (say T = Banana) U is whatever specific type u has (say U = Fruit)Infix typesLooking at the second parameter list, we have to clear a hurdle: what kind of syntax is T &lt;:&lt; U? This notation is called an infix type (spec). “Infix” just means that a type appears in the middle of two other types, the same way the + operator appears in the middle in 2 + 2. The type in the middle (the infix type proper) can be referred to a an infix operator. Instead of this operator being a method, as is the case in general in Scala, it is a type.Let’s look at examples. You probably know types from the standard library such as:Map[String, Fruit]Either[String, Boolean]These exact same types can be written:String Map FruitString Either BooleanThe infix notation makes the parametrized type look like an operator, but an operator on types instead of values. Other than that, it’s just an alternate syntax, and really nothing to worry about!So based on the above:T &lt;:&lt; Umeans the the same as:&lt;:&lt;[T, U]A symbolic type nameNow, what is a &lt;:&lt;? It’s a type: the same kind of stuff as Map or Either, in other words, typically a class or a trait. It’s just that this is a symbolic name instead of an alphabetic identifier like Map. It could as well have been called SubtypeOf, and maybe it should have been!The implicit parameterSo once we reach the second (and implicit) parameter list:(implicit ev: T &lt;:&lt; U)we see that there is a parameter of type &lt;:&lt;, which itself has two type parameters, T and U. These are the same T and U we have in the first parameter list. They are bound to those, and these are known because type inference already did its magic on the first parameter list. Concretely, T is now assigned the type Banana and U the type Fruit!What the implicit parameter list says is this: “Find me, somewhere in the implicit search path, an implicit val, def, or class of type &lt;:&lt; which satisfies &lt;:&lt;[T, U]”. 10 And because T and U are now known, we need to find an implicit match for &lt;:&lt;[Banana, Fruit].The trick is to manage to have an implicit definition in scope which matches only if there is a subtype relationship between T and U. For example: T U Compiler Happiness Level Banana Fruit happy Apple Fruit happy Int Anyval happy Apple Banana unhappy String Int unhappy If we manage to create such an implicit definition, the constraint mechanism works. And we already know that the clever engineers who devised this have found a way to create such an implicit definition!By the way, we can play with this in the REPL using the standard implicitly function, which returns an implicit value for the given type parameter if one is found:implicitly[Banana &lt;:&lt; Fruit] // okimplicitly[Apple &lt;:&lt; Fruit] // okimplicitly[Int &lt;:&lt; Anyval] // okimplicitly[Apple &lt;:&lt; Banana] // not okimplicitly[String &lt;:&lt; Int] // not okTo summarize, we now have a pretty good level of understanding and we know that: we are talking about a library feature which relies on an implicit parameter with a funny symbolic type operator &lt;:&lt;.And we also know that the magic that makes it all work lies in the search for a matching implicit definition: if it is found, the subtyping relationship holds, otherwise it doesn’t and the compiler reports and error.Question 3: How does this whole thing even work?We could stop here and be happy to use &lt;:&lt; like a recipe, as if it was a core language feature. But that wouldn’t be very satisfying, would it? After all, we still miss the deeper understanding of how that magic implicit is defined, and why an implicit search for it may or may not match it. So let’s keep going!The implementationLet’s look at the implementation of &lt;:&lt;, which we find in the Scala Predef object 11:@implicitNotFound(msg = \"Cannot prove that ${From} &lt;:&lt; ${To}.\")sealed abstract class &lt;:&lt;[-From, +To] extends (From =&gt; To) with Serializableprivate[this] final val singleton_&lt;:&lt; = new &lt;:&lt;[Any, Any] { def apply(x: Any): Any = x}implicit def $conforms[A]: A &lt;:&lt; A = singleton_&lt;:&lt;.asInstanceOf[A &lt;:&lt; A]Wow! Can we figure it out? Let’s try.Which implicit?Let’s think about a simpler case of implicit search:def makeMeASandwich(implicit logger: Logger) = ...implicit def findMyLogger: Logger = ...val mySandwich = makeMeASandwichThe compiler, when you write makeMeASandwich without an explicit parameter, looks for an implicit in scope of type Logger. Here, the obvious matching implicit is findMyLogger, because it returns a Logger. So the compiler selects the implicit and in effect rewrites your code as:val mySandwich = makeMeASandwich(findMyLogger)The same mechanism is at work with implicit ev: T &lt;:&lt; U: the compiler must find an implicit of type T &lt;:&lt; U (or &lt;:&lt;[T, U] which is exactly the same). And there is only one implicit definition with type &lt;:&lt;-of-something in the whole standard library, which is:implicit def $conforms[A]: A &lt;:&lt; ANow there is a bit of a twist, because the implicit is of type &lt;:&lt;[A, A], with a single type parameter A, which in addition is abstract. 12 Anyhow, this means that our function parameter ev of type &lt;:&lt;[T, U] must, somehow, “match” with &lt;:&lt;[A, A].If we ask ourselves: what does it take for this implicit of type &lt;:&lt;[A, A] to be successfully selected by the compiler? The answer is that one should be able, for some type A to be determined, to pass a value of type &lt;:&lt;[A, A] to the parameter of type &lt;:&lt;[T, U]. Another way to say this is that &lt;:&lt;[A, A] must conform to &lt;:&lt;[T, U]. If we can’t do this, the implicit search will fail.VarianceHow does this conformance work? This takes us to the notion of variance, which is always a fun thing. Consider a Scala immutable Seq. It is defined as trait Seq[+A]. The little + says that if I require a Seq[Fruit], I can pass a Seq[Banana] just fine:def takeFruits(fruits: Seq[Fruit]) = ...takeFruits(Seq(new Banana))This is called covariance (the subtyping of the type argument goes in the same direction as the enclosing type). Without the notion of covariance and contravariance (where subtyping of the type argument goes in the opposite direction as the enclosing type), you: either can never write code like this (everything is invariant) or you have an unsound type system 13Besides collections, functions are another example where variance and contravariance matter. Say the following process function expects a single parameter, which is a function of one argument:def process(f: Banana =&gt; Fruit)I can of course pass to process a function with these exact same types:def f1(f: Banana): Fruit = fprocess(f1)But Scala’s support for subtyping also applies to functions: a function can be a subtype of another function. So I can pass a function with types different from Banana and Fruit without breaking expectations as long as the function: takes a parameter which is a supertype of Banana returns a value of a subtype of FruitFor example:def f2(f: Fruit): Apple = new Appleprocess(f2)This is the magic of variance, and you can convince yourself that it makes sense from the point of view of the process function: expectations won’t be violated.Functions are not a special case in Scala from this point of view: a function of one parameter is defined (in a simplified version) as a trait with the function parameter as contravariant and the result as covariant:trait Function1[-From, +To] { def apply(from: From): To }Putting everything togetherAfter this detour in variance land, let’s get back to &lt;:&lt; and the implicit parameter. The implicit &lt;:&lt;[A, A] will conform to the parameter &lt;:&lt;[T, U] if it follows the variance rules. So what’s the variance on &lt;:&lt;[T, U] in Predef?&lt;:&lt;[-From, +To]This is the same as Function1[-From, +To] and in fact &lt;:&lt; extends Function1! So our problem comes down to the following question: if somebody requires a function:T =&gt; Uwhat constraints must be satisfied so I can pass the following function:A =&gt; AWith variance rules, we know it will work if: A is supertype of T and A is subtype of UWritten in terms of bounds:T &lt;: A &lt;: UWhich means of course that T &lt;: U: T must be a subtype of U!To summarize the reasoning: the only eligible implicit definition in scope which can possibly be selected by the compiler to pass to our function is selected if and only if T is a subtype of U! And that’s exactly what we were looking for! 14You can look at this from a slightly more general angle, which is that a function A =&gt; A can only be passed to a function T =&gt; U if T is a subtype of U. 15 You can in fact test the matching logic very simply with the built-in identity function:val f: Banana =&gt; Fruit = identity // okval f: Fruit =&gt; Banana = identity // not okThe same works with $conforms, which returns an &lt;:&lt;, which is also an identity function:val f: Banana =&gt; Fruit = $conforms // okval f: Fruit =&gt; Banana = $conforms // not okSo it is a neat trick that the library authors 16 pulled off here, combining implicits and conformance of function types to implement constraint checking.The nitty-grittyThe rest of the related code in Predef is about defining the actual &lt;:&lt; type and creating a singleton instance returned by def $conforms[A], because in case the implicit search matches, it must return a real value after all.You could write it minimally (using &lt;::&lt; in these attempts so as to not clash with the standard &lt;:&lt;):sealed trait &lt;::&lt;[-From &lt;: To, +To] extends (From =&gt; To) { def apply(x: From): To = x}implicit def $conforms[A]: A &lt;::&lt; A = new &lt;::&lt;[A, A] {}But oops, the compiler complains:scala&gt; def tupleIfSubtype[T, U](t: T, u: U)(implicit ev: T &lt;::&lt; U) = (t, u)&lt;console&gt;:23: error: type arguments [T,U] do not conform to trait &lt;::&lt;'s type parameter bounds [-From &lt;: To,+To] def tupleIfSubtype[T, U](t: T, u: U)(implicit ev: T &lt;::&lt; U) = (t, u)The good news is that the following version, using an intermediate class, works:sealed trait &lt;::&lt;[-From, +To] extends (From =&gt; To)final class $conformance[A] extends &lt;::&lt;[A, A] { def apply(x: A): A = x}implicit def $conforms[A]: A &lt;::&lt; A = new $conformance[A]So this works great, with a caveat: every time you use my version of &lt;::&lt;, a new instance of the anonymous class is created. Since we just want an identity function, which works the same for all types and doesn’t hold state, it would be good to use a singleton so as to avoid unnecessary allocations. We could try using an object, since that’s how we do singletons in Scala, but that’s a dead-end because objects cannot take type parameters:scala&gt; implicit object Conforms[A] extends (A =&gt; A) { def apply(x: A): A = x }&lt;console&gt;:1: error: ';' expected but '[' found.implicit object Conforms[A] extends (A =&gt; A) { def apply(x: A): A = x }So in the end the standard implementation cheats by creating an untyped singleton using Any, and casting to [A &lt;:&lt; A] in the implementation of $conforms. Here is my attempt, which works fine:private[this] final object Singleton_&lt;::&lt; extends &lt;::&lt;[Any, Any] { def apply(x: Any): Any = x}implicit def $conforms[A]: A &lt;::&lt; A = Singleton_&lt;::&lt;.asInstanceOf[A &lt;::&lt; A]The actual Scala implementation opts for using a val instead of an object (maybe to avoid the cost associated with an object’s lazy initialization):private[this] final val singleton_&lt;:&lt; = new &lt;:&lt;[Any, Any] { def apply(x: Any): Any = x}implicit def $conforms[A]: A &lt;:&lt; A = singleton_&lt;:&lt;.asInstanceOf[A &lt;:&lt; A]We are only missing one last bit:@implicitNotFound(msg = \"Cannot prove that ${From} &lt;:&lt; ${To}.\")sealed abstract class &lt;:&lt;[-From, +To] ...This helps provide the user with a nice message when the implicit is not found. From a syntax perspective, it is a regular annotation, which applies to the abstract class &lt;:&lt;. The annotation is known by the compiler. 17So here we are: the implementation is explained! It’s a bit trickier than it should be in order to prevent extra allocations. I confess that I am a bit disappointed that there doesn’t seem to be a way to avoid an instanceOf: even though it’s local to the implementation and therefore the lack of safety remains under control, it would be better if it could be avoided.An implicit conversionOne thing you might wonder is what to do with the ev parameter. After all, a value must be passed to the function when the implicit is found (when it’s not found, the compiler blows up so ev doesn’t need an actual value).A first answer is that you don’t absolutely need to use it. It’s there first so the compiler can check the constraint. That’s why it’s commonly called ev, for “evidence”: its presence stands there as a proof that something (an implicit) exists.Nonetheless, ev must have a value. What is it? It’s the result of the $conforms[A] function, which is of course of type &lt;:&lt;[T, U]. And we have seen above that &lt;:&lt; extends T =&gt; U. So the result of $conforms[A] is a function, which takes an A and returns an A, that is, an identity function. And it not only returns a value of the same type A, but it actually returns the same value which was passed (that’s the idea of an identity function).And you see that in the implementation:def apply(x: Any): Any = xIt follows that ev has for value an identity function from T to U: it takes a value t of type T and returns that same value but with type U. This is possible, and makes sense, as we know that T is a subtype of U, otherwise the implicit wouldn’t have been found.But there is more: ev is also an implicit conversion from T to U (from Banana to Fruit). How so? Because it has the keyword implicit in front of it, that’s why!To contrast with regular type bounds, if you write:def tupleIfSubtype[T &lt;: U, U](t: T, u: U) = ...the compiler knows that T is a subtype of U, thanks of the native semantic of &lt;:. But with &lt;:&lt;, the compiler knows nothing of the sort based on the type parameter section.However the presence of the implicit ev function makes it possible to use the value t of type T as a value of type U. The subtype relationship can be seen as an implicit conversion. This is much safer than using t.asInstanceOf[U]. You could also be extra-explicit and write:ev(t)So you can write:def tToU[T, U](t: T, u: U)(implicit ev: T &lt;:&lt; U): U = tor:def tToU[T, U](t: T, u: U)(implicit ev: T &lt;:&lt; U): U = ev(t)Without the implicit conversion, the compiler complains:scala&gt; def tToU[T, U](t: T, u: U): U = t&lt;console&gt;:10: error: type mismatch; found : t.type (with underlying type T) required: U def tToU[T, U](t: T, u: U): U = tYou can see how Option.flatten makes use of the ev() function:def flatten[B](implicit ev: A &lt;:&lt; Option[B]): Option[B] = if (isEmpty) None else ev(this.get)In summary, all these features fall together to produce something that makes a lot of sense and is useful.Question 4: Is there an easier ways to achieve the same result?There is at least one other way something like what &lt;:&lt; does can be achieved. The idea is that a method such as flatten does not need to be included on the base class or trait, in this case Option. Instead, Scala has, via implicit conversions, what in effect achieves extension methods (AKA the “extend my library” pattern).So say that such an extension method is only available on values of type Option[Option[T]]:implicit class OptionOption[T](val oo: Option[Option[T]]) extends AnyVal { def flattenMe: Option[T] = oo flatMap identity}If we try to apply it to Some(Some(42)), the method is found and the flattening works:scala&gt; Some(Some(42)).flattenMeres0: Option[Int] = Some(42)If we try to apply it to Some(42), the method is not found and the compiler reports an error:scala&gt; Some(42).flattenMe&lt;console&gt;:13: error: value flattenMe is not a member of Some[Int] Some(42).flattenMeBut I see a few differences with the &lt;:&lt; operator: You need to create one implicit class for each type supporting a conversion. In the case of Option, for example, you need one implicit class taking an Option[Option[T] to support flatten, and another implicit class to support orNull. So this requires a bit more boilerplate than &lt;:&lt; per method. I am not sure whether there something similar to @implicitNotFound to report a better error in case of problem.So why not do it this way? I think that a good case can be made that it is easier to understand in the case of the relatively simple examples we have seen so far.UPDATE 2015-12-10: Somebody kindly pointed out that at the time generalized type constraints were implemented, Scala didn’t yet have value classes or implicit classes. Missing value classes meant boxing overhead when running extension methods, while missing implicit classes just meant more boilerplate. So using an implicit value class as I did above was not a great option at the time.On the other hand, &lt;:&lt; is a more flexible library feature which you can reuse easily and even combine with other implicits, like in this example using Shapeless: 18def makeJava[F, A, L, S, R](f: F)(implicit ftp: FnToProduct.Aux[F, L =&gt; S], ev: S &lt;:&lt; Seq[R], ffp: FnFromProduct[L =&gt; JList[R]])Finally, when using type bounds, the constraints expressed with &lt;: and &gt;: can only apply to the method type parameters (or class type parameters when they are used on a class). This is very useful, as we have seen. But when using &lt;:&lt;, you can constrain any two types in scope, and even impose multiple such constraints. Your imagination is the limit:trait T[A, B] { type C type D def constrainTwoTraitParams (implicit ev: A &lt;:&lt; B) = () def constrainTraitParamAndTypeMember(implicit ev: A &lt;:&lt; C) = () def constrainTwoTypeMembers (implicit ev: C &lt;:&lt; D) = () def constrainMore[Y](c: Y) (implicit ev1: A &lt;:&lt; B, ev2: Y &lt;:&lt; C) = ()}class C extends T[Banana, Fruit] { type U = Fruit type V = String}You can even go further and constrain not only these types directly, but higher-order types, as in this (math- and symbol-heavy) example from Miles Sabin:def size[T](t: T)(implicit ev: (¬¬[T] &lt;:&lt; (Int ∨ String))) = ???In this case, the constraint is not directly on the T type parameter, but on ¬¬[T].This might be, after all, how the term “generalized type constraint” gets its name.PerspectivesWe have seen how regular type bounds: behave when using abstract type parameters but don’t work to actually enforce certain useful constraints.We have also seen how we can use instead a generalized type constraint expressed with &lt;:&lt;: to implement methods which can only be used when types are aligned in a certain way and how &lt;:&lt; is not a built-in feature of the compiler, but instead a library feature implemented via a smart trick involving implicit search and type conformance.Finally, we have considered: how the simple use cases in the standard library could be implemented differently but also how &lt;:&lt; is a more general tool.So is &lt;:&lt; is worth it? Should it be part of the standard library, and should Scala developers learn it?I think that the feature suffers from the fact that is is not properly documented, explained, and put in perspective. It also suffers from being a symbolic name with no agreed upon way to pronounce it!The standard library uses of &lt;:&lt; could be replaced with “extension methods”, which would achieve the same result via Scala features which are easier to understand and familiar to most Scala programmers. I think that this argues against the presence of &lt;:&lt; in the standard library, especially at the level of Predef, and if this was introduced today, my inclination would be to recommend leaving it to third-party libraries such as Shapeless which actually benefit the most from this kind of advanced features.On the plus side, when used &lt;:&lt; as a recipe, it is easy to understand and useful, and I can’t help but being impressed that generalized type constraints are implemented at the library level, and that they can emerge from powerful underlying language features such as type inference and implicits.This is typical of Scala, and in line with the principle of Martin Odersky that it is better to keep the core language small when possible. So even though the explanation of how &lt;:&lt; works might seem a bit tricky, you can take comfort in thinking that in other languages this might be compiler code, not library code. But I also understand how some programmers 19 might be bothered by all the machinery behind features like this.As for me, I am keeping generalized type constraints in my toolbox, but I like seeing the feature as a gateway to a more in-depth understanding of Scala. I hope this post will help others along this path as well!Did I get anything wrong? Please let me know! Other suggestions include “Madonna wearing a button-down shirt” and “Angry Donkey”! &#8617; It is valid to call this an operator, even though it is not built into the compiler, and is not an operator on values like +: it is instead an operator on types. In fact the Scala spec calls this an infix operator. &#8617; Using generalized type constraints - How to remove code with Scala 2.8. &#8617; I haven’t found a good explanation for the adjective generalized. This makes you think that there are more specific type constraints. But which are those then? &#8617; It seems that there was another &lt;%&lt; operator as well, but it’s nowhere to be found in Scala 2.11. I suspect that, since it was related to the concept of view bounds, which are being deprecated, and probably had no use in the Scala standard library, it was removed at some point. &#8617; The authors of the standard library could have used =:= to say that the type has to be exactly an Option[B], but using the subtyping relationship allows the result of the expression to be a supertype. Assuming Banana &lt;: Fruit: scala&gt; Some(Some(new Banana)).flatten: Option[Fruit]res2: Option[Fruit] = Some(Banana()) &#8617; “Lower bound” and “upper bound” refer to the type hierarchy: if you draw a type hierarchy with the supertypes at the top and subtypes at the bottom, “lower” means being closer to the bottom, and “upper” means closer to the top. So a “lower bound” for a type means the type cannot be under that. Similarly, an “upper bound” means the type cannot be above that. &#8617; The compiler could have chosen the solution Any / Any, or AnyRef / Any. But these would be less useful and the compiler tries to be more specific when it can. &#8617; The Typelevel team in particular wants to address that kind of not-very-useful type inference. &#8617; That’s how all implicit searches work, see Where does Scala look for implicits?. &#8617; In a 2014 commit, the implementation switched to $conforms instead of conforms to avoid accidental shadowing. &#8617; It is a bit unusual to see an implicit definition which is parametrized with an an abstract type parameter. Martin Odersky commented on this in a blog post: “The new thing in 2.8 is that implicit resolution as a whole has been made more flexible, in that type parameters may now be instantiated by an implicits search. And that improvement made these classes useful.” &#8617; Mutable Scala collections and arrays in Scala, in particular, are invariant so you cannot assign a mutable.ArrayBuffer[Banana] to a mutable.ArrayBuffer[Fruit], or an Array[Banana] to an Array[Fruit]. Immutable Scala collections are covariant, because it is convenient and safe for them to be. Java arrays are covariant and therefore unsafe! &#8617; The compiler needs to be able to figure out conformance of types outside of implicit search, including every time you pass a parameter to a function. So it’s relatively easy to imagine how the compiler goes through the implicit search path, checking each available implicit, and pondering: “Does this particular implicit have a type which conforms to the required implicit parameter type? If so, I’ll use it, otherwise I’ll continue my search (and fail if the search ends without a match).”. &#8617; In versions of Scala prior to 2.8, the predefined identity function was defined as implicit, and you could use it to implement generalized type constraints. However this early implementation had issues related to implicit search, therefore a new solution was implemented in 2.8 and &lt;:&lt; was introduced. But in fact &lt;:&lt; acts exactly like an implicit identity function under another name! James Iry commented on this topic: BTW, prior to 2.8 the idea could more or less be expressed with def accruedInterest(convention: String)(implicit ev: I =&gt; CouponBond): Int = ... I say more or less because ev could be supplied by any implicit function that converts I to CouponBond. Normally you expect ev be the identity function, but of course somebody could have written an implicit conversion from say DiscountBond to CouponBond which would screw things up royally. &#8617; Jason Zaugg appears to be the mastermind behind it. &#8617; Here is a short blog post on this annotation. &#8617; For more uses of &lt;:&lt;, see Unboxed union types in Scala via the Curry-Howard isomorphism by Miles Sabin. &#8617; See Yang Zhang’s post, which made some noise a while back. &#8617; " }, { "title": "Reading plan: October checkin", "url": "/posts/reading-plan-october-checkin/", "categories": "", "tags": "reading", "date": "2014-09-30 20:49:00 -0700", "snippet": "My goal for the month of September was making progress reading Intuition Pumps and Other Tools for Thinking. I am now at page 60, so I consider that this was a success. It does help to have small, ...", "content": "My goal for the month of September was making progress reading Intuition Pumps and Other Tools for Thinking. I am now at page 60, so I consider that this was a success. It does help to have small, achievable goals!" }, { "title": "Reading plan: September checkin", "url": "/posts/reading-plan-september-checkin/", "categories": "", "tags": "reading", "date": "2014-09-15 11:20:00 -0700", "snippet": "My goal for the month of July was: continue on the synthesis and try to have a closure on it, spending about 2 more hours I didn&#8217;t have any goals for August. I only managed to spend another h...", "content": "My goal for the month of July was: continue on the synthesis and try to have a closure on it, spending about 2 more hours I didn&#8217;t have any goals for August. I only managed to spend another hour in July, and I don&#8217;t have a closure. So I have decided to park this work for a while. The good news is that I have just started reading Daniel Dennett&#8217;s Intuition Pumps and Other Tools for Thinking this month, one of the books on my reading plan for 2014. I have decided to read this book not in digital format, but on good old paper. I have also decided to allow myself to trash this book with highlights and annotations as I see fit. My goal for the rest of the month is simply to make progress reading this book." }, { "title": "Rationalizing the iPhone 6 Plus", "url": "/posts/rationalizing-iphone-6-plus/", "categories": "Technology", "tags": "technology, shopping, iphone", "date": "2014-09-13 21:28:00 -0700", "snippet": " iPhone 6 and iPhone 6 PlusDaniel Miessler asked himself which iPhone 6 to get and I did the same. Here are my thoughts.First, whether considering the 6 or 6 Plus, there is definitely a decrease...", "content": " iPhone 6 and iPhone 6 PlusDaniel Miessler asked himself which iPhone 6 to get and I did the same. Here are my thoughts.First, whether considering the 6 or 6 Plus, there is definitely a decrease in pocketability. But I see the move to larger screens as necessary 1 as we use the devices we call phones more and more as computers-which-you-carry-in-your-pocket. 2After Apple’s keynote, I hesitated a little bit between the iPhone 6 and the 6 Plus. Initially I was pretty sure that I wanted the larger size. Then I printed the templates and realized that the Plus was larger than I had expected. I started having doubts about whether I would like the larger device, in particular: Will it fit in a pocket relatively comfortably, or will it be a constant annoyance? 3 Will I be able to use it with a single hand at least part of the time? 4In the end I decided to get the 6 Plus and to consider it an experiment: a device so different from the ones I have had so far (iPhone 3G, 5 iPhone 4, iPhone 5) might change my habits in some interesting ways.I am also experimenting in another way: I have had AT&amp;T contracts since the iPhone 3G in 2008. This time around I ordered an unlocked iPhone 6 Plus for use on the T-Mobile network. 6 I like the idea of having an unlocked device, as well as having more options for plans. I will probably try to get one of the T-Mobile prepaid plans (which they don’t advertise much). 7Here are the features specific to the 6 Plus I am looking forward to: Improved camera with optical stabilization. I have kids and I consider the camera which I carry with me at all times important. 8 Bigger screen. Many activities should be more comfortable with a larger screen. Will I use my phone for reading more? Will I still be interested in getting the next Kindle? Improved battery life. Depending on which feature you are looking at, the battery life is supposed to be better across the board. For example, Wi-Fi browsing is 10 % longer and standby 60 % longer. I am also looking forward to the following features shared by the 6 and 6 Plus: Improved speed. The CPU improvement announced is “only” 25% over the iPhone 5S, but the 5S was about twice faster than the 5, so that will be a nice improvement. The new hardware design. I like the rounded body, which looks more like the original iPhone and should make the device pleasant to hold. The iPhone 3G, while plasticky, was also great to hold due to the curve of its back, and from this perspective the iPhone 4 to iPhone 5S design was a step back. Apple Pay. I don’t need to pay in stores all day long, and this won’t revolutionize payments, 9 but I am intrigued by this combination of Touch ID and NFC. Will it work as reliably and fast? Will it work in stores I am likely to visit? The US is finally implementing “Chip and PIN” cards to help prevent fraud. This means that it might become a little slower to pay with cards than it has been so far, as you will have to enter your PIN. 10 Could Apple Pay be slightly more interesting due to this move? I am looking forward to retire my beat up iPhone 5! We can say it now that Apple is finally in the race! &#8617; Not in all pockets in the case of the iPhone 6 Plus, Galaxy Note, or the 6” Nokia Lumia 1520. There is word that Google might come out with a large Nexus phone soon as well. &#8617; If not, I can always consider 5.11 TacLite Pro Pant. I don’t think I can consider a European carryall. &#8617; The iPhone 6 Plus has a feature called Reachability to help with this: a double-tap of the home button brings down the content to make it reachable by the thumb. &#8617; Steve Jobs referred to the original iPhone’s screen as “giant”. Times have changed. &#8617; I already knew the price of the device, but it was still a bit of a shock to see the final price in the shopping cart (almost $1,000 with sales tax!). It is a neat trick that the big US carriers have pulled to subsidize the price of devices over 18-24 months. I would bet that a large majority of smartphone users do not know the actual price of the device. &#8617; I don’t have an absolute guarantee that this will work out. But the phone will be unlocked and T-Mobile has a “bring your own device” option so I am hoping things will be smooth. &#8617; The camera of my iPhone 5 has gathered dust inside, and I find myself reaching for my wife’s iPhone 5S regularly. I also take my SLR on specific occasions. &#8617; For two reasons: because the major credit card companies are still involved, and because the system is limited to the Apple ecosystem. &#8617; This American Express FAQ says: “If you have a Chip and PIN enabled Card, you must use your PIN (Personal Identification Number) when prompted, to pay for goods and services”. &#8617; " }, { "title": "Reading plan: July checkin", "url": "/posts/reading-plan-july-checkin/", "categories": "", "tags": "reading", "date": "2014-07-16 15:20:00 -0700", "snippet": "My goals for the month of June were: spend 3 quality hourscomplete synthesis of the organ book I spent 5 hours in June, which is good as that means I did more than planned! However that was not eno...", "content": "My goals for the month of June were: spend 3 quality hourscomplete synthesis of the organ book I spent 5 hours in June, which is good as that means I did more than planned! However that was not enough to complete that synthesis. It&#8217;s already mid-July and I have spent another hour on the synthesis. For the rest of the month, I will continue on the synthesis and try to have a closure on it, spending about 2 more hours. For next month, I want to separate the tasks: planned readingwriting about what I read I do not plan to write about all the books I read, certainly not in depth. Still, if I want to read at least one other book this year, I better start doing the reading part regularly, and if writing is needed consider that a separately planned task." }, { "title": "Thoughts on the Swift language", "url": "/posts/thoughts-on-swift-language/", "categories": "Programming", "tags": "", "date": "2014-06-03 15:42:00 -0700", "snippet": "What it isI am not a language designer but I love programming languages, so I can’t resist putting down a few rough thought on Swift, the new programming language announced on Monday by Apple. It i...", "content": "What it isI am not a language designer but I love programming languages, so I can’t resist putting down a few rough thought on Swift, the new programming language announced on Monday by Apple. It is designed to make Objective-C, the main language used to build apps on iOS and OS X, a thing of the past. I think it’s fair to say that this was, for developers, the highlight of Monday’s WWDC keynote.Objective-C is a dinosaur language, invented in the early 1980s. If you know any relatively more modern higher-level language (pick one, including C#, Scala, even Hack), it is clear that it has too much historical baggage and not enough of the features programmers expect.John Siracusa captured the general idea in his 2005 Avoiding Copland 2010 article and its revision, Copland 2010 revisited: Apple’s language and API future, and has kept building a really good case since, in various podcasts, that Apple had to get their act together. Something, anything, had to be done. 1There was a possibility that Apple would keep patching Objective-C, moving toward a superset of a safe subset of it. But I don’t think that anybody not working at Apple saw Swift coming that, well, swiftly. 2Why this is good for programmersReactions to Swift so far seem mostly positive. (I don’t tend to take the negative reactions I have seen seriously as they are not argumented.) As Jeff Atwood tweeted: “TIL nobody actually liked Objective-C.”. I share the positive feeling for three reasons:First, I believe that programming languages matter: they can make developers more or less productive, they can encourage or instead discourage entire classes of errors, they can help or hinder reuse of code, they can make developers more or less happy.With brute force and billions of dollars, you can overcome many programming languages deficiencies. But it remains a waste of valuable resources to write code in an inferior language. Apple has now shown that it understands that and has acted on it, and they should be commended for it.Second, concepts which many Objective-C developers might not have been familiar with, like closures, immutable variables, functional programming, generics, pattern matching, and probably more, will now be absorbed and understood. This will lead to better, more maintainable programs. This will also make these developers interested in other languages, like Scala, which push some of these concepts further. The bar will be generally raised.Finally, arguments over the heavy, ugly syntax of Objective-C, and its lack of modern features can be put to rest: Apple has decided the future path for iOS and OS X developers. That ship has sailed.Where it fitsWhat kind of language is Swift? I noticed on Twitter that many had a bit of trouble positioning the language. Did Apple reinvent JavaScript? Or Go? Is Swift functional first? Is it even like Scala? What about C#? Or Clojure or XQuery?I haven’t seen anything in Swift that is not in other programming languages. In fact, Swift features can be found in dozens of other languages (in Lattner’s own words, “drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list”), and that’s why many have found similarities with their language of choice. So Swift is not “innovative”. Instead it is a reasonable mix and match of features which make sense for the Apple ecosystem.Here are a few essential aspects of Swift which are not language features but which put it in context. These all appear to be essential to Apple: Owned by Apple: Swift is fully owned by Apple. It does not depend on Oracle (Java/JVM), Microsoft (.NET), or Google. Objective-C integration: Swift is designed to integrate really well with Objective-C. In fact, this is likely the second most important reason Apple felt they had to create their own language (in addition to ownership). There are precedents: Groovy, Scala, Clojure, Kotlin, Ceylon and others are designed to interoperate well with Java; CoffeeScript with JavaScript; Hack with PHP; Microsoft’s CLR was designed from the get go as a multi-language VM. This is important for initial adoption so that existing code can be reused and the new language progressively introduced. It would have been possible, but much harder, for Apple to pick an existing language. Static typing: Swift is a statically-typed language. There is type inference, which means you don’t have to actually write down the types everywhere, in particular within functions. But types are there nonetheless. So it looks more like dynamic languages, but is not one. 3 A dynamic feel: This is part of the “modern” aspect of Swift: a move toward concision which appeals to programmers used to dynamic languages, but with the presence of static typing under the hood. This combination of terseness and static typing is something Swift shares with Scala. Swift has a REPL and Playgrounds (the interactive demo by Chris Lattner looked impressive), which includes what some other environments call “worksheets” and a bit more. Clearly that’s the direction development tools are taking. All of this is becoming mainstream, which again raises the bar. Native compilation: Swift is compiled down to native code, like C, C++, Objective-C, Go, and Rust. There is no interpreter or VM, as in Java, JavaScript, C#, Ruby, PHP, or all dynamic languages, besides the small Objective-C runtime. Also, it doesn’t have a real garbage collector: it uses automatic reference counting (ARC). Swift is a bit odd in that native compilation and lack of full garbage collection make it closer to systems language, yet it is clearly designed to build applications. I wish the balance had moved more toward the higher level rather than the lower level, but it’s an interesting middle ground. What’s disappointingHere are a few aspects of Swift which, at first glance, disappoint me a bit. Keeping in mind that this is a first version of Swift which has room to grow: Openness: So far Apple has not announced that the Swift compiler would be open source, like the Objective-C compiler. This is a big question mark. It would be the right thing for them to do to open the compiler, and I am hopeful that they will. Garbage collection: It’s likely that Apple considered that ARC was good enough in most situations, and it makes interoperability with Objective-C (compatibility in terms of memory management) much easier to handle. Still, this would give me trouble. Lack of proper garbage collection means more memory bugs to hunt down. Concurrency support: Swift doesn’t have async/await, like C#, Scala, and soon JavaScript, or futures and promises. Async support is important in client apps as much as in server apps. Type system: The type system appears very simple. This might be seen as good or bad. The reference book doesn’t even mention the word “variance”. (I suppose Swift picks a default, but doesn’t allow programmers to control that.) Persistent data structures: There doesn’t seem to be persistent data structures (which are truly immutable yet can be updated efficiently thanks to structural sharing), as in Clojure and Scala. These are incredible tools which many programmers have now found to be essential. Immutability, in general, gives you much increased confidence about the correctness of your code. I would miss them in Swift. Well, innovation: Dart, Go, Hack, and Swift show that it is very hard for big companies to come up with something really unique in their programming languages. Academia remains the place where new ideas are born and grow. Still, it would have been nice if there was one or two new things in Swift that would make it special, like for example Scala’s implicits which have turned out to have far-reaching consequences (several of which I really like). Browser and serverI am curious to see if Swift will see adoption on the server, for services. It might make sense for Apple to use Swift internally for their services, although having a language is not enough: you need proper infrastructure for concurrent and distributed computing. Swift is not there yet. But it could be in the future. This is a bit less important to Apple than the client at this time.What about the browser? Could one conceivably create a Swift-to-JavaScript compiler? I don’t see why not. JVM languages, from Java to Clojure to Scala, now compile to JavaScript. Swift currently uses ARC, but in a browser environment it could probably work with the JavaScript VM’s garbage collector.So there might be room, in years to come, for Swift to conquer more environments.Google!Where does Google stand with regards to this? It’s curious, but I think now that it’s Google which might have a programming language problem! Android uses Java but, as famous programming languages guy Erik Meijer tweeted, “Swift makes Java look tired.” (To be fair, most languages make Java look tired.)Google also has Dart, which so far hasn’t been positioned as a language to develop Android or server apps. But maybe that will come. Go is liked by some for certain types of server applications, but is even more of a “systems language” than Swift, and again Google hasn’t committed to bringing it as a language to write Android apps.Will Google come up with yet another programming language, targeted at Android? The future will tell. If it was me, which of course it isn’t, Scala or a successor would be my choice as a great, forward-looking language for Android. And Google could point their Android developers to Scala and say “Look, it looks very much like Swift which you already know!” ;)Did I miss anything? Let me know in the comments or on Twitter. Back in 2009 I even tweeted: MS has Anders Hejlsberg (C#). The JVM world has Martin Odersky (Scala). Apple should work with Odersky on the next language for OS X. Obviously it wasn’t Odersky, but Chris Lattner, who got to be the mastermind of Swift. &#8617; Good job by Apple, by the way, to have managed to keep it under covers so well since July 2010! &#8617; There is a difference with with languages that have optional types, like Dart and Hack. Dynamic, optionally typed, and statically typed languages can, from a syntax perspective, look very similar. But under the hood some pretty different things take place. &#8617; " }, { "title": "Reading plan: June 1 checkin", "url": "/posts/reading-plan-june-1-checkin/", "categories": "", "tags": "reading", "date": "2014-06-02 21:18:00 -0700", "snippet": "My goals for the month of May were: 3 quality hours of readingcomplete synthesis of the organ bookpick the next book to read and start I did manage to do a bit more than 3 hours of planned reading,...", "content": "My goals for the month of May were: 3 quality hours of readingcomplete synthesis of the organ bookpick the next book to read and start I did manage to do a bit more than 3 hours of planned reading, so that&#8217;s a success! Now &#8220;reading&#8221; is a bit of a misnomer because all of this time was spent working on the synthesis. But that was not enough to complete it, so the success is only partial. Surely, 3 more hours in June should allow me to complete the synthesis this time? Ok, that&#8217;s the plan." }, { "title": "Reading plan: May 1 checkin", "url": "/posts/reading-plan-may-1-checkin/", "categories": "", "tags": "reading", "date": "2014-04-30 22:43:00 -0700", "snippet": "My goals for the end of March were: 3 quality hours of readingcomplete synthesis of the organ bookpick the next book to read and start in March In March, I did spend 2 hours out of the 3 planned, b...", "content": "My goals for the end of March were: 3 quality hours of readingcomplete synthesis of the organ bookpick the next book to read and start in March In March, I did spend 2 hours out of the 3 planned, but that wasn&#8217;t quite enough to complete the synthesis, and I haven&#8217;t picked the next book yet. In April, I completely dropped the ball: I missed the April 1 checkin and didn&#8217;t do anything related to my reading plan during the month. I had scheduled 1/2 hour on the reading plan each Wednesday and Thursday afternoon. But I found myself &#8220;too busy&#8221; or too guilty to take that time off work. Yet it&#8217;s too difficult to find quality time late in the evening. So for May, let&#8217;s try to get back on the wagon and to do 3 hours spread over the whole month. Otherwise, same goals: complete the synthesis, and pick the next book." }, { "title": "Why I am returning my Seiki 39&quot; 4K &quot;monitor&quot;", "url": "/posts/why-i-am-returning-my-seiki-39-4k/", "categories": "Technology", "tags": "technology, shopping", "date": "2014-03-11 10:53:00 -0700", "snippet": " Notice the tiny 27\" iMac behind the SeikiAfter reading some recent blog posts (such as 4K is for programmers) about using the Seiki SE39UY04 39-Inch 4K TV as a computer monitor, I figured it mi...", "content": " Notice the tiny 27\" iMac behind the SeikiAfter reading some recent blog posts (such as 4K is for programmers) about using the Seiki SE39UY04 39-Inch 4K TV as a computer monitor, I figured it might be an interesting experiment and I ordered last week a slightly used one. The price including taxes and free shipping was just under $500.First, I do want more pixels 1 but it’s a bit unclear to me whether a 39” monitor is workable or even desirable on a desk. I currently use an old 30” Dell monitor, so I am used to big screens, but 39” is gigantic! 2Second, that particular monitor is sold as a TV and not designed to be used as computer monitor in the first place. This means that it has important limitations, such as the absence of a direct input mode, and an abysmal 30 Hz input refresh rate at the native resolution. (This doesn’t mean that you see flickering, as on old CRT monitors. It just means that you only get at most 30 different frames every second.)So I got the monitor on Friday and immediately set it up. It was easy: connect the HDMI cable to the MacBook Pro’s built-in HDMI output turn on the TV and wait for it to “boot” turn down “sharpness” to 0 (important, otherwise you see artifacts) play a bit with brightness (possibly too bright even at the minimum) and contrastWith the image adjustments, picture quality is pretty good. I don’t think it’s possible to get this monitor to have colors that are acceptable for photography or video, but for programming it seems decent.However the issue that was an immediate turn off is the mouse lag. In practice, this translates to mouse or trackpad input which is very imprecise. Keyboard input is also visibly lagging.It just take a while, it seems, for the output of the computer to actually make it to the screen. I suspect that part of the issue might not be so much the 30 Hz refresh rate (although you do notice that when moving stuff around and scrolling) as image processing done by the TV.It is a known issue 3 that monitors and TVs do crazy (and unneeded) image processing which increases the time between receiving data from the computer and actually showing it on the screen. Some TVs have a “direct” or “game” mode which alleviates the problem, but the Seiki doesn’t.I tried a couple of things to improve the lag: I upgraded the firmware, and even tried the 50” firmware. I tried SmoothMouse, which seemed to improve things a tiny bit.In the end I don’t think I can get used to the lag, so the Seiki is going back. I will revisit getting a new monitor once the dust around 4K settles a little bit. There is upcoming 60 Hz output support in OS X for the MacBook Pro, and there should be many new 4K monitors of various sizes coming out this year. I am not sure yet if I would choose something as big as 39”, but we’ll see! The built-in 15” Retina MacBook Pro display is 2880x1800, my external 30” Dell is 2560x1600 and the Seiki is 3840x2160. Having more pixels is good, whether to get closer to a “retina” resolution, or just to get more content on screen (like a debugger next to the app being debugged). &#8617; Ideally, I would like the whole virtual space around me to be something like a monitor, where I could put virtual items, and use the brain’s spatial abilities to make the best use of it. But hardware and software are not there yet. &#8617; See John Siracusa on various podcasts and John Carmack’s post on display latency. &#8617; " }, { "title": "Reading plan: March 1 checkin", "url": "/posts/reading-plan-march-1-checkin/", "categories": "", "tags": "reading", "date": "2014-03-09 17:21:00 -0700", "snippet": "At last month&#8217;s checkin, I had the following goals: complete my quick synthesis of the organ bookpick the next book to read and start in Februaryspend about 5 hours in total I failed on all c...", "content": "At last month&#8217;s checkin, I had the following goals: complete my quick synthesis of the organ bookpick the next book to read and start in Februaryspend about 5 hours in total I failed on all counts: I did work on the synthesis but I did not complete it.I didn&#8217;t pick and start the next book.I spent a total of about 1 1/2 hour, So far this month I haven&#8217;t done any progress at all, and 2/3 of the month are left. Let&#8217;s plan to do only 3 quality hours of reading, with the same goals as last month otherwise. This time I am scheduling the reading time in advance." }, { "title": "Reading plan: February 1 checkin", "url": "/posts/reading-plan-february-1-checkin/", "categories": "", "tags": "reading", "date": "2014-02-03 16:03:00 -0800", "snippet": "This is my February 1 checkin following my Books I plan to read in 2014 post. January was a short month as I posted my resolution on January 20 only. The good news is that I have finished The Organ...", "content": "This is my February 1 checkin following my Books I plan to read in 2014 post. January was a short month as I posted my resolution on January 20 only. The good news is that I have finished The Organ from its Invention in the Hellenistic Period to the end of the Thirteenth Century by Jean Perrot. This has kept me busy (or in the back of my head) for about 4 months! I have pretty complete reading notes. While technically &#8220;reading the book&#8221; is done, I would like to write a synthesis of what I have learned. So my goals for February are: write that synthesispick the next book to read and start in February I am shooting for 10 serious reading days this month, for a total of 5 hours." }, { "title": "2013 year in review", "url": "/posts/2013-year-in-review/", "categories": "Other", "tags": "self", "date": "2014-01-28 23:46:00 -0800", "snippet": "(The following is inspired by my brother’s 2012 en chiffres and 2013 en chiffres “year in numbers” posts, with some twists!)In 2013, we had 1 babyThe first defining moment of 2013 for our family wa...", "content": "(The following is inspired by my brother’s 2012 en chiffres and 2013 en chiffres “year in numbers” posts, with some twists!)In 2013, we had 1 babyThe first defining moment of 2013 for our family was the birth of our second son in February. He is now 11-month-old and thriving. Number 2 and his grandfatherIn 2013, I lost 1 grandfatherThe second defining moment of the year was the passing away of my grandfather. With this I have now lost all my grandparents. I should be grateful that he lived to the age of 92 with a good quality of life. Yet I agree with Ray Kurzweil, who views death in general as “a tragedy”: it is the loss of a person, of a mind, of memories, for which there is no proper “backup”. Number 1 and his great-grandfather in 2012In 2013, I took 2 trips to SwitzerlandThe first one was in June for the funeral. I am glad I took that short trip to share this with my family. The second one was in December/January for a family vacation. These are my only two trips by air this year. I don’t miss the days where I travelled so much for business! Switzerland in the snowIn 2013, we sold 1 carWe sold my wife’s 1999 Miata, for which we didn’t have much use anymore with 2 kids. It was pretty easy to sell it, as it was in pretty good condition and, I was told, a used Miata was the car to have this summer in the Bay Area! MiataIn 2013, I voluntarily fasted 4 daysDuring the month of April, I decided to try to fast once per week as an experiment, to see what it would feel like. The rule: no solid food from the time I went to bed the day before until the morning the day after. It was a bit painful at times but it turned out to be doable, if a bit unpleasant. I did allow myself a fruit juice during the day. The day after fasting, however, I felt hungry a good part of the day even with regular-size meals.In 2013, we had a lot of family visitingAfter the birth, we had visits and help from family both from Taiwan and Switzerland. I am grateful for this, as that allowed us to deal with the work and tiredness that come with a new child.In 2013, I posted 44 work blog postsI posted 18 of those on my personal blog: 2 on Scala. 5 on personal topics. 11 short “link blog” style.And I posted 26 of those on the Orbeon blog.In 2013, my weight oscillated 10 lbsThat’s too much to my taste. The minimum was in March and the maximum in October. I have been fed too well, and I have been too lazy! I think that lack of sleep and exercise, and stress due to the second child didn’t help.In 2013, I went to the gym 23 times and took at least 7 small hikesIn short: not enough.In 2013, I posted 1,294 tweets and sent 2,201 emailsThat’s 209 more tweets than in 2012.In 2013, I watched 8 movies, 2 documentaries, and watched 3 seriesThat’s not a lot, but we’ve had other things to do. None were at the movie theater. The series are: The Big Bang Theory Doctor Who Les Mystérieuses Cités d’or (1982-1983)See also my list of latest movies.In 2013, I read or listened to 10 books or audiobooksI even include my organ book in this count, which technically I finished in 2014. Of these: 5 were “serious” reads 5 were audiobooks 4 were rereads 2 were science fictionSee also my list of latest reads.In 2013, I had 7 coldsThis looks like a lot, retrospectively: February 3 (I wrote “mild”, but this was followed by weeks of coughing) April 6 April 23 August 11 October 15 November 11 December 17 (with coughing)" }, { "title": "Firefox vs. Chrome", "url": "/posts/firefox-vs-chrome/", "categories": "Technology", "tags": "technology", "date": "2014-01-28 10:44:00 -0800", "snippet": " Image from lifehackerI use Firefox regularly for testing, but Chrome has been my default browser on OS X for a few years. Yesterday I used Firefox again the whole day as the latest Dev Channel ...", "content": " Image from lifehackerI use Firefox regularly for testing, but Chrome has been my default browser on OS X for a few years. Yesterday I used Firefox again the whole day as the latest Dev Channel Update of Chrome was horribly slow (UPDATE: This was due to a bug in Chrome.).After a few hours of regular use (not web development), it’s pretty clear that Chrome wins on usability. The following features in particular frustrated me a lot: Search. Google is just better at search: Google Instant in the Chrome bar. I don’t know if Firefox can do this easily. Unified URL/search field. Firefox should do this. Even Safari does now. The Firefox “awesome bar” remains great for history search and completion, but Chrome has mostly caught up lately. Downloads. The Firefox download window is better than in the past, but it’s still an annoying, clunky window. Chrome’s placing of downloads at the bottom of the window is simply better and smarter, as it gives you instant access to what you want to do the most with your downloads: locate them, open them, or cancel them. Firefox should do something similar. Keyboard shortcuts for editing text. In OS X, you have two sets of keyboards shortcuts: The Unix ctrl-a, ctrl-e, etc. These works in Firefox. The Mac ⌘-←, ⌘-→, etc. These don’t work in Firefox in rich text editors (which use an iframe). It used to be that ⌘-← would do a browser back even while you were editing fields, and on many web pages you could lose the content you were editing. I suspect that’s why they disabled those shortcuts. But Chrome does it right. ⌘-Q quits immediately. I closed Firefox 4 times by mistake, while trying to reach ⌘-W to close a tab. Chrome does this the smart way: you have to press and hold ⌘-Q to quit. This nicely filters out mistakes, and is way better than a clunky confirmation dialog. So go Firefox, work on those, and make me want to use you!" }, { "title": "Why I am disappointed by Google buying Nest", "url": "/posts/link-blog-why-i-am-disappointed-by/", "categories": "Link Blog", "tags": "", "date": "2014-01-22 11:57:00 -0800", "snippet": "Why is everyone disappointed by Google buying Nest?Instead, there's a chorus of concern — some sincere, some contrived, but all of it grounded in fear of an unchecked Google.I agree with much of th...", "content": "Why is everyone disappointed by Google buying Nest?Instead, there's a chorus of concern — some sincere, some contrived, but all of it grounded in fear of an unchecked Google.I agree with much of the article, although that conclusion is in contradiction with this:the fear that a slower, less innovative giant will kill the spirit and pace of a beloved startupThere is no doubt that this acquisition is good for Google, and good for Nest founders, investors and employees in the short term. But are acquisitions like this one generally good for society? I tend to think that it is not the case.Personally, I don't worry much about Google's collection of thermostat data. Yes, that could go unchecked at some point in the future, but that's another fight - that of making sure that users are in control of their data, whether captured by Google or others.Instead there is a bigger worry, which is that due to the relatively slow pace of developments in large companies, as well as the scarcity of engineering talent, promising companies like Nest are being taken away by the brute force of the billions of dollars they are offered the ability to grow and become successful companies on their own.This not only slows down the overall pace of \"innovation\" (to use a tired term), but also yields to increased concentration of power." }, { "title": "Books I plan to read in 2014", "url": "/posts/books-i-plan-to-read-in-2014/", "categories": "Other", "tags": "reading", "date": "2014-01-20 23:45:00 -0800", "snippet": " Photo by Matthias BuehlerAs Randy Pausch said, “Yes, you are going to have to change the plan. But you can’t change it, unless you have it”.I like what @buster says about sharing resolutions “...", "content": " Photo by Matthias BuehlerAs Randy Pausch said, “Yes, you are going to have to change the plan. But you can’t change it, unless you have it”.I like what @buster says about sharing resolutions “so that the information is “out there” and can’t be easily brushed away”, and doing his “rabbit rabbit” checkins in 2013 helped follow my resolutions over the year.So here it is: in 2014, in addition to finishing the last 20 pages of The Organ from its Invention in the Hellenistic Period to the end of the Thirteenth Century, I plan to read or finish reading one book in each of the following categories: serious history science philosophy biography music less serious French fiction science-fiction/fantasy My concrete selection in the “serious” categories is: History: John King Fairbank’s The Great Chinese Revolution: this is a book which I started years ago but haven’t finished. But I find the history of China starting around 1800 fascinating, and the West is almost fully ignorant of it. Science: Richard Dawkins’s The Selfish Gene: I purchased this book in 2007, read a few pages, and that was it. Philosophy: Daniel Dennett’s Intuition Pumps And Other Tools for Thinking: I read the sample chapter, which was pretty good. Biography: Walter Isaacson’s Steve Jobs: I even had this book on preorder when it came out and read one chapter. Time to finish it! Music: Possibly my friend Cesare Orselli’s Pietro Mascagni (in Italian, which makes it more of a challenge).I plan to take notes for at least 3 of those books.In the “less serious” category, I might decide to finish Antoine de Saint-Exupéry’s Terre des Hommes, of which I have read a few pages already. I don’t have picks for fiction and science-fiction/fantasy yet, but that shouldn’t be too challenging.I am open to reading suggestions, and here are some additional candidates I have considered: Siddhartha Mukherjee - The Emperor of All Maladies: A Biography of Cancer Richard Dawkins - An Appetite for Wonder: The Making of a Scientist Steven Pinker - The Better Angels of Our Nature: Why Violence Has DeclinedThis program is very ambitious given my past record. It is possible based on my experience with one book to read about 150 pages/month of a serious book while taking notes. Since the serious books have over 300 pages each, they might require more than 2 months each. So the schedule might be tight, even though I might find that some books read faster than others, and that I might not take notes for all books.Finally, I do plan to checkin every month (the “rabbit rabbit” trick) on Twitter, mentioning two friends, and I have setup a double reminder to do this." }, { "title": "GTD review buddies: an update", "url": "/posts/gtd-review-buddies-update/", "categories": "Other", "tags": "productivity", "date": "2013-11-05 22:44:00 -0800", "snippet": "About a month and a half ago, at the end of September, I wrote about setting up a “GTD review buddy system” with Alex. I can report that it went pretty well: Alex and I did 7 GTD review sessions, ...", "content": "About a month and a half ago, at the end of September, I wrote about setting up a “GTD review buddy system” with Alex. I can report that it went pretty well: Alex and I did 7 GTD review sessions, always on Monday at approximately 10 pm. In my case, each review session lasted at least 30 minutes, and sometimes close to an hour. Yes, I have really a big backlog to process! Yesterday, for the first time in maybe years, I managed to get down to zero items in my OmniFocus inbox, and to only about 20 items in my e-mail inbox, consisting mainly of really old items that I still need to sort through. “Inbox zero” is near! I have made good progress on reviewing and organizing my work-related projects. I am maybe about 3/4 through.I still need to review all my personal projects, a task that I haven’t started yet. I may or may not manage to be done reviewing all my project by the end of this year, but at this rate I should be pretty close. If everything goes well, I will be done catching up in early 2014, and then start doing regular GTD reviews, which should be much shorter." }, { "title": "Reading resolution: an update", "url": "/posts/reading-resolution-update/", "categories": "Other", "tags": "reading", "date": "2013-11-04 23:09:00 -0800", "snippet": "About a month and a half ago, at the end of September, I wrote about setting up a “GTD review buddy system” with Alex. I can report that it went pretty well: Alex and I did 7 GTD review sessions, ...", "content": "About a month and a half ago, at the end of September, I wrote about setting up a “GTD review buddy system” with Alex. I can report that it went pretty well: Alex and I did 7 GTD review sessions, always on Monday at approximately 10 pm. In my case, each review session lasted at least 30 minutes, and sometimes close to an hour. Yes, I have really a big backlog to process! Yesterday, for the first time in maybe years, I managed to get down to zero items in my OmniFocus inbox, and to only about 20 items in my e-mail inbox, consisting mainly of really old items that I still need to sort through. “Inbox zero” is near! I have made good progress on reviewing and organizing my work-related projects. I am maybe about 3/4 through.I still need to review all my personal projects, a task that I haven’t started yet. I may or may not manage to be done reviewing all my project by the end of this year, but at this rate I should be pretty close. If everything goes well, I will be done catching up in early 2014, and then start doing regular GTD reviews, which should be much shorter." }, { "title": "October reading resolution", "url": "/posts/october-reading-resolution/", "categories": "Other", "tags": "music, reading", "date": "2013-09-30 22:22:00 -0700", "snippet": "There is a side project which I started last year but which I haven’t had much time to work on so far. Suffice it to say that it involves researching the history of the organ, and I was recently re...", "content": "There is a side project which I started last year but which I haven’t had much time to work on so far. Suffice it to say that it involves researching the history of the organ, and I was recently recommended a must-read book about this by the curator of the Musée Suisse de l’Orgue in Switzerland.Thanks to the magic of public libraries, I managed to find the English adaptation of the book (the original French edition seems to have disappeared from the San Francisco Public Library), and to borrow it (via LINK+): The Organ from its Invention in the Hellenistic Period to the end of the Thirteenth CenturyI just read the introduction and seems like it is well-written and very well-researched - a true scholarly work, in a good way. The only problem is that this brick is about 300 pages long! What are the chances that I will go through it?So here’s my plan: for the month of October, I will try to read on average 10 pages of the book per day. The idea is to try to read at least a few pages every day. It would be unsustainable to have to read a hundred pages on a Sunday evening.The goal is not to finish the book, but to learn something useful for my project. This mean serious reading, including taking notes. I will allow for exceptions, for example if it turns out that parts of the book are not needed for my research, or if it turns out that, after all, the book turns out to be boring.Finally, but optionally, I might tweet things I learn.Update: My reading notes are here." }, { "title": "What if the humanity became infertile?", "url": "/posts/link-blog-what-if-humanity-became/", "categories": "Link Blog", "tags": "future", "date": "2013-09-29 22:45:00 -0700", "snippet": "The Importance of the Afterlife. SeriouslyI get the point Samuel Scheffler makes about humanity losing purpose if \"the earth and all its inhabitants would be destroyed 30 days after your death\". Bu...", "content": "The Importance of the Afterlife. SeriouslyI get the point Samuel Scheffler makes about humanity losing purpose if \"the earth and all its inhabitants would be destroyed 30 days after your death\". But his other thought experiment is more puzzling:In Ms. James’s novel, humanity has become infertile, with no recorded birth having occurred in over 25 years. Imagine that you found yourself living in such circumstances. Nobody now alive is younger than 25, and the disappearance of the human race is imminent as an aging population inexorably fades away. How would you react?As in the case of the asteroidal collision, many activities would begin to seem pointless under these conditions: cancer research, seismic safety efforts, social and political activism and so on.My wild guess would be that on the contrary a large number of humans would on start working tirelessly to ensure that they live longer (if possible \"forever\"), which would entail very quickly finding a cure for cancer and other ailments, and work even harder on safety. Knowing that you don't have offsprings means that your own life and that of your peers already born is even more important to preserve. This would also maybe work against the \"after me, the deluge\" attitude: if you know you will be around for a long time, you might make better decisions as those are more likely to affect you." }, { "title": "GTD review buddies", "url": "/posts/gtd-review-buddies/", "categories": "Other", "tags": "productivity", "date": "2013-09-23 23:47:00 -0700", "snippet": "I try to stay reasonably productive at work and at home with a variation on the GTD system. Several aspects of that system work quite well, but one thing I have been really terrible at doing is the...", "content": "I try to stay reasonably productive at work and at home with a variation on the GTD system. Several aspects of that system work quite well, but one thing I have been really terrible at doing is the regular review of my projects.That is a problem, because reviewing projects is an essential part of any productivity system. Without a review, your list of projects becomes out of control, you lose grip on what is current and what is not, and that is likely to become a weight on your mind and to make you lose trust in your system.Years ago, I figured that I would do my GTD review once a week, on the weekend. It’s been years that it hasn’t worked at all. Yet I keep getting an automatic reminder by email that I need to do my weekly review, and I am now fully numb to it.Last week, talking about this with @avernet, who also has issues doing regular GTD reviews, we decided to try an experiment. We figured that if it easier to go to the gym with a buddy than alone, the same idea could apply here. So we have decided to try for a while to be “GTD review buddies”.The concrete implementation of the idea is as follows: We both have a recurring alarm on our phones set to Monday at 10 PM (when our respective kids are supposed to be asleep!). When that alarm rings, we send a message to each other with a reminder that it is GTD review time. We then work on our own review separately, as we are in different locations and of course have completely different projects. But the idea is to do the review at the same time. We are free to work on the review as long as we want.Tonight was the first time that we tried this and it worked pretty well. At this rate it will take weeks if not months to get our projects in order, but it should become easier as time goes. We’ll see if the habit sticks!" }, { "title": "My iPhone Home Screen", "url": "/posts/my-iphone-home-screen/", "categories": "Technology", "tags": "technology, iphone", "date": "2013-09-22 22:42:00 -0700", "snippet": "This weekend I reorganized my iPhone home screen like this: iPhone Home ScreenI tried not to fill the entire screen, keeping one full row empty and one spot in the bottom row, to encourage me to...", "content": "This weekend I reorganized my iPhone home screen like this: iPhone Home ScreenI tried not to fill the entire screen, keeping one full row empty and one spot in the bottom row, to encourage me to go the extra mile when removing the non-essential apps, and to give new apps a chance to make it to the home screen. The organization is not perfect, but here we go: Bottom row (“most important apps”): OmniFocus: I use it extensively on the desktop, and the iOS version synchronizes with it (in the background with iOS 7!). On the iPhone I use it to enter new inbox items on the go and to deal with a few contexts (standup meeting at work, errands, and contexts for a few people I often interact with). Mailbox: my email client of choice. I use it to do a first pass on my email, including archiving unimportant items. Chrome: my web browser of choice. First row (“voice and chat”): Google Voice: I moved my number to Google Voice a while back. The app is not great and there is no native integration with iOS’s dialer (Apple doesn’t support it), but for better or for worse that’s what I use now. This covers old-school calls and SMS. Messages: iMessage (SMS is via Google Voice). Skype: chat and the occasional call. Photos: not “voice and chat”, I know, but this had to go somewhere. Second row (“social and reading”): Tweetbot: my Twitter client of choice. Facebook: yes I use it. Instapaper: favorite reader. Kindle: to remind me that I need to read books. Third row (“audio”): Maps: I know, it has nothing to do with audio (unless you count directions). This is the Apple Maps app, which works well in my location. I occasionally use Google Maps too. Music: provides access to my music collection via iTunes Match. Instacast: my podcast client of choice. Podcasts: the Apple Podcasts app. Contains a few podcasts which I haven’t yet consolidated with Instacast. Fourth row (“health”): Food: the Evernote Food app, to remind me to eat well and collect data about it. Up: to remind me to exercise and sleep well. Automatic: to remind me to drive economically and safely. I use the camera often but didn’t put the Camera app on the home screen as it is so easily accessible from the lock screen.Finally, I chose a simple built-in wallpaper. My lock screen has a picture of my family." }, { "title": "My &quot;wonderworld&quot; does not include business trips", "url": "/posts/link-blog-my-wonderworld-does-not/", "categories": "Link Blog", "tags": "future", "date": "2013-09-09 21:16:00 -0700", "snippet": "2030s Cognitive Machines: a glimpse of life in a future wonderworld Getting ready to fly to a conference, my auto-drive electric car rolls its top down on this warm day In this article, you have: “...", "content": "2030s Cognitive Machines: a glimpse of life in a future wonderworld Getting ready to fly to a conference, my auto-drive electric car rolls its top down on this warm day In this article, you have: “microscopic sensors embedded throughout the house [which] constantly monitor” your health“wall tiles [which] display the day’s top headlines”a “Mars mission [which] launches ahead of schedule”“smart dust” able to destroy terrorist training camps“auto-drive” carsa headband which can figure out a person’s identity and project it on your eyes Yet, the person is flying a commercial flight to a conference? The same mistake is present in this 2009 Microsoft video (which is otherwise amazing): If you have communication technology that is that advanced, the case for conferences and flying around the world for business is greatly reduced. After all, we are almost there already, with tools as poor (relatively to what we should have in 2030) as Skype, WebEx, or Google Hangouts. There is a reason conferences and face to face business meetings still exist: they remain often the best way to exchange a lot of information quickly, to mix the formal with the informal, and to capture the out of band signals that humans constantly send. So they will probably be around as long as there are “humans 1.0”. But my guess is that they will progressively be replaced by future communication technology. (Apply all this technology to leisure travel and that’s another story.) What will it take? higher bandwidth, lower latency, and lower price for data (wired and wireless)high-definition audio/video equipment cheap to the point where you can plaster walls with itor, alternatively, smart glasses/headbands which remove the need for shared displaysthe hardest part: software to glue it all that actually works, and that follows standard protocols This trend could be slowed down or maybe even temporarily reversed if physical transportation sees fundamental improvements, maybe with ubiquitous hyperloops and cheap supersonic flights." }, { "title": "Real mobile computing", "url": "/posts/link-blog-real-mobile-computing/", "categories": "Link Blog", "tags": "computing", "date": "2013-09-02 23:45:00 -0700", "snippet": "Revenge of the NerdsThis 2002 article by Paul Graham contains the following remark:as software shifts off the desktop and onto servers (a future even Microsoft seems resigned to), there will be les...", "content": "Revenge of the NerdsThis 2002 article by Paul Graham contains the following remark:as software shifts off the desktop and onto servers (a future even Microsoft seems resigned to), there will be less and less pressure to use middle-of-the-road technologies.&nbsp;The move from the desktop to the server indeed allowed the blooming of frameworks and languages. But more than 10 years later, there is a clear move back toward the client: with so-called native apps on one hand, and of course in the browser on the other hand.Which makes me think about the question of where computing should take place. Cloud resources are getting cheaper and cheaper, which argues in favor of more computing in the cloud. But personal devices are also getting cheaper, more powerful and more networked, which argues in favor of more local computing!I like to think of a future where computing is really mobile, and by that I don't mean \"running on a mobile device\", but able to move from one device to the other as needed. Depending on latency, connectivity, storage, CPU cycles, power requirements, and pricing, the physical location of computing&nbsp;would change.Big services such as Google and Facebook try to reduce the amount of computing and storage that every user needs, for obvious cost reasons. But what if everybody had his own computing nodes (in the cloud or in your pocket - after all we have this thing called the Internet connecting things), usable by any service (given permission)?Google today does not, for example, dedicate a thousand dollars of computing resources just for you (especially as you're not directly paying Google for that). But you might be willing to provide these resources. In fact you probably already have these resources, with your laptop, mobile phone, and other computers, and odds are that in the future you will have much more.What would it take to get there? The biggest obstacle is designing the software. You need a standard way of describing software (i.e. bytecode, a VM, APIs, and metadata), securing it, and create virtual networks. You also need a way to figure out how to handle the location and mobility of data. You probably also need a way to suspend computation on a device, and resume it on another one. Finally, you need a lot of intelligence to make this actually work." }, { "title": "About yourself", "url": "/posts/link-blog-about-yourself/", "categories": "Link Blog", "tags": "self", "date": "2013-08-30 23:01:00 -0700", "snippet": "Daniel Miessler’s About pageI only discovered Daniel’s websites recently, thanks to my brother. It looks like Daniel and I largely share a worldview. The difference, of course, is that his website ...", "content": "Daniel Miessler’s About pageI only discovered Daniel’s websites recently, thanks to my brother. It looks like Daniel and I largely share a worldview. The difference, of course, is that his website is excellent, and that he is quite good at expressing himself, something I have yet to improve. I’ll start by saying that if you’ve not tried to summarize yourself in this sort of way, i.e. via some sort of “about me” format, you should make an effort to do so. It’s quite enlightening to explicitly identify who you are and what you value in life.I like that encouragement. I have focused so far on a single Worldview document. But that might not be the best format, or at least not the only format. So now I started updating the README to look a bit more like his About page. I see my site as nothing less than a means of augmenting and sharing my mind. I use it as a means of organizing everything I have learned and want to learn, and then as a means of sharing that same content with others.This is very well said and it’s exactly what I am trying to do, without having been able to express it that well. I feel encouraged, reading this, to put more content in that space I have created on github." }, { "title": "Meat without the hurt", "url": "/posts/link-blog-meat-without-hurt/", "categories": "Link Blog", "tags": "ethics", "date": "2013-08-08 22:18:00 -0700", "snippet": "The world's first cruelty-free hamburgerMy own view is that being a vegetarian or vegan is not an end in itself, but a means towards reducing both human and animal suffering, and leaving a habitabl...", "content": "The world's first cruelty-free hamburgerMy own view is that being a vegetarian or vegan is not an end in itself, but a means towards reducing both human and animal suffering, and leaving a habitable planet to future generations.I am not a vegetarian but I try not to eat too much meat - when I think about it. If tomorrow all meat consumption was prohibited, I would probably just shrug. Sure, I would miss a little bit dried meat from Valais and the occasional filet mignon. But given the positive impact on animal suffering and the environment, that would be well worth it.But I agree with the author that it's not the meat itself, it's how we get to the meat. If there was a way to enjoy the taste without the pain, and no particular adverse health effects, I would see no reason not to eat meat at least occasionally. But of course that would be a personal choice." }, { "title": "Science, defended", "url": "/posts/link-blog-science-defended/", "categories": "Link Blog", "tags": "self", "date": "2013-08-08 21:59:00 -0700", "snippet": "Science Is Not Your Enemy, by Steven PinkerThis is just a beautifully written piece. I am grateful to people like Steven Pinker for being able to present ideas so clearly. It's not that I have lear...", "content": "Science Is Not Your Enemy, by Steven PinkerThis is just a beautifully written piece. I am grateful to people like Steven Pinker for being able to present ideas so clearly. It's not that I have learned a great deal reading it, but it's one of those articles that resonate with my worldview. And should I be in need of finding arguments, I will just be able to point to it.Most of the traditional causes of belief—faith, revelation, dogma, authority, charisma, conventional wisdom, the invigorating glow of subjective certainty—are generators of error and should be dismissed as sources of knowledge.It had to be said. It is not being close minded, at this point in the history of humanity, to recognize what has been working and what hasn't been working in our ongoing quest for knowledge.And is there any more important pursuit than finding out&nbsp;how&nbsp;belief is formed and&nbsp;what&nbsp;constitutes knowledge? That's the key to everything that's in our minds, which in turn is what influences what we say and do, and therefore the society we live in. This is why I have been interested in working on formulating a consistent (but very much in progress) personal&nbsp;worldview.the worldview that guides the moral and spiritual values of an educated person today is the worldview given to us by science […] scientific facts militate toward a defensible morality, namely adhering to principles that maximize the flourishing of humans and other sentient beingsAt this point I don't think it is enough to say that one doesn't follow certain religions or doesn't believe in such and such gods. There is a need for something more positive, for a set of evolving (and constantly questioned) beliefs founded on the principles of rationality and empathy. And so I like the idea that science can help us along the path to happiness (and the idea of that this is not limited to humans but extended to all sentient beings)." }, { "title": "Facebook: quality vs. quantity", "url": "/posts/link-blog-facebookquality-vs-quantity/", "categories": "Link Blog", "tags": "", "date": "2013-06-27 23:32:00 -0700", "snippet": "Why Are Dead People Liking Stuff On Facebook? If Facebook can’t get this under control, what does that say about the value of its data? The persistence of these fake likes is an unnerving thing fo...", "content": "Why Are Dead People Liking Stuff On Facebook? If Facebook can’t get this under control, what does that say about the value of its data? The persistence of these fake likes is an unnerving thing for Facebook users and investors alike.I saw at least a couple such impossible “likes” in my Facebook News Feed. I agree that this kind of things are not helping Facebook.The Facebook mobile app also has those things called “Suggested Posts”. Here is an example of what I see: “Have your favorite songs played at parties with RequestNow” “LIKE and SHARE this look inside The Bridge and discover the chilling secrets behind FX’s newest drama” “Experience a night under the starry African sky” Ad for Doctor who t-shirts Eagle Club Indoor Golf Ad for a Windows 8 Dell tabletI would say 3 out of 6 kind of relate to my interests, although I am very unlikely to buy a t-shirt, book a trip to Africa, or buy a Windows tablet based on this kind of sponsorships. Overall, based on this little sample, those suggested posts are mostly annoying noise.I wonder if the system is able to learn. Also, what if they only showed me a quarter, or a tenth of those “Suggested Posts”, but better targeted? What if Facebook erred on the side of quality rather than quantity?" }, { "title": "Canada the &quot;rogue, reckless petrostate&quot;", "url": "/posts/link-blog-canada-rogue-reckless/", "categories": "Link Blog", "tags": "ethics", "date": "2013-06-25 23:50:00 -0700", "snippet": "Oh, CanadaOver the last decade, as oil prices increased fivefold, oil companies invested approximately $160 billion to develop bitumen in Alberta, and it has finally turned profitable.This makes yo...", "content": "Oh, CanadaOver the last decade, as oil prices increased fivefold, oil companies invested approximately $160 billion to develop bitumen in Alberta, and it has finally turned profitable.This makes you wonder: how far could you go with, say, $160 billion in investment in renewable energies?" }, { "title": "&quot;For humans, copying is learning&quot;", "url": "/posts/link-blog-for-humans-copying-is-learning/", "categories": "Link Blog", "tags": "ethics, future", "date": "2013-05-28 21:44:00 -0700", "snippet": "Why Copying Is Fucking Awesome And Innovation Is Truly OverratedLet me ask you something, when the first human figured out how to use fire to keep warm, what do you think his friend did? He copied ...", "content": "Why Copying Is Fucking Awesome And Innovation Is Truly OverratedLet me ask you something, when the first human figured out how to use fire to keep warm, what do you think his friend did? He copied it. If he didn’t, he’d be dead. For humans, copying is learning. And the same is true in startups. It’s what we do to survive, and it’s what we do to evolve. How do you think you learned your native language?Of course this echoes Isaac Newton's famous quote:If I have seen further it is by standing on the shoulders of giants.I like the thought that ideas are freely exchanged and built upon without barriers. In a hypothetical (and optimistic) future world where humans do not need to \"have a job\" to live well, attribution, that is pointing to the originator of an idea when possible, would still be encouraged, but there would be no place for anything like copyright or patents in any domain whatsoever. As is the case today in some open source software communities, recognition, not financial profit, would be enough motivation to develop new ideas." }, { "title": "Taxes buy civilization", "url": "/posts/link-blog-taxes-buy-civilization/", "categories": "Link Blog", "tags": "", "date": "2013-05-26 22:46:00 -0700", "snippet": "How wealth of Silicon Valley's tech elite created a world apartCommuters who struggle with the crowded municipal bus service openly envy the spacious tech shuttles filled with their iPad-tapping pa...", "content": "How wealth of Silicon Valley's tech elite created a world apartCommuters who struggle with the crowded municipal bus service openly envy the spacious tech shuttles filled with their iPad-tapping passengers.The San Francisco Chronicle recently swelled the chorus with an op-ed denouncing the private shuttles as symbols of alienation and division: \"San Franciscans feel resentful about the technology industry's lack of civic and community engagement, and the Google bus is our daily reminder.\"I love San Francisco every time I go there, but face it, the city doesn't look tidy. Public transportation is barely above the \"joke\" level. Mentally ill people sleep on Market Street.&nbsp;BART&nbsp;is clunky. Plans for&nbsp;electrifying Caltrain&nbsp;are just starting to be concrete. I mean&nbsp;electrifying!&nbsp;Elsewhere, gas lines&nbsp;explode and take out an entire block. Roads have potholes. Power lines are on slanting wooden poles almost everywhere. Public schools are good or terrible depending on whether a city hosts wealthy residents or not. Some of this struck me right away when I moved to the area back in 1997.To be fair, things have visibly improved a bit since then. But this in itself is not the main issue. The issue is the contrast&nbsp;between the amazing wealth created in this part of the world, and the relative lack of local impact of that wealth. Rich or ultra-rich residents do buy expensive houses and spend, I assume, a fraction of their money locally. But it is as if little of this manages to make it to anything that is shared, whether infrastructure proper, downtowns, or the public education system.I am reminded of this quote:I like to pay taxes.With them I buy civilization. - Oliver Wendell HolmesI am not sure what the local solution for this is, but&nbsp;I do wish there was more \"civilization\" in Silicon Valley." }, { "title": "Are we in the &quot;Great Stagnation&quot;?", "url": "/posts/link-blog-are-we-in-great-stagnation/", "categories": "Link Blog", "tags": "future", "date": "2013-05-25 00:13:00 -0700", "snippet": "Driverless cars, pilotless planes … will there be jobs left for a human being?Professor Tyler Cowen the future is even darker. It is not only that automation and robotisation are coming, but that t...", "content": "Driverless cars, pilotless planes … will there be jobs left for a human being?Professor Tyler Cowen the future is even darker. It is not only that automation and robotisation are coming, but that there are no new worthwhile transformational technologies for them to automate. All the obvious human needs – to move, to have power, to communicate – have been solved through cars, planes, mobile phones and computers. According to Cowen, we have come to the end of the great \"general purpose technologies\" (technologies that transform an entire economy, such as the steam engine, electricity, the car and so on) that changed the world. There are no new transformative technologies to carry us forward, while the old activities are being robotised and automated. This is the \"Great Stagnation\".Professor Tyler Cowen doesn't seem to have much imagination, and the article, which disagrees with him, goes on identifying some areas \"in which there will be vast job opportunities\". Human health, energy, and environment come to mind immediately.Now whether these areas will \"create jobs\" remains to be seen. I tend to think that jobs will go away, that an ever larger portion of the population will be unemployable (unless progress to improve human education and thinking is made), and that overall this will bring new challenges but will be a good thing (few people really wants what we now call a \"job\" except out of financial necessity)." }, { "title": "Scala array comparison (without a PhD)", "url": "/posts/scala-array-comparison-without-phd/", "categories": "Programming", "tags": "scala", "date": "2013-05-21 20:25:00 -0700", "snippet": "Scala collections and equalityScala collections follow a simple set of general equality rules1. Two collections are equal if: they are in the same overall category (Seq, Set, or Map) they contain...", "content": "Scala collections and equalityScala collections follow a simple set of general equality rules1. Two collections are equal if: they are in the same overall category (Seq, Set, or Map) they contain the same elements (as defined by ==) for sequences, the elements are in the same orderThis means the following:scala&gt; List(1, 2, 3) == Vector(1, 2, 3)res0: Boolean = truescala&gt; List(1, 2, 3) == Set(1, 2, 3)res1: Boolean = falsescala&gt; Set(1, 2, 3) == collection.mutable.LinkedHashSet(3, 1, 2)res2: Boolean = trueArrays don’t behaveThe gotcha is that these rules break down with arrays:scala&gt; List(1, 2, 3) == Array(1, 2, 3)res3: Boolean = falseAnd even:scala&gt; Array(1, 2, 3) == Array(1, 2, 3)res4: Boolean = falseWhy is this? The answer is that arrays in Java are treated specially all the way down to the JVM, and Scala arrays are just plain Java arrays. It is not possible to extend a JVM array, and this means in particular that it is not possible to override equals on arrays. Since native array eqality via equals does not compare array content, arrays are left to behave differently from Scala collections.SolutionsSo how do you go about comparing arrays in a way compatible with other Scala collections? First, there is an implicit conversion from Array to collection.mutable.WrappedArray, which is a Seq, so you can write:scala&gt; (Array(1, 2, 3): WrappedArray[Int]) == (Array(1, 2, 3): WrappedArray[Int])res5: Boolean = trueOr even shorter:scala&gt; (Array(1, 2, 3): Seq[Int]) == (Array(1, 2, 3): Seq[Int])res6: Boolean = trueOf course this also works if you pass an array to anything which expects a Seq:scala&gt; def sameStuff(s1: Seq[Int], s2: Seq[Int]) = s1 == s2foo: (s1: Seq[Int], s2: Seq[Int])Booleanscala&gt; sameStuff(Array(1, 2, 3), Array(1, 2, 3))res7: Boolean = trueFrom a memory perspective, this is not too bad because WrappedArray doesn’t make an expensive copy of the collection and instead just wraps the array.2 But there is boxing going on with WrappedArray because it’s not a value class 3 (or rather concrete implementations of it are not value classes). Value classes cannot override equality4, and a WrappedArray couldn’t be a proper Seq if that were the case.5There is another way to compare array content with sameElements:scala&gt; Array(1, 2, 3) sameElements Array(1, 2, 3)res8: Boolean = trueThe benefit is that this more explicitly states the intent, and you don’t need to convert the arrays to Seq via type declarations.Nested arraysBoth solutions above only work if arrays are not nested. Consider:scala&gt; Array(Array(11), Array(21, 22)) sameElements Array(Array(11), Array(21, 22))res9: Boolean = falseThe reason is that sameElements (or == on WrappedArray) just calls == on each array element. If those elements are arrays, Java array equality kicks in again (and we know that array content is not compared in that case).Instead you can use the deep method:scala&gt; Array(Array(11), Array(21, 22)).deep == Array(Array(11), Array(21, 22)).deepres10: Boolean = trueThe deep method wraps arrays so that each access to an array element is first checked: if the element itself is an array, it is wrapped with WrappedArray first.6 This way equality recursively works (but only if each array is directly nested in an array!).It is generally safe to use deep instead of sameElements or a conversion to WrappedArray, but the implementation of deep requires a number of pattern matches, which are not known to be the fastest. If the arrays are known to be flat, the other approaches might be more efficient.Case classesConsider this case class:scala&gt; case class Foo(a: Array[Int])defined class Fooscala&gt; Foo(Array(1)) == Foo(Array(1))res11: Boolean = falseBy now you know why this happens: the case class provides an implementation of == for you, but doesn’t treat arrays specially. If equality matters to you (and it probably should if you use case classes), it is better to write instead something like this:scala&gt; case class Foo(a: Seq[Int])defined class Fooscala&gt; Foo(Array(1)) == Foo(Array(1))res12: Boolean = trueHere the case class actually refers to a WrappedArray, obtained via implicit conversion from the original array.Words of wisdomThe equality issue suggests that it is wise to avoid arrays when possible. If you cannot avoid them, beware of the semantic of equality on them! But since arrays offer interoperability with Java and are compact, native data structures that offers performance benefits, it’s often hard to live without them entirely.There are a number of StackOverflow questions that cover this topic as well.7 Please let me know if I omitted anything important! See The Scala 2.8 Collections API - Equality for details. &#8617; For an Array[Int], the Scala implementation looks like: final class ofInt(val array: Array[Int]) extends WrappedArray[Int] { ... } On the other hand it doesn’t seem like WrappedArray uses java.util.Arrays.equals() so the actual comparison performance might not be absolutely optimal (but I don’t have numbers). &#8617; Value classes are new in Scala 2.10. &#8617; “A value class… may not define a equals or hashCode method” &#8617; On the other hand ArrayOps are value classes: trait ArrayOps[T] extends Any with ... This is ok because the purpose of ArrayOps is to provide extension methods on native arrays, and equality cannot be implemented as an extension method: scala&gt; (Array(1, 2, 3): ArrayOps[Int]) == (Array(1, 2, 3): ArrayOps[Int])res12: Boolean = false &#8617; I find deep a bit funny: it returns an IndexedSeq[Any] instead of being generic. I am not sure why that is, but for the purpose of comparing array content it doesn’t matter. &#8617; See: How do I compare two arrays in scala? Why does Array(0,1,2) == Array(0,1,2) not return the expected result? Why doesn’t the Array Equality Function Work as Expected? &#8617; " }, { "title": "Map.map vs. Map.mapValues", "url": "/posts/mapmap-vs-mapmapvalues/", "categories": "Programming", "tags": "scala", "date": "2013-02-03 17:29:00 -0800", "snippet": "I just hit a bug caused by a misunderstanding of how Map.mapValues works. Consider:val original = Map(\"a\" -&gt; 1, \"b\" -&gt; 2)val modified = original map { case (k, v) =&gt; k -&gt; (v + 1) }The r...", "content": "I just hit a bug caused by a misunderstanding of how Map.mapValues works. Consider:val original = Map(\"a\" -&gt; 1, \"b\" -&gt; 2)val modified = original map { case (k, v) =&gt; k -&gt; (v + 1) }The result is an immutable map1 which is a transformation of the original map (all values are incremented by one). Once the map method terminates, the new map is actually holding those new values.Now Map also has a mapValues method, which seems like an attractive shortcut for the rather verbose transformation above. So you write:val original = Map(\"a\" -&gt; 1, \"b\" -&gt; 2)val modified = original mapValues (_ + 1)More concise, right? But there is a catch: map and mapValues are different in a not-so-subtle way. mapValues, unlike map, returns a view on the original map. This view holds references to both the original map and to the transformation function (here (_ + 1)). Every time the returned map (view) is queried, the original map is first queried and the tranformation function is called on the result. You can see this in the source code of the Scala standard library:override def mapValues[C](f: B =&gt; C): Map[A, C] = new DefaultMap[A, C] { ... def get(key: A) = self.get(key).map(f)}If the transformation function is referentially transparent, like (_ + 1), all is well (besides performance considerations). But if not, you might be in for fun bugs depending on when the resulting map is queried. In my case, the transformation function depended on a context which, at a later point, was made invalid. When the resulting map was queried, the function-that-really-shouldn’t-run-now was running in that invalidated context and causing trouble.There is nothing inherently wrong with providing a view on the original map, but I would say the naming of mapValues violates the principle of least surprise: everybody knows the map method, and might reasonably assume that mapValues would behave in a similar way (and it doesn’t).Morality: when using mapValues, make sure the implications of using a view are acceptable, including making sure that your transformation function can safely run at the time the resulting map is queried. If not, prefer the good old map method. Oh, and also try to keep mutations local (but it’s often not easy). Scala has Map and map: Map denotes one of the traits for “a map from keys of type A to values of type B” (AKA a hash map), map is a method on collections, including Map, which “builds a new collection by applying a function to all elements of this map”. When I (and Scaladoc) use “map” as a noun, it means “it’s an instance of Map”. &#8617; " }, { "title": "Implicit conversion to the Unit type in Scala", "url": "/posts/implicit-conversion-to-unit-type-in/", "categories": "Programming", "tags": "scala", "date": "2012-10-05 10:02:00 -0700", "snippet": "In Scala, you have a few ways to express that a function returns the Unit type.1 A common way is to use thefunction syntax and specify a result type of Unit:def foo: Unit = ...Like for any result t...", "content": "In Scala, you have a few ways to express that a function returns the Unit type.1 A common way is to use thefunction syntax and specify a result type of Unit:def foo: Unit = ...Like for any result type, the type annotation is not necessary if the function body already returns the expected type,as in:def newline = println()or:2trait Foo { def log = ()}The type annotation is useful not only for documentation purposes, but also in case the last expression of thefunction body happens to return a result of a type which is not Unit:def focus(): Boolean = ... // function with side effect but which also returns a valuedef justFocus: Unit = focus() // function with side effect returning UnitNow you might wonder, as @avernet and I did yesterday, how this last bit can work!How does the compiler, with an expected type of Unit on one hand, and an actual expression type of Boolean on the other hand,reconcile the two?This is not done via subtyping, because Unit is not a supertype of Boolean: instead Unit is a subtype of AnyValand at the same level as Boolean in the Scala type hierarchy.The answer is that there is an implicit conversion taking place.3 The Scala languagespecification specifies this conversion in section 6.26.1: Value Discarding. If e has some value type and the expected type is Unit, e is converted to the expected typeby embedding it in the term { e; () }.In case you are wondering, here value type does not mean a subtype of AnyVal. This can be a bit misleading,especially with the introduction in Scala 2.10 of value classes, which do derive from AnyVal. Instead, a valuetype is just a type which can have concrete values, as explained in chapter 3 of the spec: A subset of first-order types called value types represents sets of (first-class) values. […] Non-value typescapture properties of identifiers that are not values (§3.3). For example, a type constructor (§3.3.3) does notdirectly specify a type of values.”In short the spec mandates that any value returned by an expression is implicitly converted toUnit by the compiler when the expected type is Unit. This applies in particular to functions, where theexpression is the function body and the expected type is determined with the Unit type annotation.So now we all know how it works!and pass a value of type Unit around)keyword. It could possibly be implemented that way, but as of Scala 2.10 this is not the case. So it’s probably done bycompiler magic. Unit is similar to the void of C or Java, but a bit fancier. For example you can have variables of type Unit, &#8617; Note the syntax for the Unit value: (). &#8617; This doesn’t mean that the implicit conversion is actually defined in the Predef object with the implicit &#8617; " }, { "title": "Getting to know CanBuildFrom (without a PhD)", "url": "/posts/getting-to-know-canbuildfrom-without-phd/", "categories": "Programming", "tags": "scala", "date": "2012-08-20 14:33:00 -0700", "snippet": "Recently I needed to write a pretty simple function: given a sequence of (name, value) pairs, returna sequence of (name, some collection of all the values having that name) pairs. Here is a simple ...", "content": "Recently I needed to write a pretty simple function: given a sequence of (name, value) pairs, returna sequence of (name, some collection of all the values having that name) pairs. Here is a simple implementation:def combineValues(pairs: Seq[(String, String)]): Seq[(String, Seq[String])] = { val result = LinkedHashMap[String, List[String]]() for ((name, value) &lt;- pairs) result += name -&gt; (value :: result.getOrElse(name, Nil)) result.toList}Then I realized that I not only needed the result as a Seq[(String, Seq[String])], but also as aSeq[(String, Array[AnyRef])], for compatibility with a Java API. I could of course transform one into the other,but I wondered whether there might be a way to directly return the desired collection type (without duplicating the function!).Let’s think a little bit about what this entails: the revised combineValues needs to create new collections of a typespecified by the caller. So first the type needs to be specified, which means that the function needs to take so-calledtype parameters: one for the resulting collection type, and one for the item type:import language.higherKinds // so that Scala 2.10 doesn't warndef combineValues[U, T[_]](pairs: Seq[(String, String)]): Seq[(String, T[U])]The type parameters are specified with the funny [U, T[_]] declaration before the usual function parameters. You haveprobably seen this syntax on generic classes. But functions can have type parameters too!Also, the function now says it returns values of type T[U]. The idea here is that we will return collections of type T where Tstands for things like Seq, Array and Set containing elements of type U, where U stands for String orAnyRef.Do you see what we’ve done here? We have changed the signature to be more abstract: instead of specifying beforehandthat we are dealing with Seq or Array or String, we use “variables” (T and U). In case you are wondering, thereis nothing magic about the names T and U, we could have used Coll and Elem instead. It’s a matter of taste.A couple of remarks on the syntax: It’s not possible to just specify [T[U]] as a single type parameter: the two parameters must be separate. Because T is a type which itself takes a parameter, we must say so with T[_] (T[Whatever] works too).Here is how you call the function with explicit type parameters (sometimes, type parameters can be inferred by thecompiler, but not here):combineValues[String, List](seq)Now the function needs to make use of these type parameters to create the new collections. How do we do that?Naively, let’s try creating new empty collections of type T[U] using a constructor:new T[U] // incorrect Scalaor, using a companion object’s apply:T[U]() // incorrect ScalaUnfortunately, neither even compiles. How would something like this work anyway? You could imagine that theruntime type information is available to combineValues and then use reflection to create new instances. But: Scala erases parametrized types during compilation, and type parameters are not automatically available at runtime(although there are ways to obtain them). The collection type parameter could be a trait, like Seq, in which case you would have to find a reasonable concreteclass implementing that trait. How would you go about making that determination? This would result in instantiating empty instances of the resulting collection. How would you add elements to thatcollection? Array and List in particular aren’t Growable collections. So you would have to find a constructortaking all the items of the collection instead. That’s possible, but not guaranteed to work at runtime for all types. This might not be very efficient due to the use of reflection.So besides the fact that it does not work out of the box, this approach is not as simple as it first looked. We are missingsomething, and that something is a factory for the collection to create. And Scala already hasa trait for that kind of factories in the Scala standard library: it is called CanBuildFrom.This trait is a bit of a funny thing: it is part of many Scala collections function signatures, and for that reasonhas been the target of criticism, with the result that Scala 2.8’s Scaladoc hides it from signatures by default.Some have argued that it’s not necessary to understand it to use Scala collections, and I agree with that(in general, Scala collections just work even if you don’t have any idea that CanBuildFrom exists).This said, CanBuildFrom itself is a pretty simple thing conceptually: if you have an instance of CanBuildFrom for a given collectiontype, you can call apply on it to get a Builder for that collection. Once you have the builder, you just addelements to it, and finally obtain the resulting collection. The trait itself is parametrized, to specify a sourcecollection type, an element type, and a resulting collection type: CanBuildFrom[-From, -Elem, +To].Here, what we want is a CanBuildFrom[T[U], U, T[U]]. The first type parameter, the From collection, does not seem tobe consequential here.) In short it’s a factory able to return a Builder for a collection T[U].A version of our function receiving a CanBuildFrom looks like this:def combineValues[U, T[_]]( pairs : Seq[(String, String)], cbf : CanBuildFrom[T[U], U, T[U]]): Seq[(String, T[U])] = { val result = LinkedHashMap[String, Builder[String, T[U]]]() for ((name, value) &lt;- pairs) result.getOrElseUpdate(name, cbf()) += value result map { case (k, v) =&gt; k -&gt; v.result } toList}Note where the factory is called: cbf(), and where the resulting collection is obtained: v.result.But how does the caller even obtain a CanBuildFrom? You have not only to pass T and U(the type parameters) but also somehow figure out where to locate that factory.Of course, and this is why the Scala collections and CanBuildFrom are designed this way in the first place, there is a twist: implicitparameters. The idea is that instead of finding and passing the factory explicitly to the function, the compiler doesthat for you. So we change the signature as follows:def combineValues[U, T[_]](pairs: Seq[(String, String)]) (implicit cbf: CanBuildFrom[T[U], U, T[U]]): Seq[(String, T[U])]Notice how we changed cbf from a regular parameter to an implicit parameter with the implicit keyword, and moved it toa second parameter list (yes, Scala supports more than one parameter list).When the compiler sees a call to such a function, it does something called an implicit search. This is the processwhereby it locates an appropriate value for the implicit parameter, based on the function scope and parameters(see more on implicit search). Importantly, it looks at the type of the implicit parameter. Here this means that the value must be of typeCanBuildFrom, with the proper type parameters too.The Scala collections have such factories already, and they are nicely made available to implicit search when you usecollection types such as Seq and Array. So the compiler will find them without trouble.So say we call the function like this:combineValues[AnyRef, Array](seq)combineValues[String, List](seq)The compiler will respectively search for the following CanBuildFrom instances, and pass them to the function:CanBuildFrom[Array[AnyRef], AnyRef, Array[AnyRef]]CanBuildFrom[List[String], String, List[String]]And it will just work!The result? We have a achieved more than what we were looking for: we have a function able to return a result made ofany existing collection available in the standard library, or even outside of the standard library, for that matter.The resulting collection can be anything you want as long as there is a CanBuildFrom for the resulting type. Most notably, Array is a plainJava array, and it works because Scala provides a CanBuildFrom for it. It’s a powerful approach.From the caller side, things remain easy: you call your function as usual except that you specify the type of the resultyou want.Is there magic here? No: it is all done thanks to the clever design of implicit parameters and their use within the standard Scalacollections. And the great thing is that the mechanics of it are available to anybody, not just to the compileror Scala standard library maintainers.What to think of the type parameters and the implicit CanBuildFrom factory? They certainly lead to more abstractprogramming, but when put in simple terms, like “here is a function which can return a result based on anycollection type you want, as long as the compiler finds a factory for that type”, I think it sounds quite reasonable." }, { "title": "More iterators goodness", "url": "/posts/more-iterators-goodness/", "categories": "Programming", "tags": "scala", "date": "2012-07-30 11:49:00 -0700", "snippet": "Following-up on the previous post about iterators,say we have a clean Scala API with Option instead:class Foo { def parent: Option[Foo] = … }def findBar(foo: Foo) = Option[Bar] = …It turns out tha...", "content": "Following-up on the previous post about iterators,say we have a clean Scala API with Option instead:class Foo { def parent: Option[Foo] = … }def findBar(foo: Foo) = Option[Bar] = …It turns out that Iterator.iterate falls apart with Option, because it requires a function returning a plain T.But we can write a better Option-aware iterate function:def iterate[T](start: T)(f: T =&gt; Option[T]): Iterator[T] = new Iterator[T] { private[this] var acc = Option(start) def hasNext = acc.isDefined def next() = { val result = acc.get acc = f(result) result }}Note that this iterate does not depend at all on application-specific code. In fact, it could be part of the standardScala library!With this new tool, the new ancestorOrSelf iterator simply looks like this:def ancestorOrSelf(foo: Foo) = iterate(foo)(_.parent)And one way to write findInAncestorOrSelf becomes:def findInAncestorOrSelf(foo: Foo) = ancestorOrSelf(foo) map findBar find (_.isDefined) flattenNow to be honest this last function is not fully satisfying, with its use of isDefined and its hanging flatten inthe end! There are other ways to write it, including with collectFirst, but still it’s not quite right.The root issue is that Scala.Iterator doesn’t have a headOption (or a nextOption) method. Until that’s the case wecan write our own extension method like this:class MyIteratorOps[T](i: Iterator[T]) { def nextOption = if (i.hasNext) Option(i.next) else None }implicit def toIteratorOps[T](i: Iterator[T]) = new MyIteratorOps(i)or, with Scala 2.10:implicit class MyIteratorOps(i: Iterator[T]) { def nextOption = if (i.hasNext) Option(i.next) else None}Again, this is something which could be in the standard Scala library. With this the final code becomes the much cleaner:def findInAncestorOrSelf(foo: Foo) = ancestorOrSelf(foo) flatMap findBar nextOptionIn the end it’s probably a matter of taste, but I would almost bet that as a programmer familiar with Scala collections,you would find this function immediately comprehensible. That’s a huge win in addition to the increased modularity gainedthrough the use of iterators." }, { "title": "Scala iterators and Iterator.iterate", "url": "/posts/scala-iterators-and-iteratoriterate/", "categories": "Programming", "tags": "scala", "date": "2012-07-30 11:31:00 -0700", "snippet": "There is a common programming pattern where you navigate a hierarchy in order to find an element satisfying a certaincondition. I have written code like this in Java probably a million times:class ...", "content": "There is a common programming pattern where you navigate a hierarchy in order to find an element satisfying a certaincondition. I have written code like this in Java probably a million times:class Foo { public Foo getParent() { … } }public Bar findBar(Foo foo) { … }Bar findInAncestorOrSelf(Foo foo) { Foo currentFoo = foo; while (currentFoo != null) { Bar possibleResult = findBar(currentFoo); if (possibleResult != null) return possibleResult; currentFoo = currentFoo.getParent(); } return null;}It is probably efficient but it’s not easy to read, it screams “boilerplate”, and it mixes two concerns: navigating the hierarchy doing something with elements in the hierarchySo while you can write in the same style in Scala, there is a better way which starts with iterators. You probablyknow about the Java Iterator interface, which allows you to iterate over collections and also underlies the “for-each”construct. Scala also has an Iterator trait, which looks a lot like Java’s construct but supports [lots of useful functions](http://www.scala-lang.org/archives/downloads/distrib/files/nightly/docs/library/index.html#scala.collection.Iterator).In fact it supports most of the functions found in Traversable (which is the base trait of every Scalacollection).This makes Scala iterators immensely more useful than Java’s: implementing an iterator takes a few lines of code andinstantly you have access to dozens of functions including foreach, find, map, filter, ++.So what if you use an iterator to implement findInAncestorOrSelf above? You can implement your own iterator, but it justhappens that here the built-in Iterator.iterate helps us bit: this function takes a starting object and a function toobtain the next object, and returns an iterator. Here is one which navigates all ancestors forever:def ancestorOrSelf(foo: Foo) = Iterator.iterate(foo)(_.getParent)And here is one which actually stops when there are no more ancestors:def ancestorOrSelf(foo: Foo) = Iterator.iterate(foo)(_.getParent) takeWhile (_ ne null)You can use that iterator to achieve the same as the original Java code (except it returns an Option[Bar]):def findInAncestorOrSelf(foo: Foo) = ancestorOrSelf(foo) map findBar find (_ ne null)It’s short and to the point, and the great thing is that you can use the iterator to do any kind of search ortransformation of elements in the hierarchy: navigation is completely independent from the rest.See also More iterators goodness." }, { "title": "Scala tip: getOrElseUpdate", "url": "/posts/scala-tip-getorelseupdate/", "categories": "Programming", "tags": "scala", "date": "2012-06-30 09:24:00 -0700", "snippet": "I found myself recently looking at the following code which I wrote when I was getting started with Scala:def getModelState(modelPrefixedId: String) = modelStates.get(modelPrefixedId) match { c...", "content": "I found myself recently looking at the following code which I wrote when I was getting started with Scala:def getModelState(modelPrefixedId: String) = modelStates.get(modelPrefixedId) match { case Some(modelState) =&gt; modelState case None =&gt; val modelState = new ModelState(modelPrefixedId) modelStates += modelPrefixedId -&gt; modelState modelState }This is typically logic you would write in Java, and it looks great in some ways: it uses pattern matching, the tuple arrow (-&gt;), etc. But it turns out that Scala collections already provide the getOrElseUpdate method on mutable maps. The 8 lines above translate simply into:def getModelState(modelPrefixedId: String) = modelStates.getOrElseUpdate(modelPrefixedId, new ModelState(modelPrefixedId))Morality: know your collections!" }, { "title": "Scala tip: import renames", "url": "/posts/scala-tip-import-renames/", "categories": "Programming", "tags": "scala", "date": "2012-06-18 16:44:00 -0700", "snippet": "In Java, you often write things like this, which are rather verbose:URLEncoder.encode(...)URLDecoder.decode(...)Since Java 1.5 you can use static imports, but then you are stuck with the original f...", "content": "In Java, you often write things like this, which are rather verbose:URLEncoder.encode(...)URLDecoder.decode(...)Since Java 1.5 you can use static imports, but then you are stuck with the original function names as is, encode(...) and decode(...).A cool feature of Scala is that imports support renaming, so you can write instead:import java.net.URLEncoder.{encode =&gt; encodeURL}import java.net.URLDecoder.{decode =&gt; decodeURL}And then you just use the functions under their new name:encodeURL(...)decodeURL(...)This is neat if you have to use these functions many times in a given file.Another common use of renames is to reduce name clashes. For example, Scala already has a number of things named Map. If you are using a Java API expecting a java.util.Map, you are likely to get name clashes.In Java, you would probably resort to full qualification, e.g. java.util.Map, and you can do the same in Scala, but that’s verbose. With renaming, you can write things like:import java.util.{Map =&gt; JMap, List =&gt; JList}And then use the Java Map as JMap and the Java List as JList. Nothing is changed at the VM level: it’s the same classes, but you now have a nice, short alias for them in the scope of the imports." }, { "title": "Scala partial functions (without a PhD)", "url": "/posts/scala-partial-functions-without-phd/", "categories": "Programming", "tags": "scala", "date": "2011-10-15 12:54:00 -0700", "snippet": "If you have done some Scala for a while, you know about pattern matching and match/case. Things like:value match { case Some(value) =&gt; … case None =&gt; …}But there is another use of the case ...", "content": "If you have done some Scala for a while, you know about pattern matching and match/case. Things like:value match { case Some(value) =&gt; … case None =&gt; …}But there is another use of the case keyword, without match, as in:map foreach { case (k, v) =&gt; println(k + \" -&gt; \" + v) }The first time I saw this kind of things I was a bit puzzled: in which situations could case be used without match? Well, it turns out 1 that a block with a bunch of case inside is one way of defining an anonymous function.There is nothing new with anonymous functions of course, and Scala has a very compact notation for those that doesn’t involve case. But this particular way of defining anonymous functions gives you a lot for free, namely all the good things of pattern matching like casting-done-right, guards, and destructuring. The example above, with foreach, shows how case can be used for destructuring the tuples of the map into key and value components.But there is more. Consider:scala&gt; List(41, \"cat\") map { case i: Int =&gt; i + 1 }scala.MatchError: cat (of class java.lang.String)As expected this crashes, because the pattern match doesn’t know what to do when the string “cat” is passed to it.On the other hand, this example doesn’t crash:scala&gt; List(41, \"cat\") collect { case i: Int =&gt; i + 1 }res1: List[Int] = List(42)So what’s the difference? Does collect just catch the MatchError and proceed? That would be clumsy and inefficient. In fact, the apparent magic lies in the fact that case blocks define special functions called partial functions. 2Now you might wonder, coming from a “normal” programming language background, what it means, for a function to be “partial”. Well, it comes from mathematics, where it’s opposed to “total” functions.But even though it comes from math it’s actually simple. Take for example this function:def inc(i: Int) = i + 1It is defined for any Int input value. That means for that any Int argument, it produces a resulting Int result. 3A partial function on the other hand is defined only for a subset of the possible values of its arguments:def fraction(d: Int) = 42 / dis not defined for d == 0 and fraction(0) will throw an exception. Think also of the square root function, which is not defined for negative real numbers. Examples abound. And it’s true also for the collect example above, where the anonymous function is only defined for an Int argument but not for a String (or any other) argument.So you get the idea about some values not “making sense” as the argument of a function because they can’t yield a significant result.Now if you think about it you will notice lots of situations like this in your programs, where functions are expected to work properly only for some input values. If the function is called with a disallowed value, it will typically crash, yield a special return value, or throw an exception (and this should better be documented). In short, partial function are very common in real-life programs even if you don’t know about it.So here fraction is defined as a regular function, but conceptually it is a partial function. The good thing is that Scala has built-in support for partial functions thanks to the PartialFunction trait. And here is one way of defining such a partial function:val fraction = new PartialFunction[Int, Int] { def apply(d: Int) = 42 / d def isDefinedAt(d: Int) = d != 0}A PartialFunction must provides a method isDefinedAt, which allows the caller of the partial function to know, beforehand, whether the function can return a result for a given input value:scala&gt; fraction.isDefinedAt(42)res2: Boolean = truescala&gt; fraction.isDefinedAt(0)res3: Boolean = falseAnd if you call the function:scala&gt; fraction(42)res4: Int = 1scala&gt; fraction(0)java.lang.ArithmeticException: / by zeroThis takes us back to the use of case to define partial functions. The exact same function can be written:val fraction: PartialFunction[Int, Int] = { case d: Int if d != 0 =&gt; 42 / d }(Notice that you must specify that the PartialFunction[Int, Int] type. It would be great if Scala had a syntax to make this even more compact but it doesn’t as of Scala 2.11.)And if you call the function:scala&gt; fraction(42)res5: Int = 1scala&gt; fraction(0)scala.MatchError: 0 (of class java.lang.Integer)(Note that there is one visible difference from the outside when you use the case way: you get a MatchError as you usually do with pattern matching.)The idea doesn’t apply only to numbers. In our collect example above, the partial function implicitly defined looks like this:val incAny: PartialFunction[Any, Int] = { case i: Int =&gt; i + 1 }The function takes an Any as parameter because List(41, \"cat\") is a List[Any]. But it is only defined for inputs that are of type Int:scala&gt; incAny(41)res6: Int = 42scala&gt; incAny(\"cat\")scala.MatchError: cat (of class java.lang.String)Passing a String didn’t go too well, as expected. But now you can check this before calling the function with:scala&gt; incAny.isDefinedAt(41)res7: Boolean = truescala&gt; incAny.isDefinedAt(\"cat\")res8: Boolean = falseSo we now have the explanation for the difference in behavior between collect and map, which is that collect expects a partial function. It asks incAny whether it is defined for 41 and then \"cat\", and so automatically filters out \"cat\". Another cool thing here is that the Scala compiler can even infer a clean resulting collection type: List[Int]!scala&gt; List(41, \"cat\") collect incAnyres9: List[Int] = List(42)Also, as you notice, if you define the partial function inline, the compiler knows that it’s a partial function and you avoid the explicit PartialFunction trait.Notice that partial functions can lie:scala&gt; val liar: PartialFunction[Any, Int] = { case i: Int =&gt; i; case s: String =&gt; s.toInt }liar: PartialFunction[Any,Int] = &lt;function1&gt;scala&gt; liar.isDefinedAt(42)res10: Boolean = truescala&gt; liar.isDefinedAt(\"cat\")res11: Boolean = truescala&gt; liar(\"cat\")java.lang.NumberFormatException: For input string: \"cat\"Here liar says incorrectly that it’s defined for \"cat\". It would probably be better to write:scala&gt; val honest: PartialFunction[Any, Int] = { case i: Int =&gt; i; case s: String if isParsableAsInt(s) =&gt; s.toInt }honest: PartialFunction[Any,Int] = &lt;function1&gt;scala&gt; honest.isDefinedAt(\"cat\")res12: Boolean = falseSo now you see how partial functions defined with case can be used for things like collect with a super compact notation. You will see them in other places, including catch expressions.There is another situation in Scala where partial functions are “just there” and you might not know it. Take the following List:val pets = List(\"cat\", \"dog\", \"frog\")In Scala, any instance of Seq, Set or Map is also a function. So you can write:scala&gt; pets(0)res13: java.lang.String = catBut:scala&gt; pets(3)java.lang.IndexOutOfBoundsException: 3Wouldn’t that mean that the pets function is, hum, only defined for values 0, 1, and 2? Sounds familiar? Wouldn’t it be cool to look at pets as a partial function then? Well you can because in Scala any instance of Seq or Map (but not Set) is actually a partial function. So you can write:scala&gt; pets.isDefinedAt(0)res14: Boolean = truescala&gt; pets.isDefinedAt(3)res15: Boolean = falseAnd if you had a list of indexes and wanted to safely collect values for these indexes in a new list, you could write:scala&gt; Seq(1, 2, 42) collect petsres16: Seq[java.lang.String] = List(dog, frog)Here it works well because collect handles everything for us. But it can be a pain to check isDefinedAt all over the place. If anything, it feels a bit like a null check, and we hate those in Scala. The good news is that in Scala the PartialFunction trait supports the lift method, which converts the partial function to a normal function that doesn’t crash:scala&gt; pets.lift(0)res17: Option[java.lang.String] = Some(cat)scala&gt; pets.lift(42)res18: Option[java.lang.String] = NoneAs you see the lift returns a function that returns an Option of the value. This allows you to safely process values without null checks and without calling isDefinedAt yourself:scala&gt; pets.lift(0) map (\"I love my \" + _) getOrElse \"\"res19: java.lang.String = I love my catscala&gt; pets.lift(42) map (\"I love my \" + _) getOrElse \"\"res20: java.lang.String = \"\"I hope this helps make some sense of partial functions in Scala.NOTE: This post was updated on 2014-12-27 to fix the use of def where val was called for, based on user comments. A few typos have been corrected as well.NOTE: This post was updated on 2017-01-17 to address the fact that Set is not a partial function, as kindly noted by a reader. From The Scala Language Specification: “An anonymous function can be defined by a sequence of cases […] which appear as an expression without a prior match.” &#8617; This is not to be confused with partially applied functions, which are a completely different topic. &#8617; In Scala, it is defined even for Int.MaxValue, as Int.MaxValue + 1 == Int.MinValue. The result is just plain wrong but it’s defined! &#8617; " }, { "title": "Continuations in Scala (without a PhD)", "url": "/posts/continuations-in-scala/", "categories": "Programming", "tags": "scala", "date": "2011-09-17 16:15:00 -0700", "snippet": "With @avernet we have been thinking lately about continuations, for a few reasons: Continuations pop up on the web as a concept that could help with event-based programming Scala has a continuati...", "content": "With @avernet we have been thinking lately about continuations, for a few reasons: Continuations pop up on the web as a concept that could help with event-based programming Scala has a continuations plugin, and we’re wondering what the deal is with that. It just seems like fun to try to understand this (alongside things like monads).The main idea of continuations is the ability to interrupt a program, save its control state, and resume it at a later point in time.One thing to realize is that there are many ways to implement this idea and variations around it. Google a bit and you will find a lot of material on continuations, some of which goes deep into computer science. Here we don’t care about the big picture: we just want to get at least some insight into Scala continuations.The main source of information on Scala continuations is the EPFL paper describing how continuations were designed in the Scala compiler. But if you google “scala continuations” and hope to find right away a clear explanation, you might be disappointed. You will find the following example (I am not kidding):reset { shift { k: (Int =&gt; Int) =&gt; k(k(k(7))) } + 1} * 2This proudly produces the flamboyant result: 20. As a commenter says, “these are convoluted ways of adding numbers and I have no idea what is being gained or accomplished”. @djspiewak echoes this when he says that continuations in Scala are “powerful …but useless”. It’s a bit like explaining how a combustion engine works, but not that it could be used to, say, move your car from home to work.So let’s try to look at something concrete. Imagine a read() function which returns a byte from the network:def read: ByteThis is typically the signature of a synchronous (blocking) function. After all, it has a return value and in normal programming languages, that means waiting for that value to be available. A program that reads two bytes in a row and prints them looks like this:val byte1 = readprintln(\"byte1 = \" + byte1)val byte2 = readprintln(\"byte2 = \" + byte2)The issue is that in a web browser or node.js or any other single-threaded, event-driven environment, this is not acceptable: you simply cannot block for a long time, otherwise nothing else can happen in the system. So instead, the read() function is made to take a callback, something like:def read(callback: Byte =&gt; Unit): UnitYou must now write your program like this:read { byte1 =&gt; println(\"byte1 = \" + byte1) read { byte2 =&gt; println(\"byte2 = \" + byte2) }}The issue here is that you must write in a funny style, even with Scala’s lightweight syntax for closures. Note also how each callback typically causes a new level of indentation. Some programmers manage to get used to this style, but it does not represent the control flow in a very natural way, and the issue grows with the size of the program.Enter Scala continuations:import scala.util.continuations._reset { val byte1 = shift(read) println(\"byte1 = \" + byte1) val byte2 = shift(read) println(\"byte2 = \" + byte2)}And voilà: you can write the program again in imperative style without callbacks and closures.You notice the reset and shift constructs. These terms don’t make any sense to a newcomer, but they were introduced a long time ago in an academic paper so are reused in Scala. Basically, reset delimits the continuation. With full continuations, the entire rest of the program would be under control of the continuation, but here, whatever is before and after the reset block has nothing to do with continuations at all. (Also, reset can return a value, although here we don’t care about it.)shift is the construct that does the real magic. Mainly, it smartly hacks around to pass the continuation, that is a closure containing whatever-code-follow-shift-until-the-end-of-the-reset-block, to its body. If you run that closure, you actually run that code after the shift. If you store that closure somewhere, you gain the ability to decide when to run that code at a later point. This is the general idea of continuations: interrupt, then resume a program. Here it’s all done with functions and closures behind the scene.To see how our example really works, let’s look a the control flow. First, how would you go about implementing the non-blocking read() function? Obviously it would have to work hand in hand with an asynchronous framework of some sort. Let’s say it’s roughly equivalent to something like this:var myCallback: Byte =&gt; Unit = nulldef read(callback: Byte =&gt; Unit): Unit = myCallback = callbackThe key here is that read() is passed a callback function. read() just stores the callback in a variable and then returns immediately. There is just no waiting. This simulates what a real async framework would do.In our example, shift calls read() with the continuation as a callback, and as we have seen read() returns right away. But then what does shift do? Does it just hang around? No: shift returns right away as well, and then control continues right after the reset block, and control should then return to the async framework. So it’s as if the user program had paused just in the middle of calling shift(read).Now say that 5 minutes later, a byte (say 42) is available from the network. The async framework figures this out, notices myCallback is registered, and so calls it with the value 42. The result of calling the callback is to run the continuation, that is the code that follows the first shift runs, with byte1 set to the value 42. Did you see what happened there? It’s as if the user program had resumed. And in effect it has.What happens next? There is a another shift, so the scenario repeats: a new continuation is stored into myCallback. This time, it contains the code after the second shift. read() returns, shift returns, and control returns to the async framework, this time via the call to the initial callback. When the framework receives another byte from the network, the user program runs up to the end of the reset block and has in effect terminated. We are happy because: We never blocked our single thread. We wrote the program in a clear, understandable style. We actually did something (read and processed bytes from the network)Obviously to make this real you want a framework and a function library with a set of useful asynchronous functions besides read(). Also, note that you can hide the use of shift from the programmer, and expose the read function like:def aRead = shift(read)And the program becomes:reset { val byte1 = aRead println(\"byte1 = \" + byte1) val byte2 = aRead println(\"byte2 = \" + byte2)}By the way, it also works within while loops. With this specific use of continuations where shift never calls the continuation directly, control unwinds the stack back to the top, and there is no stack explosion. This is good news:reset { var value = -1 while (value != 42) { value = aRead println(value) } println(\"done\")}So I would say that this at least appears to be a very useful (if not mainstream at this point) use of continuations in Scala. They will become even more useful when used as part of a reactive programming DSL." }, { "title": "48 hours of Nexus One", "url": "/posts/48-hours-of-nexus-one/", "categories": "", "tags": "", "date": "2010-01-31 22:11:00 -0800", "snippet": "I just used a Nexus One for 48 hours (thanks Pierre). Here are a few quick notes/thoughts from the perspective of an iPhone 3G user.Getting started Take the SIM card out of the good old iPhone 3G, ...", "content": "I just used a Nexus One for 48 hours (thanks Pierre). Here are a few quick notes/thoughts from the perspective of an iPhone 3G user.Getting started Take the SIM card out of the good old iPhone 3G, put it into the unlocked Nexus One, and voilà, you are done (sans 3G since the Nexus One does not support AT&amp;T's 850 MHz 3G band)!The phone asks you to log in with a Google account. Since my contacts were synced with Google already, all that information was transferred right away to the phone.First impressionsBuild. The Nexus One looks beautiful and solid. Display. The iPhone's clearly pale in comparison (especially resolution). On the other hand the OLED screen doesn't perform as well in plain daylight. Speed. The Nexus One is snappy. I don't have an iPhone 3G S, but the Nexus One is definitely way faster than the iPhone 3G (which often feels impossibly sluggish).Android. The OS requires some getting used to, but you quickly figure out how to do most operations, especially if you are a bit computer-savvy. The four buttons at the bottom of the screen are not as elegant as the iPhone's single button, but they usually make sense and you get used to them quickly. I had very little difficulty adapting.&nbsp;The cool stuffMultitasking. A few examples: Upload pictures in the background.Play Pandora while using any other app.Switch between a few open apps in an instant.Notification panel. It tells you quickly of things like new emails, tweets, completed downloads, and more. The iPhone needs UI improvements in this area.Text completion. It is different than the iPhone's, and often better as you can quickly pick words from a list.Web browser URL completion. Android seems to use something like Google Suggests to help you enter URLs.Voice input. This works only part of the time, but it's a good start and it's available in any text field. GMail. It is excellent and supports starring and conversations, unlike the iPhone's mail app.Navigation. I didn't have time (or 3G) to really try it, but the GPS navigation app must be quite cool.Google Voice. No need to fight with Apple here, Google Voice is fully integrated.Camera flash. That seems pretty basic, but it is not a feature of the iPhone so far.Programming. I haven't tried to program anything on the Nexus One, but I like the idea of being able to use Java (or even Scala) instead of Objective-C.Openness. Open source OS. Multiple hardware vendors. No approval process like Apple's (you can even change the default web browser on Android). This has some appeal.The OK stuffWeb browser. Safari on the iPhone is still better overall.App market. It is easy to use, but is nothing to call home about. Bluetooth. My Bluetooth stereo headset was setup quickly and usually worked ok, but: I had an issue whereby at some point the sound started coming out of the phone speaker again in spite of the Bluetooth connection being active. Later things started working again. My Bluetooth headset suffers from the \"jeans pocket\" syndrome: if you put your phone in your pocket and start walking, the sounds starts breaking (yeah I know, crazy). This happened more with the Nexus One than with the iPhone 3G. This tells me that the Nexus One's Bluetooth signal might be weaker.The not so cool stuffApps. Clearly there are less apps and of lesser quality. A few examples: I missed OmniFocus, Jott , and Instapaper / Read it Later.The Facebook app (not that I use it much) is still inferior.Twitter clients clearly don't beat Tweetie on iPhone (Seesmic was ok though, and I hear that Twitdroid is pretty good but I didn't want to spend money to try it).Multitouch. There is no multitouch (especially no \"pinch\"), and the Nexus One screams for it. UPDATE: Google has just released an update with multitouch!Copy/paste. This is pretty bad compared to the iPhone: text selection is difficult and not available everywhere.Media. The audio and video players are not as easy to use as the iPhone's. There is no built-in support for podcasts (you can try Google Listen for that or other apps). (I used doubleTwist to copy some mp3s and videos to the phone and it worked fine.)Trackball. The trackball is almost exclusively used to move inside and between text fields/areas. My feeling is that it does a poor job at this and Google should just abandon it and use another way of navigating.Screenshots. There is no built-in screenshot capability. The iPhone does this out of the box. Apparently you have to root your phone to install 3rd-party screen capture apps. This would have been useful for this post.Landscape mode. This is only possible in one direction instead of two, unlike the iPhone. It took me a while to figure out why landscape mode worked some times but not others. Is it better than the iPhone? I have no complaints about the hardware except for the trackball (concept and implementation), and the CPU and display give Nexus One the edge until this summer when Apple hopefully releases a new iPhone.As for the software, it's not easy to determine a winner. Clearly a lot of thoughtful work went into Android, but it doesn't feel as polished and slick as iPhone OS. Often the phone feels more like a regular desktop computer. This can be good or bad depending on your perspective.On the apps side, iPhone still wins hands down, but the Google stack of applications, including GMail, Navigation, and Google Voice, works best on Android, and that might win the hearts of some. Anyway there is little doubt Android will soon have enough good third-party apps that this won't be as much of a problem anymore (except maybe for games).Most likely my next phone will still be an iPhone because of the apps and ease of use, but this short Android adventure was quite refreshing!" }, { "title": "2009: Products I Can’t Live Without", "url": "/posts/2009-products-i-cant-live-without/", "categories": "", "tags": "web2.0, apple, software, 2009, google, iphone, apps", "date": "2009-01-07 00:00:00 -0800", "snippet": "Mike Arrington has just posted his 2009 list of products he can't live without. After my own 2008 list, here is my update for 2009 as I think it's fun to observe how our computing environment evolv...", "content": "Mike Arrington has just posted his 2009 list of products he can't live without. After my own 2008 list, here is my update for 2009 as I think it's fun to observe how our computing environment evolves from year to year. First, the new entries:OmniFocus is the best to-do list application I know of. I use the desktop application daily to handle work and personal tasks. It is worth the whole of its $80. As a pure desktop application without an online counterpart it is a step back, but the benefit is flexibility and speed, both crucial to GTD.Twitter, which I couldn't figure out at all a year ago, has seen 1,778 personal updates so far, and we use it at Orbeon too. I use Twitterrific on iPhone and twhirl on the Mac, but I am not married to either of these clients. Beware: Twitter most likely will kill your personal blog (as if it needed that!).iPhone 3G: I simply can't imagine switching to anything else before a long time. I use pretty much the whole of it: phone, SMS, web, email, iPod, maps, camera, Yelp, music apps, book readers, dictionaries, you name it. Its biggest flaws are the inability to run more than one application concurrently (e.g. for music apps) and the lack of background notifications (e.g. Twitter and IM clients). I don't care how Apple does it, but these have to be addressed.Safari has become my second browser of choice after Firefox. WebKit is great (with some quirks), Safari itself not so much. To be really usable, a browser needs: 1) something like the Firefox \"awsome bar\", 2) an ad blocker and 3) proper tab save/restore. Safari does have some add-ons partly addressing these shortcomings, but Firefox remains the king in this area. So I use Safari for certain specific sites or applications only.Google Sites handles the new Orbeon Forms wiki. Sites can do better, and it is frustrating that it is incompatible in subtle ways with Google Docs, but it is a start.The strong values:Firefox version 3 for Mac is a winner. It is hard to imagine we had to deal with the quirky version 2 for so long.GMail: I still use it mostly through OS X's Mail app through IMAP, but I had to disable the \"All mail\" folder to make it usable. The big change is that I use it through the iPhone mail application as well. I often process (archive) my incoming email on the go, but rarely write more than one-liners on the phone.Delicious: I am now at about 4100 entries (was 1900 entries a year ago). Version 2.0, delivered in July, is a success. I add entries mostly through the Firefox extension.Skype: VoiP, chat, video, SkypeOut, SkypeIn and soon, I hope, usable screen sharing.Google Calendar and Google Maps remain essential.Google Docs is strong and getting stronger. The new offline support is excellent.SlimTimer: it is still impossible to live without it at work, although report performance is an issue and development seems to have stalled.iTunes is frustrating in many ways but unavoidable if you have an iPhone. The new grid view for albums in version 8 is good, and it is still probably the best podcast client around.iTunes Store: yesterday's announcement of 100% DRM-free music was long due and I may buy again music through iTunes (other than by accident). Movie rentals rock, but the movie selection is appalling.Amazon mp3 Store remains appealing because of price, selection, the ubiquitous mp3 format, and the web-based interface.Picasa is my favorite photo application. I had been using it recently through CrossOver, but I now use the new native version. I wonder if iPhoto 2009 will displace Picasa for me this year? In particular, the flickr integration is very promising, and Google has less incentive than Apple to promote flickr support.Flickr is still my photo site of choice, but improvements have been slow to come this year.Google Reader holds about 270 feeds as of now (was 200 a year ago). The recently introduced new look is refreshing. I find myself using it less heavily as lots of news come from Twitter.The disappointments:Basecamp: we still use it at Orbeon to communicate with our customers. I no longer use it as a personal to-do list as it sucks at that. Basecamp is reliable and cheap, but there are issues with messages, to-do lists, time management, and the writeboards that really don't leave me very satisfied with it at the moment. 37signals is good at rhetoric, but less so at regularly updating their applications (at least Basecamp, which is rumored to represent 60% of 37signals's about $8m revenue for 2009).OmniFocus for iPhone is in some ways a better GTD tool than the desktop version. For example it has a built-in notion of next action, and its relative simplicity is attractive. But stability and performance make it about unusable. It often takes 30 seconds or more to start, and much more after a synchronization. I am not the only one with this problem. A GTD app must be snappy and reliable, so this is a big letdown.Jott: I haven't used it as much as I thought, especially since the iPhone app is unable to send notification emails even with the paying plans. If they fix that I will pay $3/month without even thinking.Adobe Acrobat Connect seemed like the best affordable screen sharing application out there, but it can cause browser crashes and handling of screen dimensions is frustrating (try sharing when using a 30\" monitor!). Unfortunately, WebEx remains the most stable and powerful solution out there, but it is outrageously priced.Google Chrome could replace Safari as my second browser of choice if there was a Mac version. I suppose it is coming soon. Or is it, given that it took Google years to release Picasa for Mac?Blogger hasn't seen a single visible improvement since last year. Frankly, it is not a very good blogging service anymore.Feedburner is not that useful anymore given the general decrease in personal and work blogging activity.YouTube has not really moved beyond its lowest common denominator position. I watch videos mostly through iTunes podcasts, iTunes video rentals, or other sources.Social networks:I have been going to the Facebook site more (but not really \"using it\" more) because many less geeky friends use it. I mostly go to the site when I get an email notification. My guess is that photo sharing and tagging will be the first feature of Facebook I might actually appreciate this year.I have about 200 connections on LinkedIn (from about 150 a year ago). I still haven't found any actual use for it.Dopplr: I entered a few more trips there but it hasn't been really useful so far.Like last year, I fail to find most social networks either really useful or exciting, Twitter remaining the notable exception.See you next year!" }, { "title": "Upgrading Your 17&quot; MacBook Pro Hard Drive", "url": "/posts/upgrading-your-17-macbook-pro-hard/", "categories": "", "tags": "howto, apple, hardware, macbookpro, storage, harddisk, harddrive, laptop, macbook, mac", "date": "2008-10-25 21:30:00 -0700", "snippet": "A few days ago I upgraded my MacBook Pro's hard drive after realizing 320 GB drives sell for USD 110 - which made constantly worrying about disk space ridiculous. This also should extend my old MBP...", "content": "A few days ago I upgraded my MacBook Pro's hard drive after realizing 320 GB drives sell for USD 110 - which made constantly worrying about disk space ridiculous. This also should extend my old MBP's life a little bit.Here are the steps needed to replace the drive:Buy the new drive ;-) I got mine from Newegg. I picked a 7200 rpm 320 GB drive instead of a 5400 rpm 500 GB drive hoping that performance will be slightly better.Backup your system. I use Time Machine and Time Capsule so that part was easy. Just make sure you don't do any significant work after the last backup.Follow the ifixit instructions to open the laptop and replace the drive. Count about 1 hour to go through this, unless like me you have to run to Home Depot to get one of those funny TORX T6 screwdrivers.Reassemble the laptop.Now for the software part:Boot on the Leopard install DVD.In the menu, chose Disk Utility. Use that to partition and format the new drive.Make sure the MBP has a way to connect to the network. I connected it by ethernet directly to Time Capsule to shorten the restore time.Restart the machine. I had to do this or the Time Machine restore wouldn't see the new drive.This time choose Restore System from backup. There you pick a source backup. First, you pick your Time Capsule (if that's what you use), then the backup sparse bundle file, and finally the backup version. For the destination, obviously, choose your newly-installed drive.The restore tool then spends a lot of time computing the size of the backup to make sure the data fits in the destination. In my case this took between 30 and 60 minutes.Finally, start the restoration process proper. I let this run overnight so I don't know exactly how long this required, but it took less than 12 hours to restore about 140 GB of data.Et voilà, 174.76 GB of free space! That won't last long...You may also want to read this excellent post by James Duncan Davidson, with much better photos than the ones I took with my iPhone.UPDATE: I forgot to mention the following caveats:Time Machine does not backup the spotlight index, so spotlight will run for a while after your first boot with the new drive.The same goes for the Mail.app caches when using IMAP: Mail.app takes quite a while resynchronizing all your email folders.I had rented a movie from iTunes before upgrading. Guess what: that wasn't backed up either, and I had to pay again for the rental as it doesn't appear you can just download the movie again." }, { "title": "iPhone 3G Day: the Good Parts", "url": "/posts/iphone-3g-day-good-parts/", "categories": "", "tags": "technology, shopping, marketing, iphone", "date": "2008-07-13 17:31:00 -0700", "snippet": "Like many, I took the plunge on Friday and bought an iPhone 3G (pictures and videos of the saga here). It was clearly not the most reasonable thing to do to stand in line for hours to get an expens...", "content": "Like many, I took the plunge on Friday and bought an iPhone 3G (pictures and videos of the saga here). It was clearly not the most reasonable thing to do to stand in line for hours to get an expensive device associated with an expensive 2-year contract with AT&amp;T (which is not a particularly loved company). But hey, all that was known in advance.What in the end amazed me was the quality of the shopping experience at the Palo Alto Apple store. I am not talking about the 6 hours spent standing in line: this was partly due to the activation process, already expected to be extremely slow, and which took a turn for the worse due to Apple and AT&amp;T servers being down. But even that was kind of expected and part of the game.The first thing was the quality and professionalism of the Apple store staff:On that busy day, the two Apple stores I called actually had somebody available to pick up the phone and kindly answer my questions about stock and expected wait time.Employees regularly walked up and down the line, offering water and answering questions.At the end of the line, every buyer was greeted and personally managed. The usual wireless device used at Apple stores allowed for just picking a convenient spot in the store to talk and handle the registration process.The (tired) employees remained amicable and helpful without being obsequious, providing regular updates, although obviously they couldn't do much about the failing servers.When the possibility arose that the iPhones could not be activated before the following day and that instead we would get a voucher for the following morning, the store manager individually talked to all the customers affected and shook hands with them.In short everything was designed to make you, the customer, feel treated as well as possible given the circumstances.The second amazing thing is the aura that was put around the iPhone: The iPhone was fetched and brought back to you as if it was a unique jewel, in a nice \"iPhone 3G\" bag containing the quite beautiful iPhone 3G box.You were given the opportunity to open the sealed box yourself before proceeding to activation (see the instructions for the retail employees as reported by MacRumors).Finally, after all was said and done, the bag was handed back to you like a trophy (and it actually was one in a way given the effort it took to get it).I know, after all, it's really just a phone (\"This phone is that important to you?\", said a woman passing by the line, \"(Sigh) Different generation...\"). But with this masterful mise en scène, you really felt that you went through all this for a good reason. Whoever devised this whole process is a marketing genius." }, { "title": "A case of failed technology: Bluetooth headphones", "url": "/posts/case-of-failed-technology-bluetooth/", "categories": "", "tags": "audio, osx, bluetooth, hardware, fail, motorola, review, headphones", "date": "2008-04-22 18:53:00 -0700", "snippet": "I've had a fair experience with Bluetooth devices, including headsets, mice, and keyboards. At home, I am now using the Apple Bluetooth keyboard and mouse, and I am quite happy with them.Recently, ...", "content": "I've had a fair experience with Bluetooth devices, including headsets, mice, and keyboards. At home, I am now using the Apple Bluetooth keyboard and mouse, and I am quite happy with them.Recently, I thought I would look at getting a Bluetooth headphone, especially since the advanced audio profile (A2DP) seems to be getting more widespread, and OS X Leopard finally added support for it. It is just so appealing to go cordless.So I ordered the Motorola MOTOROKR S9, which had pretty good reviews, and I connected it to my MacBook Pro. Here are the major issues I encountered:Even when no music is playing, there is a constant background noise. If you adjust the volume optimally and play pop music, you may not notice it so much, but this pretty much kills classical music.Interferences, which translate with pops and cracks, come up every few seconds or tens of seconds. I tried distances between the headphone and the computer of maybe two to then feet, with the same result.Background noise and interferences aside, the sound quality is metallic and full of artifacts which remind me of the first mp3 encoders back in the 90s. I guess that this may be due to the use of the low complexity SBC codec instead of decent compression on the wire.Using the headphone or headset along with a Bluetooth mouse simply doesn't work: the mouse will stop to a crawl.I got a complete OS crash (kernel panic) in the OS X A2DP driver. This actually happened after my headset was already shipped back.The above I think fully justifies my sending the S9 back to Amazon. There are also smaller issues:I got into situations where no sound would come out at all when playing from iTunes, and I simply couldn't get things back to work without pairing the device again.I couldn't get Skype to use the headset microphone as input, but the high-quality A2DP as output.As a headset, the sound only comes out on the left side.In short I am utterly disappointed because I thought that by now the technology would be ready, and it turns out that there is a lot going on for the S9:It really looks cool and is almost invisible from the frontThe sound quality of the earbuds themselves seems decentIt is comfortable and lightweightAs a headset connected to an iPhone, it seemed to work quite wellHopefully the manufacturers will soon figure out how to really make this work. As it is today, I simply think that it is not useable, certainly not with a Mac." }, { "title": "Met HD broadcasts at movie theaters actually quite good", "url": "/posts/met-hd-broadcasts-at-movie-theaters/", "categories": "", "tags": "opera, movies, music, puccini, met, tvhd", "date": "2008-02-17 10:53:00 -0800", "snippet": "Saturday morning we went to the local movie theater to watch a Metropolitan Opera's high-definition live broadcast of Puccini's Manon Lescaut.I was curious about how much I would enjoy watching an ...", "content": "Saturday morning we went to the local movie theater to watch a Metropolitan Opera's high-definition live broadcast of Puccini's Manon Lescaut.I was curious about how much I would enjoy watching an opera in a movie theater, but it turned out to be quite good in several respects:I had heard that these broadcasts had been quite successful last year, but somehow I could not really believe it. We joked before entering the theater that maybe we would be the only two people there. But in fact the place was almost packed (mostly with gray or white heads), which was heart-warming.Half of each of the two intermissions was spent taking the viewer behind the scene. Renée Fleming interviewed the two protagonists (Karita Mattila and Marcello Giordani), conductor James Levine, the stage manager, and the couple in charge of animals on stage (horses and dog). You also got to see the cast behind the curtain, and all the work needed to change the sets. This is material which you simply don't get at the opera.You get to see a lot of the action much better than if you are sitting hundreds of feet away from a stage. You also get to see what was happening in the orchestra pit during orchestral moments.It costs only $22, it's close from home, there is plenty of parking and and you don't have to dress up.Picture and sound quality are good, although sitting quite in front of the theater, you can see the pixels. I wonder what's the resolution? 720?1080?Other than that the performance was quite good. I had never seen Puccini's Manon Lescaut, performed less often than Massenet's version of l'Abbé Prévost's story. This is not an opera as perfect dramatically as La Bohème, but you can understand why this was Puccini's first real success on stage.The sets were gorgeous. Karita Mattila, at 47 (as she tells herself during her interview), is old for the role of the youthful Manon, and this appears too well during the close-ups, but she sang and acted wonderfully. Unusually maybe for a modern tenor, Marcello Giordani has a warm and pleasing voice and did quite well in the several quite demanding arias. Conducting was as you could expect from Levine.I think we will be tempted by the experience again. Next up are Britten's Peter Grimes, Wagner's Tristan und Isolde, Puccini's La Bohème, and Donzetti's La Fille du Régiment." }, { "title": "Even more stuff Steve did not announce", "url": "/posts/even-more-stuff-steve-did-not-announce/", "categories": "", "tags": "music, apple, mp3, amazon, itunes, drm", "date": "2008-01-20 10:10:00 -0800", "snippet": "Following-up on Alex's posts, to me the most glaring hole in the MacWorld announcements was the lack of any update about DRM-free music.Apple was a precursor of DRM-free music online with last year...", "content": "Following-up on Alex's posts, to me the most glaring hole in the MacWorld announcements was the lack of any update about DRM-free music.Apple was a precursor of DRM-free music online with last year's EMI deal, but EMI, Warner, Universal, and Sony BMG, that is all the major labels, have since announced DRM-free mp3 downloads on Amazon.com while Apple got nothing new to show. A TechCrunch post mentions that \"Amazon now has 3.25 million DRM-free tracks in their library, compared to just 2 million at iTunes.\"iTunes must have another 4 million DRM-protected tracks, but I can't imagine any informed person buying any of those now, and that has to mean that people will start shifting towards using Amazon. Of course Apple has the benefit of its installed base, iTunes on every Mac, and consumer inertia (after all they just sold their 4 billionth song).Maybe Apple has been simply too busy securing the deals with the movie industry for online video rentals - clearly a potentially quite disruptive move. Still I can't imagine Apple not caring about the situation with music downloads, so this means that Apple is having real trouble with the major labels. Is this the beginning of the end for the supremacy of the iTunes music store?" }, { "title": "PDF support: one of the highlights of OS X Leopard", "url": "/posts/pdf-support-one-of-highlights-of-os-x/", "categories": "", "tags": "osx, apple, adobe, pdf, leopard", "date": "2008-01-12 08:49:00 -0800", "snippet": "Many of my tasks, at Orbeon or personal, involve PDF documents:Sending invoices to customers (no way we are sending Word or Excel documents!)Archiving, viewing and searching documents scanned with ...", "content": "Many of my tasks, at Orbeon or personal, involve PDF documents:Sending invoices to customers (no way we are sending Word or Excel documents!)Archiving, viewing and searching documents scanned with the ScanSnap scannerViewing faxes received by emailSaving online articles for reference, further reading or printing (until we get good e-paper I prefer to read long articles on good old dead trees)I was already using PDF a lot on Windows, but that required installing a free viewing tool (Adobe Reader) and a paying PDF printing tool (Adobe Acrobat).When I switched to the Mac back in 2006, I appreciated right away the built-in ability to view and print PDF documents without buying a third-party tool. But Leopard adds even more to the mix:The new Quick Look feature in the Finder and Mail is not perfect, but excellent nonetheless: just press the space bar (Finder) or a button (Mail) and you have a super-fast preview of almost any document or attachment, including PDF. You can even scroll down multi-page documents and keep the preview open while navigating to other documents. (To be fair, OS X should have had this for years but better late than never.)The new Preview allows you to insert, delete, rotate, and reorganize pages in a PDF document and save the result.The much improved Spotlight automatically indexes PDF documents for (almost) instant content search.Windows XP has nothing of the sort built-in. Vista has XPS, which sounds cool but, no matter how good it may be, is today nowhere as widespread as PDF and that alone does not make it a viable option for me at the moment. Leopard definitely wins this one." }, { "title": "A paperless life with the Fujitsu ScanSnap scanner", "url": "/posts/paperless-life-with-fujitsu-scansnap/", "categories": "", "tags": "lifehack, hardware, scansnap, software, digitization, fujitsu, paperless, paper, scanner, tip", "date": "2008-01-04 04:04:00 -0800", "snippet": "I recently bought two Fujitsu ScanSnap scanners: one for the office (Mac version) and one as a gift for my brother (PC version).For as long as I can remember, I have had a strong aversion for paper...", "content": "I recently bought two Fujitsu ScanSnap scanners: one for the office (Mac version) and one as a gift for my brother (PC version).For as long as I can remember, I have had a strong aversion for paper documents. You know, bank statements, invoices to pay, receipts, leases, you name it. Some of these things can be thrown away, but others should be kept for a while just in case. I also have the notion that in this day and age, we shouldn't need to destroy information.The problem is that paper documents just seem to pile up in a disorganized way unless you make some very serious organization efforts involving old-fashioned hardware like staples, folders, binders, and cardboard boxes. In the end this takes a lot of space and you don't even know where the stuff is. I get goosebumps just thinking about it.So the obvious solution is to go paperless, which involves scanning those documents which you don't get in electronic form. Going that route with a regular flatbed scanner involves:Placing a sheet on the scannerGoing to your scanning software and starting the scanIf necessary: turning the page to scan the reverse sideThen repeat until you have scanned all the pages. After that, you may be happy with just plain image files, or you may want to fire your PDF-making software and/or your OCR software. If you are really lucky, things will be smooth enough. But in the end the whole process is just hell for any document with more than one page. I think you have to be somewhat superhuman to consistently go this route. I personally tried and failed.Enter the ScanSnap:Put your multi-page front and back document in the trayPress the button on the scannerVoila: your PDF file is readyThe ScanSnap is able to scan in duplex, that is front and back (with an option to automatically remove blank pages). It also comes with OCR software which can create searchable PDF documents as an optional (but computationally intensive) step.It's just amazing how fast you can scan piles of year-old documents with this toy. In fact, scanning actually becomes fun. The hardest task is to name the resulting PDF files and move them into folders (although in theory you could skip this step if you are happy with automatically-generated file names and if you plan to rely 100% on content search)." }, { "title": "How can Orbitz and the likes be so dishonest?", "url": "/posts/how-can-orbitz-and-likes-be-so/", "categories": "", "tags": "orbitz, complaint, flying, travel, consumer", "date": "2008-01-04 01:00:00 -0800", "snippet": "You know, like when all those cheap flights are listed, but Orbitz tells you that the flight is not available when you want to buy it? Systematically, our recent flight searches have come up with t...", "content": "You know, like when all those cheap flights are listed, but Orbitz tells you that the flight is not available when you want to buy it? Systematically, our recent flight searches have come up with this issue. It seems that this is nothing new and has been going on for years.This is not only irritating, it also removes a lot of the value Orbitz is meant to provide.It's not just that you are out of luck and that the system is temporarily out of sync. After all, even after you check such a flight, it keeps popping up in your searches. And it often does the following day as well.There is certainly a solution to that problem if Orbitz and the airline companies actually want to fix this broken behavior. Given the amount of time this has been going on, I can only assume that it is deliberate.No matter whose fault it is, I am just wondering: how do we users put up with what only amounts to a permanent lie?In the meanwhile, I am trying to book flights directly from the airlines whenever possible. Even though they may be the ones providing the disinformation, I have not hit this issue on their web sites, and I want to send a signal to Orbitz, however small." }, { "title": "2008: Web 2.0 software I use every day", "url": "/posts/2008-web-20-software-i-use-every-day/", "categories": "", "tags": "web20, software", "date": "2008-01-03 14:48:00 -0800", "snippet": "Following-up on Michael Arrington's post \"2008: Web 2.0 Companies I Couldn’t Live Without\", here are the Web 2.0 tools and services I use whenever I am behind the computer (I'll pass on the super-o...", "content": "Following-up on Michael Arrington's post \"2008: Web 2.0 Companies I Couldn’t Live Without\", here are the Web 2.0 tools and services I use whenever I am behind the computer (I'll pass on the super-obvious ones like Google Search and Wikipedia which I doubt will be displaced any time soon):Delicious: over 1900 entries and countingSlimTimer: impossible to live without it at workBasecamp: we use it at Orbeon to communicate with our customers (I even have a personal account for some To-Do lists)Google Calendar: all my scheduled activities (including a few shared calendars)Google Reader: about 200 feeds as of now (I switched a few months ago after being too frustrated with the reader in Thunderbird)GMail: I currently use it mostly through OS X's Mail app thanks to the recent GMail IMAP supportJott: an amazing newcomer (I just keep Jotting myself when in the US)Firefox: 'nuf said, using 3.0 beta 2 on Mac OS X at the momentSkype: VoiP and chat (I use SkypeOut and SkypeIn as well)iTunes: music player and podcast platform (but for sure I won't buy any DRM-protected music from the iTunes Music Store)Here are some other services I use frequently:Google Docs: whenever possible (but there is huge room for improvement in the software)Wordpress: whenever I post a work blog entryBlogger: whenever I post a personal blog entryFeedburner: all my feeds go through itGoogle Maps: no commentGoogle Alerts: mostly for alerts about Orbeon, XForms and MascagniFlickr: whenever I post pictures (I have a pro account)YouTube: almost every time I watch a videoSome tools I like but which I don't use often:Dopplr: I enter my trips there, but it hasn't been really useful to sync up with anybody yetMindMeister: just a very cool piece of softwareAmazon mp3 Store: I bought a few tracks to try it out, and I liked the smooth experience (just say no to DRM)Incidentally, I have over 150 connections on LinkedIn and I am getting started on Facebook. So far I fail to find them either really useful or exciting. I bet I am missing something, but one reason could be that neither provides me with a comprehensive RSS or Atom feed of the last updates: I certainly won't bother visiting these sites every day until that happens.I wonder how this landscape will change in one year. Hopefully there will be lots of improvements and good surprises!" }, { "title": "Enough about (badly) guessing the user's language", "url": "/posts/enough-about-badly-guessing-users/", "categories": "", "tags": "switzerland, complaint, firefox, google, i18n", "date": "2007-12-28 13:28:00 -0800", "snippet": "I am in Switzerland for Christmas. I launch a new Firefox install. Firefox loads the Firefox Start page, featuring Google search. The page is in German.About 64% of people speak Swiss-German dialec...", "content": "I am in Switzerland for Christmas. I launch a new Firefox install. Firefox loads the Firefox Start page, featuring Google search. The page is in German.About 64% of people speak Swiss-German dialects (and German as well), 20% French, 7% Italian, based on geographical boundaries. People in these different areas do not necessarily have a working knowledge of the other languages (even though they should). This means that Switzerland is not a German-speaking country in the same way that Germany is.For this reason, it is not ok to present pages in German by default when you believe that the user is located in Switzerland. Even if you think it is ok to make an clearly erroneous guess, then you must provide an easy way to switch to the other national languages as well as English. This ability must be available directly on the home page and must be a one-click operation. This is how Swiss sites typically behave.The Firefox home page is particularly badly designed in this respect. You can't switch language directly on the page. In fact, to change the language, you have to know German to go to the advanced search preferences (\"Einstellungen\", and then find the menu to change the user's language), which does not make any sense. Somebody without a knowledge of basic German or an awful lot of patience will simply not be able to do it at all.Other countries are multi-lingual, including but not limited to Belgium and Canada. I think it is time that companies that design localized sites become aware of this issue." }, { "title": "Firefox 3.0 beta 2 a good step forward", "url": "/posts/firefox-30-beta-2-good-step-forward/", "categories": "", "tags": "firefox, orbeon, mozilla", "date": "2007-12-26 12:46:00 -0800", "snippet": "At long last, Firefox 3 is coming, with a second beta released just a few days ago.Firefox 2 is not too bad, and it is certainly preferable to using Internet Explorer, but it is plagued by memory l...", "content": "At long last, Firefox 3 is coming, with a second beta released just a few days ago.Firefox 2 is not too bad, and it is certainly preferable to using Internet Explorer, but it is plagued by memory leaks and gradual performance slowdowns. Firefox 3 is meant to improve a lot on this, thanks to \"nearly 2 million lines of code changes\" in the new Gecko engine.Add to this the fact that Firefox 3 greatly improves Mac OS X support (Firefox 2 on Mac OS X is sub-par compared to its Windows incarnation, with no native widgets and funny UI bugs), and there is no doubt that it will be a necessary upgrade.My first impression of 3.0 beta 2 is very good: history back/forward is much snappier, as is switching between tabs. Google Reader seems much faster. I have been using the beta for several days without any major problems, except some oddities in the Download Manager, and missing file names when printing to PDF.Compatibility with web sites out there seems excellent, although it is inevitable that issues will arise here or there. In particular, some code in Orbeon Forms had to be fixed due to Firefox 3 fixing this bug.There are a few disappointments:Printing seems as broken as ever. Safari seems to do much better here, and I suspect that even IE does better, which is a real shame.While OS integration is much improved on the Mac with native widgets, it doesn't seem that 3.0 beta 2 is able to use the native spellchecker or Keychain.In spite of this, Firefox 3 will be a good step forward, and I can't wait for further performance improvements such as the integration of the Tamarin VM." }, { "title": "I can't believe we still have DVD region coding", "url": "/posts/i-cant-believe-we-still-have-dvd-region/", "categories": "", "tags": "freedom, suisse, movies, corruption, switzerland, entertainment, complaint, dmca, dvd", "date": "2007-12-25 11:02:00 -0800", "snippet": "Today I put in my computer a DVD from a Blackadder set, bought legally for me as a gift a few of years ago.I happen to have plugged a European DVD into my US Mac, and you can guess what message I g...", "content": "Today I put in my computer a DVD from a Blackadder set, bought legally for me as a gift a few of years ago.I happen to have plugged a European DVD into my US Mac, and you can guess what message I got from the Mac OS X Leopard DVD player. You got it: \"The disc region does not match the drive region\". Yeah, I can change it 4 times. Thanks, that's so generous.This is simply insane. I had forgotten that this even existed as I don't play DVDs very often. Furthermore, in Switzerland where I am at the moment, standalone players are routinely sold region-free (although that may change with the upcoming and particularly crazy Swiss DMCA).What is the sense of this region coding? This is the 21st century. People travel. They use the internet. The world is working hard on removing existing boundaries and I don't think it is permissible to build new, artificial barriers. Governments and industries that attempt to do that should be fought.I understand that I am partly at fault because I am using an actual, physical DVD, a quite old media, and I should have ripped my DVDs a long time ago and be free of these issues. But I think it is still important to talk about region coding, because:Most content sold today is still in region-coded DVD format, while it could be region-free.Recent formats like Blu-ray support region coding as well.DRM in general is pervasive for video content online (if you except P2P networks), and kind or region-coded through stores like the iTunes Store which require credit cards registered in a certain country.DRM is going away for music now, which is a good first step. There is hope that, as broadband and video-enabled devices become even more widespread, DRM on video will vanish on its own as that will be the only option left to the industry in the face of underground P2P filesharing. Unfortunately, in the meanwhile, as has been the case with music, a lot of harm will be done. I am not sure what we can do about it, except raise the awareness of the issue by talking about it.PS: In my particular case, there are workarounds, like using VLC to play the DVD (although VLC seems to crash quite often). My previous laptop, bought 4 years ago, was made region-free right away. However on the Mac, making the drive region-free is not as mainstream a process. I wonder what non-technical users do in this kind of situation? Change the player's zone until it is finally locked in the wrong zone?" }, { "title": "Mitt Romney and freedom", "url": "/posts/mitt-romney-and-freedom/", "categories": "", "tags": "freedom, election, logic, philosophy, mormonism, religion", "date": "2007-12-06 23:12:00 -0800", "snippet": "Here is what one of the presidential candidates, Mitt Romney, recently professed:\"Freedom requires religion, just as religion requires freedom. Freedom opens the windows of the soul so that man can...", "content": "Here is what one of the presidential candidates, Mitt Romney, recently professed:\"Freedom requires religion, just as religion requires freedom. Freedom opens the windows of the soul so that man can discover his most profound beliefs and commune with God. Freedom and religion endure together, or perish alone.\"This has to be one of the most nonsensical statements I have read in a while, and I can only qualify it, nicely, as blabber.Freedom has nothing to do with religion. If anything, religion has hindered, and is still hindering, freedom in many parts of the world. America, the land of the free, was founded by atheists (at most Deists) and free-thinkers, contrary to what too many in America would like you to believe.More generally, ethics do not correlate with religion: many religious people behave in a non-ethical way, and many non-religious people behave in an ethical way. There is lot of wishful thinking, but no evidence that I know of showing otherwise.It is clear that Romney doesn't like to be asked about his religion (Mormonism), which is understandable, but talking nonsense is probably not a good solution to that particular problem: it just makes him sound dumb (which, after all, is fine in my book)." }, { "title": "Deutsche Grammophon mostly gets it", "url": "/posts/deutsche-grammophon-mostly-gets-it/", "categories": "", "tags": "", "date": "2007-12-05 22:49:00 -0800", "snippet": "2007 will be remembered as the year the recording industry moved away from Digital Restrictions Management (DRM).The latest positive development in this saga is that a few days ago Deutsche Grammop...", "content": "2007 will be remembered as the year the recording industry moved away from Digital Restrictions Management (DRM).The latest positive development in this saga is that a few days ago Deutsche Grammophon (which belongs to Universal / Vivendi), mainly known by classical music and opera afficionados, opened its online music store.The stores offers the entire DG music catalog in mp3 format encoded at 320 kbps. The web site is reasonably well done for a version 1.0. Search appears to function, album tracks list properly, and the previews are of good quality. My main disappointment is that there is no option to download music in a lossless format such as FLAC, but maybe I am expecting too much.As the web site says, \"Over 600 out-of-print CDs are made available again as downloads in this shop.\" Finally, somebody realizes that in the internet age, nothing should ever get \"out-of-print\" again.I wish DG much success with this web site, even though it may be too late for the music industry to be rescued, as \"For the last eight years the industry has been doing nothing more than rearranging the deck chairs on its own musical Titanic.\"." }, { "title": "Contre le DMCA Suisse", "url": "/posts/contre-le-dmca-suisse/", "categories": "", "tags": "freedom, suisse, music, switzerland, p2p, dmca, french", "date": "2007-12-05 08:13:00 -0800", "snippet": "On pourrait croire qu'en Suisse, pays champion de la démocracie directe, on ne puisse pas facilement passer une loi sans même que les citoyens en aient vent et sans que la presse n'en mentionne quo...", "content": "On pourrait croire qu'en Suisse, pays champion de la démocracie directe, on ne puisse pas facilement passer une loi sans même que les citoyens en aient vent et sans que la presse n'en mentionne quoi que ce soit.Pourtant, c'est bien ce qui semble se passer avec le \"DMCA\" suisse. La SUISA avait déjà réussi récemment à voler au consommateur CHF 80 par lecteur mp3. Ceci était présenté comme la seule façon de garder le droit à la copie privée. Une loi enrageante, mais qui au moins n'entachait pas la liberté des consommateurs.Maintenant, une nouvelle loi proposée est bien pire: elle semble même aller plus loin que le DMCA américain par certains aspects. Voir cet article pour plus de détails: c'est une vraie folie qu'on essaie d'imposer à des citoyens suisses complètement malinformés ou désinformés. Lisez également ce billet web écrit par Cory Doctorow. Il appelle cette loi \"brutale\", et il a raison.Le gouvernement suisse apparait aussi corrompu (au sens \"corruption du processus politique\" proposé par Larry Lessig) que celui des Etats-Unis ou de la France. Ce n'est guère une vraie surprise, mais j'en reste déçu. Quant à la presse, en particulier en Suisse Romande, on ne peut que la blâmer pour sa médiocrité.En attendant, faites passer le mot et signez le référendum." }, { "title": "Leopard Spaces eats windows", "url": "/posts/leopard-spaces-eats-windows/", "categories": "", "tags": "osx, apple, bug, leopard", "date": "2007-11-28 11:48:00 -0800", "snippet": "And by that, I don't mean that it beats the crap out of Microsoft Windows, I really mean that Mac OS X application windows sometimes disappear when you use Spaces. You can't cmd-tab to them anymore...", "content": "And by that, I don't mean that it beats the crap out of Microsoft Windows, I really mean that Mac OS X application windows sometimes disappear when you use Spaces. You can't cmd-tab to them anymore or otherwise see them again. They are not just minimized or hidden, they are in no man's land.I hit this over the last few days, and I am not the only one. See this discussion: Disappearing windows in spaces.The workaround of disabling Spaces and then re-enabling works for me, but it's quite an annoyance to have to resort to that as you need to move windows to their proper space again for applications which aren't assigned to a particular space." }, { "title": "The future of reading", "url": "/posts/future-of-reading/", "categories": "", "tags": "freedom, reading, kindle, amazon", "date": "2007-11-24 13:29:00 -0800", "snippet": "Following-up on the release of the Amazon Kindle, you may want to read Mark Pilgrim's The Future of Reading (A Play in Six Acts). Sometimes, you just need to be reminded of certain ideals and go pa...", "content": "Following-up on the release of the Amazon Kindle, you may want to read Mark Pilgrim's The Future of Reading (A Play in Six Acts). Sometimes, you just need to be reminded of certain ideals and go past the lure of the gadgetry. Thank you, George Orwell and Richard Stallman." }, { "title": "Amazon Kindle: steps forward, steps backward", "url": "/posts/amazon-kindle-steps-forward-steps/", "categories": "", "tags": "hardware, kindle, sony, amazon, pdf, ebooks", "date": "2007-11-19 09:12:00 -0800", "snippet": "Today, Amazon officially announced the Kindle eBook reader and associated services. This has already produced a flurry of blog posts all over the place. The device is not yet available, but it alre...", "content": "Today, Amazon officially announced the Kindle eBook reader and associated services. This has already produced a flurry of blog posts all over the place. The device is not yet available, but it already has 248 customer reviews on Amazon.com (mostly negative so far but again almost nobody actually got their hands on it).So what did Amazon get right?The Kindle features an \"electronic paper\" display from E-Ink, the same company that makes the Sony reader screen. This means crisp black text on almost-white-but-kind-of-gray background, 180 degree viewing angle, and ability to read in broad daylight. You can take this on the beach or on your mountain hike, but you will need a reading light in the dark.It doesn't require a PC to synchronize. Instead it uses a Sprint EVDO connection and you buy your books directly from the device. There are no fees for the connection, everything is included when you buy the Kindle.About 80,000 books and magazines are available for download from Amazon.Free wireless access to Wikipedia.Built-in search and dictionary functionality.On the negative side:As everybody has pointed out, it is a dead-ugly, uncool, device. Compare it with the beautiful second-generation Sony reader. Amazon should really learn from Sony and Apple.If you loose or break the Kindle, USD 400 go down the drain. This today buys you two OLPC XO-1 laptops. I thought that the Sony reader, at USD 300, was already too expensive and beyond what I would pay for such a device.Your only option to get content seems to be through EVDO and Amazon. There is no Wi-Fi or bluetooth transfer. Besides obvious coverage limitations in the US itself, this also means there is no coverage at all outside the US, which alone makes this a poor choice for a device you may want to carry all over the place.Free Wikipedia is better than nothing, but what about the thousands of free books from the Gutenberg project or Creative Commons books?Apparently, you can email Word documents to the Kindle for 10 cents a pop. There is no mention of PDF support, or other open formats so far. But paying for uploading your own documents to your own device sounds quite ridiculous. Even the Sony reader allows you to load PDF and RTF files (although it seems that the result is less than satisfactory for PDF files).I think that some form of electronic book reader is bound to succeed, and that soon enough paper books and magazines will be largely a thing of the past.However, I doubt that as is, the Amazon solution will be successful. To succeed, you need a cheap, cool device, and a good degree of openness so that a healthy ecosystem develops.So far, the electronic book business has followed the same path as the music industry: strong DRM and no sign of openness. We all know the result: after years of painful struggle, DRM for music is being phased out. It seems that instead of learning from this experience, book publishers want to go through the same process instead of embracing the future right away.Anyway, you may want to read what's Amazon founder Jeff Bezos's take on the whole thing." }, { "title": "Leopard Finder: the new Path Bar", "url": "/posts/leopard-finder-finally-way-to-see/", "categories": "", "tags": "osx, finder, leopard", "date": "2007-11-15 19:10:00 -0800", "snippet": "Windows Explorer has long had an option to show the path of the current folder in the title bar of the window. This is a very convenient feature which was lacking in the Finder so far.Leopard now h...", "content": "Windows Explorer has long had an option to show the path of the current folder in the title bar of the window. This is a very convenient feature which was lacking in the Finder so far.Leopard now has something similar. It's called the \"Path Bar\". I stumbled upon it by chance when doing a search with Spotlight: the result window had this funny path at the bottom. It turns out that you can enable it for other windows by going to the \"View\" menu and selecting \"Show Path Bar\".The Path Bar may even be better than just showing the raw path in the window title: you see icons and can double click on path elements. So yay for a useful improvement in Leopard!" }, { "title": "Is it me, or is Leopard screen sharing fairly lame?", "url": "/posts/is-it-me-or-is-leopard-screen-sharing/", "categories": "", "tags": "bugs, osx, apple, leopard", "date": "2007-11-11 12:16:00 -0800", "snippet": "Here are a few of my issues with it:It crashed at least once.It feels quite slow, certainly slower than the Windows Remote Desktop, for example. Maybe because it's based on VNC and sending around p...", "content": "Here are a few of my issues with it:It crashed at least once.It feels quite slow, certainly slower than the Windows Remote Desktop, for example. Maybe because it's based on VNC and sending around pixmaps all the time?The clipboard is not automatically shared. You have to send it around explicitly. This means that you can't just copy and paste a URL around without going to a menu inbetween (or click on an icon).I restarted my wireless router with a screen sharing session open. The session just hung and was not able to pick up the connection again. I had to restart the screen sharing session.The \"New...\" connection menu entry just opens a dialog with a single text field. There is no way to browse from a visible computer on the network. Annoying if you just had to close the connection (see aforementioned problem) and just want to reopen it. You then have to go back to the finder.If you show the toolbar (with three miserable icons), you have a \"Fit screen in window\" option, which it turns out is the same a the \"Turn Scaling On/Off\" menu entry. Mmmh, did anybody at Apple even looked at this app?I wouldn't say Screen Sharing is useless, but this is a version 1.0 and it shows." }, { "title": "Leopard doesn't &quot;Play&quot; (and a plea for FLAC)", "url": "/posts/leopard-doesnt-play-and-plea-for-flac/", "categories": "", "tags": "osx, play, leopard, flac", "date": "2007-11-10 20:25:00 -0800", "snippet": "Since Apple still doesn't think that supporting a free, fast, unemcumbered, lossless audio codec is a good idea, I had been using Play on Tiger. Unfortunately, it is broken on Leopard. Version 0.2 ...", "content": "Since Apple still doesn't think that supporting a free, fast, unemcumbered, lossless audio codec is a good idea, I had been using Play on Tiger. Unfortunately, it is broken on Leopard. Version 0.2 doesn't start anymore at all. The good news is that the author is working on it. In fact, the latest builds (using r1057 at the moment) at least start and seem to, well, play, but I don't seem to be able to import anything into the Play library, for example.As good as Play will eventually be on Leopard (and it is likely to remain a much more lightweight alternative to iTunes), Apple really needs to support FLAC. Who needs the Apple Lossless format anyway? So go Apple, put an engineer on it for a few days and support FLAC already." }, { "title": "The big jump to Leopard", "url": "/posts/big-jump-to-leopard/", "categories": "", "tags": "osx, apple, leopard, i18n", "date": "2007-11-09 13:40:00 -0800", "snippet": "Last night, I figured (completely irrationally) that I would take the jump and upgrade to Leopard. Here is my first feedback after one day of work with it:I got the infamous \"blue screen\" upon rest...", "content": "Last night, I figured (completely irrationally) that I would take the jump and upgrade to Leopard. Here is my first feedback after one day of work with it:I got the infamous \"blue screen\" upon restart during install. I followed option C and luckily thing went smoothly after that. I don't know yet which app installed ApplicationEnhancer.bundle.As I already knew, Java windows don't play nice with Spaces. All the Java apps remain stubbornly in the first space and won't move. Also, if you are in a space other than the first one and cmd-tab to a Java app, nothing happens: you have to explicitly go back to the space containing the Java app. It's not a showstopper, but it should be fixed.IntelliJ has some random problems with the tabs in the files section: they sometimes, behave erratically. This is annoying and I hope that IntelliJ >= 7.0.2 will fix this. It seem that changing look and feel may work around the issue, but IntelliJ then looks utterly ugly.Parallels seems to run fine, except that Windows drives don't show up in the Finder.I had no immediate obvious issues with Firefox, Thunderbird, or Tomcat.So I can't really say \"so far so good\", but it seems like things should be workable." }, { "title": "Countries", "url": "/posts/countries/", "categories": "", "tags": "", "date": "2007-11-05 23:59:00 -0800", "snippet": "I just found this old post by Norm about a pretty cool idea:\"Some of my friends engage in a friendly contest: they compete to see who can visit the most countries. It’s a life-long game. One of the...", "content": "I just found this old post by Norm about a pretty cool idea:\"Some of my friends engage in a friendly contest: they compete to see who can visit the most countries. It’s a life-long game. One of the sub-goals is to always have visited more countries than you are years old.\"If I am not missing any (not quite in exactly the right order, I fear):SwitzerlandFranceItaly and VaticanGermanySpainBelgiumPolandAustriaCzech Republic / ex-CzechoslovakiaHungaryTurkeyEgyptCyprusUSACanadaKenyaTanzaniaPeruMoroccoUK (England and Scotland)The NetherlandsChina and TibetTaiwanHere are a few candidates for the next ones:MexicoJapanGreeceIndiaNepalSouth AfricaCongoBrazilThere are currently 193 countries (well, \"states\"), 194 if you count Taiwan (and really it should be counted). This means I have 171 countries to go to be done (countries popping up or disappearing notwistanding), and starting exactly today, I have 12 to go to catch up ;-)" }, { "title": "I want Java 6 on my Mac", "url": "/posts/i-want-java-6-on-my-mac/", "categories": "", "tags": "osx, leopard, java, mac", "date": "2007-11-04 11:52:00 -0800", "snippet": "I am hereby (13949712720901ForOSX) casting my vote for Java 6 on Leopard. But even more importantly, I am asking Apple to realize that good communication is of the essence.As much as I dislike Wind...", "content": "I am hereby (13949712720901ForOSX) casting my vote for Java 6 on Leopard. But even more importantly, I am asking Apple to realize that good communication is of the essence.As much as I dislike Windows, I wouldn't have bought a USD 3000+ Mac Book Pro without Java on it, and many people I know wouldn't have either. I wouldn't be considering using Macs at home, or thinking about getting some of my family members to use Macs, if I wasn't using one daily in the first place. So you see, there is a little bit of a snowball effect here.It is very important for us developers who use Java to know that Apple fully supports it, and plans to fully support it in the future. Delays in the release of new JDKs on the Mac are already annoying enough. Not even knowing whether we'll get those new releases is unacceptable." }, { "title": "California driver license renewal", "url": "/posts/california-driver-license-renewal/", "categories": "", "tags": "california, government, dmv", "date": "2007-10-31 19:19:00 -0700", "snippet": "My last US driver license expired in 2004 and I had to get it renewed. Here is how it went:Setup appointment at the San Mateo DMV with their online form (if you don't get an appointment, you will w...", "content": "My last US driver license expired in 2004 and I had to get it renewed. Here is how it went:Setup appointment at the San Mateo DMV with their online form (if you don't get an appointment, you will wait longer on-site)At the DMV:\"Start here\" counter: got number and a form (nobody was in line)Waiting area: filled out renewal form and worked on my laptop while waiting for my number (took about 15 minutes for my number to be called)Counter 1: gave filled-out form, paid fee (USD 20-something) with credit card, got receiptCounter 2: waited a bit in line, got picture taken and renewal testTesting area: filled out test as best as I could (last time I actually studied the stuff was 10 years ago)Counter 3: waited a bit in line, produced filled-out test (yay I passed) and got my temp licenseOne week later: got the actual license in the mailThe positives:The appointment + number system works fine.The DMV employees are efficient.I was done in about one hour total at the DMV.I feared I would need a drive test but luckily that was not needed.I was not asked for a proof of residence. My SSN and expired license seemed to be enough.Of course all this could be streamlined even more with appropriate technology. You still spend more time than necessary waiting in line. So always take with you a computer / music player / book or whatever can be used to fill in the gaps." }, { "title": "Disabling (and managing) keyboard shortcuts in Firefox", "url": "/posts/disabling-and-managing-keyboard/", "categories": "", "tags": "work, firefox, slimtimer", "date": "2007-10-28 13:25:00 -0700", "snippet": "I am a big user of SLIMTIMER. Not a minute is spent at work without it running, and more and more I am using it for personal tasks as well.I run the Timer in the Firefox sidebar. However, I have co...", "content": "I am a big user of SLIMTIMER. Not a minute is spent at work without it running, and more and more I am using it for personal tasks as well.I run the Timer in the Firefox sidebar. However, I have countless times used by mistake the cmd-B (or ctrl-B for non-Mac users) combination, which opens the bookmarks in the sidebar. There goes my timer: I have to reopen it and restart my current task. This is even more annoying as I don't use Firefox bookmarks but del.icio.us instead.The good news is that I found the Keyconfig extension for Firefox (and Thunderbird) which allows you to easily edit Firefox keyboard shortcuts. Install, go to Tools -> Keyconfig, and get rid of the cmd-B binding (or assign it to something more useful). Note that I downloaded Keyconfig from here." }, { "title": "The OS X Tiger terminal doesn't support accents", "url": "/posts/os-x-tiger-terminal-doesnt-support/", "categories": "", "tags": "osx, apple, i18n", "date": "2007-10-27 12:35:00 -0700", "snippet": "I was stunned to realize that the Mac OS X Tiger terminal doesn't support accents (and other non-ASCII characters) by default. This includes pasting accented characters in the terminal, listing fil...", "content": "I was stunned to realize that the Mac OS X Tiger terminal doesn't support accents (and other non-ASCII characters) by default. This includes pasting accented characters in the terminal, listing files with accents in their names, etc.In fact, this is not really a question of the terminal: it seems that the versions of bash, ls, and other core utilities that come with Tiger are too old and don't support UTF-8. Wow: Tiger came out in 2005. Didn't Java have support for UTF-8 back in 1995 already? This is 2007 and just the kind of things that should work out of the box, right?Anyway, I had some luck by installing MacPorts and following the suggestions in this post, although this still doesn't work well with iTerm which is unable to combine diacritics.But maybe I am a little unfair as I am still using Tiger. Please tell me that this is now fixed in Leopard." }, { "title": "A new blog engine for my personal blog", "url": "/posts/new-blog-enginehttpwwwbloggercomimgglli/", "categories": "", "tags": "news", "date": "2007-10-24 22:24:00 -0700", "snippet": "As I just did for Mascagni.org, I switched to using Blogger for my personal blog, and my personal web site will just aggregate the Atom feed. A promise for more posts in the future? I hope so :-)", "content": "As I just did for Mascagni.org, I switched to using Blogger for my personal blog, and my personal web site will just aggregate the Atom feed. A promise for more posts in the future? I hope so :-)" } ]
